// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct IOUSBDeviceStruct187 {
 *     void* _reserved;
 *     HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
 *     ULONG (*AddRef)(void*);
 *     ULONG (*Release)(void*);
 *     IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
 *     CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
 *     IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
 *     mach_port_t (*GetDeviceAsyncPort)(void*);
 *     IOReturn (*USBDeviceOpen)(void*);
 *     IOReturn (*USBDeviceClose)(void*);
 *     IOReturn (*GetDeviceClass)(void*,UInt8*);
 *     IOReturn (*GetDeviceSubClass)(void*,UInt8*);
 *     IOReturn (*GetDeviceProtocol)(void*,UInt8*);
 *     IOReturn (*GetDeviceVendor)(void*,UInt16*);
 *     IOReturn (*GetDeviceProduct)(void*,UInt16*);
 *     IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
 *     IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
 *     IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
 *     IOReturn (*GetDeviceSpeed)(void*,UInt8*);
 *     IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
 *     IOReturn (*GetLocationID)(void*,UInt32*);
 *     IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
 *     IOReturn (*GetConfiguration)(void*,UInt8*);
 *     IOReturn (*SetConfiguration)(void*,UInt8);
 *     IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
 *     IOReturn (*ResetDevice)(void*);
 *     IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
 *     IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
 *     IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
 *     IOReturn (*USBDeviceOpenSeize)(void*);
 *     IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
 *     IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
 *     IOReturn (*USBDeviceSuspend)(void*,Boolean);
 *     IOReturn (*USBDeviceAbortPipeZero)(void*);
 *     IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
 *     IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
 *     IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
 *     IOReturn (*USBDeviceReEnumerate)(void*,UInt32);
 * };
 * }
 */
public class IOUSBDeviceStruct187 {

    public static MemoryLayout $LAYOUT() {
        return constants$4.const$5;
    }
    public static VarHandle _reserved$VH() {
        return constants$5.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static MemorySegment _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static void _reserved$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$0.set(seg, x);
    }
    public static MemorySegment _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$5.const$2, fi, constants$5.const$1, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$5.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$5.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$4.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(void*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$6.const$0, fi, constants$5.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$2.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(void*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$6.const$3, fi, constants$5.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$6.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$4.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public interface CreateDeviceAsyncEventSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateDeviceAsyncEventSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$0, fi, constants$6.const$5, scope);
        }
        static CreateDeviceAsyncEventSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateDeviceAsyncEventSource$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static MemorySegment CreateDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$2.set(seg, x);
    }
    public static MemorySegment CreateDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncEventSource CreateDeviceAsyncEventSource(MemorySegment segment, Arena scope) {
        return CreateDeviceAsyncEventSource.ofAddress(CreateDeviceAsyncEventSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public interface GetDeviceAsyncEventSource {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetDeviceAsyncEventSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$3, fi, constants$3.const$0, scope);
        }
        static GetDeviceAsyncEventSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$7.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceAsyncEventSource$VH() {
        return constants$7.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public static MemorySegment GetDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$5.set(seg, x);
    }
    public static MemorySegment GetDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncEventSource GetDeviceAsyncEventSource(MemorySegment segment, Arena scope) {
        return GetDeviceAsyncEventSource.ofAddress(GetDeviceAsyncEventSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public interface CreateDeviceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateDeviceAsyncPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$0, fi, constants$6.const$5, scope);
        }
        static CreateDeviceAsyncPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateDeviceAsyncPort$VH() {
        return constants$8.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static MemorySegment CreateDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$1.set(seg, x);
    }
    public static MemorySegment CreateDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncPort CreateDeviceAsyncPort(MemorySegment segment, Arena scope) {
        return CreateDeviceAsyncPort.ofAddress(CreateDeviceAsyncPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public interface GetDeviceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetDeviceAsyncPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$2, fi, constants$5.const$5, scope);
        }
        static GetDeviceAsyncPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceAsyncPort$VH() {
        return constants$8.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public static MemorySegment GetDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public static void GetDeviceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$3.set(seg, x);
    }
    public static MemorySegment GetDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncPort GetDeviceAsyncPort(MemorySegment segment, Arena scope) {
        return GetDeviceAsyncPort.ofAddress(GetDeviceAsyncPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public interface USBDeviceOpen {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceOpen fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$4, fi, constants$5.const$5, scope);
        }
        static USBDeviceOpen ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceOpen$VH() {
        return constants$8.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public static MemorySegment USBDeviceOpen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public static void USBDeviceOpen$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$5.set(seg, x);
    }
    public static MemorySegment USBDeviceOpen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpen$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpen USBDeviceOpen(MemorySegment segment, Arena scope) {
        return USBDeviceOpen.ofAddress(USBDeviceOpen$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public interface USBDeviceClose {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceClose fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$0, fi, constants$5.const$5, scope);
        }
        static USBDeviceClose ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceClose$VH() {
        return constants$9.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public static MemorySegment USBDeviceClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public static void USBDeviceClose$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$1.set(seg, x);
    }
    public static MemorySegment USBDeviceClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceClose$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceClose USBDeviceClose(MemorySegment segment, Arena scope) {
        return USBDeviceClose.ofAddress(USBDeviceClose$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public interface GetDeviceClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$2, fi, constants$6.const$5, scope);
        }
        static GetDeviceClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceClass$VH() {
        return constants$9.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public static void GetDeviceClass$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$3.set(seg, x);
    }
    public static MemorySegment GetDeviceClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceClass GetDeviceClass(MemorySegment segment, Arena scope) {
        return GetDeviceClass.ofAddress(GetDeviceClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public interface GetDeviceSubClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceSubClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$4, fi, constants$6.const$5, scope);
        }
        static GetDeviceSubClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceSubClass$VH() {
        return constants$9.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceSubClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public static void GetDeviceSubClass$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$5.set(seg, x);
    }
    public static MemorySegment GetDeviceSubClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSubClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSubClass GetDeviceSubClass(MemorySegment segment, Arena scope) {
        return GetDeviceSubClass.ofAddress(GetDeviceSubClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public interface GetDeviceProtocol {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceProtocol fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$10.const$0, fi, constants$6.const$5, scope);
        }
        static GetDeviceProtocol ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceProtocol$VH() {
        return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceProtocol$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public static void GetDeviceProtocol$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$1.set(seg, x);
    }
    public static MemorySegment GetDeviceProtocol$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProtocol$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProtocol GetDeviceProtocol(MemorySegment segment, Arena scope) {
        return GetDeviceProtocol.ofAddress(GetDeviceProtocol$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public interface GetDeviceVendor {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceVendor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$10.const$2, fi, constants$6.const$5, scope);
        }
        static GetDeviceVendor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceVendor$VH() {
        return constants$10.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static void GetDeviceVendor$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$3.set(seg, x);
    }
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceVendor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceVendor GetDeviceVendor(MemorySegment segment, Arena scope) {
        return GetDeviceVendor.ofAddress(GetDeviceVendor$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public interface GetDeviceProduct {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceProduct fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$10.const$4, fi, constants$6.const$5, scope);
        }
        static GetDeviceProduct ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceProduct$VH() {
        return constants$10.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static void GetDeviceProduct$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$5.set(seg, x);
    }
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProduct$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProduct GetDeviceProduct(MemorySegment segment, Arena scope) {
        return GetDeviceProduct.ofAddress(GetDeviceProduct$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public interface GetDeviceReleaseNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceReleaseNumber fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$11.const$0, fi, constants$6.const$5, scope);
        }
        static GetDeviceReleaseNumber ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceReleaseNumber$VH() {
        return constants$11.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$1.set(seg, x);
    }
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceReleaseNumber GetDeviceReleaseNumber(MemorySegment segment, Arena scope) {
        return GetDeviceReleaseNumber.ofAddress(GetDeviceReleaseNumber$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public interface GetDeviceAddress {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceAddress fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$11.const$2, fi, constants$6.const$5, scope);
        }
        static GetDeviceAddress ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceAddress$VH() {
        return constants$11.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public static MemorySegment GetDeviceAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public static void GetDeviceAddress$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$3.set(seg, x);
    }
    public static MemorySegment GetDeviceAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAddress$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAddress GetDeviceAddress(MemorySegment segment, Arena scope) {
        return GetDeviceAddress.ofAddress(GetDeviceAddress$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public interface GetDeviceBusPowerAvailable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceBusPowerAvailable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$11.const$4, fi, constants$6.const$5, scope);
        }
        static GetDeviceBusPowerAvailable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceBusPowerAvailable$VH() {
        return constants$11.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetDeviceBusPowerAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$5.set(seg, x);
    }
    public static MemorySegment GetDeviceBusPowerAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceBusPowerAvailable GetDeviceBusPowerAvailable(MemorySegment segment, Arena scope) {
        return GetDeviceBusPowerAvailable.ofAddress(GetDeviceBusPowerAvailable$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public interface GetDeviceSpeed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceSpeed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$12.const$0, fi, constants$6.const$5, scope);
        }
        static GetDeviceSpeed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceSpeed$VH() {
        return constants$12.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceSpeed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public static void GetDeviceSpeed$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$1.set(seg, x);
    }
    public static MemorySegment GetDeviceSpeed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSpeed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSpeed GetDeviceSpeed(MemorySegment segment, Arena scope) {
        return GetDeviceSpeed.ofAddress(GetDeviceSpeed$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public interface GetNumberOfConfigurations {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetNumberOfConfigurations fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$12.const$2, fi, constants$6.const$5, scope);
        }
        static GetNumberOfConfigurations ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetNumberOfConfigurations$VH() {
        return constants$12.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetNumberOfConfigurations$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public static void GetNumberOfConfigurations$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$3.set(seg, x);
    }
    public static MemorySegment GetNumberOfConfigurations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumberOfConfigurations$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNumberOfConfigurations GetNumberOfConfigurations(MemorySegment segment, Arena scope) {
        return GetNumberOfConfigurations.ofAddress(GetNumberOfConfigurations$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public interface GetLocationID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLocationID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$12.const$4, fi, constants$6.const$5, scope);
        }
        static GetLocationID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLocationID$VH() {
        return constants$12.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetLocationID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static void GetLocationID$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$5.set(seg, x);
    }
    public static MemorySegment GetLocationID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLocationID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLocationID GetLocationID(MemorySegment segment, Arena scope) {
        return GetLocationID.ofAddress(GetLocationID$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public interface GetConfigurationDescriptorPtr {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetConfigurationDescriptorPtr fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$13.const$1, fi, constants$13.const$0, scope);
        }
        static GetConfigurationDescriptorPtr ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$13.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetConfigurationDescriptorPtr$VH() {
        return constants$13.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public static MemorySegment GetConfigurationDescriptorPtr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$3.set(seg, x);
    }
    public static MemorySegment GetConfigurationDescriptorPtr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfigurationDescriptorPtr GetConfigurationDescriptorPtr(MemorySegment segment, Arena scope) {
        return GetConfigurationDescriptorPtr.ofAddress(GetConfigurationDescriptorPtr$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public interface GetConfiguration {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetConfiguration fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$13.const$4, fi, constants$6.const$5, scope);
        }
        static GetConfiguration ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetConfiguration$VH() {
        return constants$13.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public static void GetConfiguration$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$5.set(seg, x);
    }
    public static MemorySegment GetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfiguration$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfiguration GetConfiguration(MemorySegment segment, Arena scope) {
        return GetConfiguration.ofAddress(GetConfiguration$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public interface SetConfiguration {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(SetConfiguration fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$14.const$1, fi, constants$14.const$0, scope);
        }
        static SetConfiguration ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetConfiguration$VH() {
        return constants$14.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public static MemorySegment SetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public static void SetConfiguration$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$3.set(seg, x);
    }
    public static MemorySegment SetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetConfiguration$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetConfiguration SetConfiguration(MemorySegment segment, Arena scope) {
        return SetConfiguration.ofAddress(SetConfiguration$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public interface GetBusFrameNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBusFrameNumber fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$14.const$5, fi, constants$14.const$4, scope);
        }
        static GetBusFrameNumber ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$15.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBusFrameNumber$VH() {
        return constants$15.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static void GetBusFrameNumber$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$1.set(seg, x);
    }
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumber$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumber GetBusFrameNumber(MemorySegment segment, Arena scope) {
        return GetBusFrameNumber.ofAddress(GetBusFrameNumber$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ResetDevice)(void*);
     * }
     */
    public interface ResetDevice {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ResetDevice fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$15.const$2, fi, constants$5.const$5, scope);
        }
        static ResetDevice ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ResetDevice$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ResetDevice)(void*);
     * }
     */
    public static MemorySegment ResetDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ResetDevice)(void*);
     * }
     */
    public static void ResetDevice$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$3.set(seg, x);
    }
    public static MemorySegment ResetDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetDevice$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResetDevice ResetDevice(MemorySegment segment, Arena scope) {
        return ResetDevice.ofAddress(ResetDevice$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public interface DeviceRequest {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeviceRequest fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$15.const$4, fi, constants$6.const$5, scope);
        }
        static DeviceRequest ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeviceRequest$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public static MemorySegment DeviceRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public static void DeviceRequest$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$5.set(seg, x);
    }
    public static MemorySegment DeviceRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequest$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequest DeviceRequest(MemorySegment segment, Arena scope) {
        return DeviceRequest.ofAddress(DeviceRequest$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public interface DeviceRequestAsync {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DeviceRequestAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$16.const$1, fi, constants$16.const$0, scope);
        }
        static DeviceRequestAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$16.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeviceRequestAsync$VH() {
        return constants$16.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment DeviceRequestAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static void DeviceRequestAsync$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$3.set(seg, x);
    }
    public static MemorySegment DeviceRequestAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsync DeviceRequestAsync(MemorySegment segment, Arena scope) {
        return DeviceRequestAsync.ofAddress(DeviceRequestAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public interface CreateInterfaceIterator {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(CreateInterfaceIterator fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$16.const$4, fi, constants$14.const$4, scope);
        }
        static CreateInterfaceIterator ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$15.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateInterfaceIterator$VH() {
        return constants$16.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public static MemorySegment CreateInterfaceIterator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public static void CreateInterfaceIterator$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$5.set(seg, x);
    }
    public static MemorySegment CreateInterfaceIterator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceIterator$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceIterator CreateInterfaceIterator(MemorySegment segment, Arena scope) {
        return CreateInterfaceIterator.ofAddress(CreateInterfaceIterator$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public interface USBDeviceOpenSeize {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceOpenSeize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$17.const$0, fi, constants$5.const$5, scope);
        }
        static USBDeviceOpenSeize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceOpenSeize$VH() {
        return constants$17.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public static MemorySegment USBDeviceOpenSeize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public static void USBDeviceOpenSeize$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$1.set(seg, x);
    }
    public static MemorySegment USBDeviceOpenSeize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpenSeize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpenSeize USBDeviceOpenSeize(MemorySegment segment, Arena scope) {
        return USBDeviceOpenSeize.ofAddress(USBDeviceOpenSeize$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public interface DeviceRequestTO {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeviceRequestTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$17.const$2, fi, constants$6.const$5, scope);
        }
        static DeviceRequestTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeviceRequestTO$VH() {
        return constants$17.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public static MemorySegment DeviceRequestTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public static void DeviceRequestTO$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$3.set(seg, x);
    }
    public static MemorySegment DeviceRequestTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestTO DeviceRequestTO(MemorySegment segment, Arena scope) {
        return DeviceRequestTO.ofAddress(DeviceRequestTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public interface DeviceRequestAsyncTO {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DeviceRequestAsyncTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$17.const$4, fi, constants$16.const$0, scope);
        }
        static DeviceRequestAsyncTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$16.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeviceRequestAsyncTO$VH() {
        return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment DeviceRequestAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static void DeviceRequestAsyncTO$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$5.set(seg, x);
    }
    public static MemorySegment DeviceRequestAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsyncTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsyncTO DeviceRequestAsyncTO(MemorySegment segment, Arena scope) {
        return DeviceRequestAsyncTO.ofAddress(DeviceRequestAsyncTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public interface USBDeviceSuspend {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(USBDeviceSuspend fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$18.const$0, fi, constants$14.const$0, scope);
        }
        static USBDeviceSuspend ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceSuspend$VH() {
        return constants$18.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public static MemorySegment USBDeviceSuspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public static void USBDeviceSuspend$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$1.set(seg, x);
    }
    public static MemorySegment USBDeviceSuspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceSuspend$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceSuspend USBDeviceSuspend(MemorySegment segment, Arena scope) {
        return USBDeviceSuspend.ofAddress(USBDeviceSuspend$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public interface USBDeviceAbortPipeZero {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceAbortPipeZero fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$18.const$2, fi, constants$5.const$5, scope);
        }
        static USBDeviceAbortPipeZero ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceAbortPipeZero$VH() {
        return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public static MemorySegment USBDeviceAbortPipeZero$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public static void USBDeviceAbortPipeZero$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$3.set(seg, x);
    }
    public static MemorySegment USBDeviceAbortPipeZero$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceAbortPipeZero$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceAbortPipeZero USBDeviceAbortPipeZero(MemorySegment segment, Arena scope) {
        return USBDeviceAbortPipeZero.ofAddress(USBDeviceAbortPipeZero$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetManufacturerStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetManufacturerStringIndex fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$18.const$4, fi, constants$6.const$5, scope);
        }
        static USBGetManufacturerStringIndex ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBGetManufacturerStringIndex$VH() {
        return constants$18.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetManufacturerStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetManufacturerStringIndex$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$5.set(seg, x);
    }
    public static MemorySegment USBGetManufacturerStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetManufacturerStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetManufacturerStringIndex USBGetManufacturerStringIndex(MemorySegment segment, Arena scope) {
        return USBGetManufacturerStringIndex.ofAddress(USBGetManufacturerStringIndex$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetProductStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetProductStringIndex fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$19.const$0, fi, constants$6.const$5, scope);
        }
        static USBGetProductStringIndex ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBGetProductStringIndex$VH() {
        return constants$19.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetProductStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetProductStringIndex$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$1.set(seg, x);
    }
    public static MemorySegment USBGetProductStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetProductStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetProductStringIndex USBGetProductStringIndex(MemorySegment segment, Arena scope) {
        return USBGetProductStringIndex.ofAddress(USBGetProductStringIndex$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetSerialNumberStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetSerialNumberStringIndex fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$19.const$2, fi, constants$6.const$5, scope);
        }
        static USBGetSerialNumberStringIndex ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBGetSerialNumberStringIndex$VH() {
        return constants$19.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetSerialNumberStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetSerialNumberStringIndex$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$3.set(seg, x);
    }
    public static MemorySegment USBGetSerialNumberStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetSerialNumberStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetSerialNumberStringIndex USBGetSerialNumberStringIndex(MemorySegment segment, Arena scope) {
        return USBGetSerialNumberStringIndex.ofAddress(USBGetSerialNumberStringIndex$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBDeviceReEnumerate)(void*,UInt32);
     * }
     */
    public interface USBDeviceReEnumerate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(USBDeviceReEnumerate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$19.const$5, fi, constants$19.const$4, scope);
        }
        static USBDeviceReEnumerate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$20.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBDeviceReEnumerate$VH() {
        return constants$20.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceReEnumerate)(void*,UInt32);
     * }
     */
    public static MemorySegment USBDeviceReEnumerate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceReEnumerate)(void*,UInt32);
     * }
     */
    public static void USBDeviceReEnumerate$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$1.set(seg, x);
    }
    public static MemorySegment USBDeviceReEnumerate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceReEnumerate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceReEnumerate USBDeviceReEnumerate(MemorySegment segment, Arena scope) {
        return USBDeviceReEnumerate.ofAddress(USBDeviceReEnumerate$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


