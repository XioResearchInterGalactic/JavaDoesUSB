// Generated by jextract

package net.codecrete.usb.macos.gen.corefoundation;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class CFUUIDBytes {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("byte0"),
        Constants$root.C_CHAR$LAYOUT.withName("byte1"),
        Constants$root.C_CHAR$LAYOUT.withName("byte2"),
        Constants$root.C_CHAR$LAYOUT.withName("byte3"),
        Constants$root.C_CHAR$LAYOUT.withName("byte4"),
        Constants$root.C_CHAR$LAYOUT.withName("byte5"),
        Constants$root.C_CHAR$LAYOUT.withName("byte6"),
        Constants$root.C_CHAR$LAYOUT.withName("byte7"),
        Constants$root.C_CHAR$LAYOUT.withName("byte8"),
        Constants$root.C_CHAR$LAYOUT.withName("byte9"),
        Constants$root.C_CHAR$LAYOUT.withName("byte10"),
        Constants$root.C_CHAR$LAYOUT.withName("byte11"),
        Constants$root.C_CHAR$LAYOUT.withName("byte12"),
        Constants$root.C_CHAR$LAYOUT.withName("byte13"),
        Constants$root.C_CHAR$LAYOUT.withName("byte14"),
        Constants$root.C_CHAR$LAYOUT.withName("byte15")
    );
    public static MemoryLayout $LAYOUT() {
        return CFUUIDBytes.$struct$LAYOUT;
    }
    static final VarHandle byte0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte0"));
    public static VarHandle byte0$VH() {
        return CFUUIDBytes.byte0$VH;
    }
    public static byte byte0$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte0$VH.get(seg);
    }
    public static void byte0$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte0$VH.set(seg, x);
    }
    public static byte byte0$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte0$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte1"));
    public static VarHandle byte1$VH() {
        return CFUUIDBytes.byte1$VH;
    }
    public static byte byte1$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte1$VH.get(seg);
    }
    public static void byte1$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte1$VH.set(seg, x);
    }
    public static byte byte1$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte1$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte2"));
    public static VarHandle byte2$VH() {
        return CFUUIDBytes.byte2$VH;
    }
    public static byte byte2$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte2$VH.get(seg);
    }
    public static void byte2$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte2$VH.set(seg, x);
    }
    public static byte byte2$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte2$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte3"));
    public static VarHandle byte3$VH() {
        return CFUUIDBytes.byte3$VH;
    }
    public static byte byte3$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte3$VH.get(seg);
    }
    public static void byte3$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte3$VH.set(seg, x);
    }
    public static byte byte3$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte3$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte4"));
    public static VarHandle byte4$VH() {
        return CFUUIDBytes.byte4$VH;
    }
    public static byte byte4$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte4$VH.get(seg);
    }
    public static void byte4$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte4$VH.set(seg, x);
    }
    public static byte byte4$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte4$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte5"));
    public static VarHandle byte5$VH() {
        return CFUUIDBytes.byte5$VH;
    }
    public static byte byte5$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte5$VH.get(seg);
    }
    public static void byte5$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte5$VH.set(seg, x);
    }
    public static byte byte5$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte5$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte6"));
    public static VarHandle byte6$VH() {
        return CFUUIDBytes.byte6$VH;
    }
    public static byte byte6$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte6$VH.get(seg);
    }
    public static void byte6$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte6$VH.set(seg, x);
    }
    public static byte byte6$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte6$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte7"));
    public static VarHandle byte7$VH() {
        return CFUUIDBytes.byte7$VH;
    }
    public static byte byte7$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte7$VH.get(seg);
    }
    public static void byte7$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte7$VH.set(seg, x);
    }
    public static byte byte7$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte7$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte8"));
    public static VarHandle byte8$VH() {
        return CFUUIDBytes.byte8$VH;
    }
    public static byte byte8$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte8$VH.get(seg);
    }
    public static void byte8$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte8$VH.set(seg, x);
    }
    public static byte byte8$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte8$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte9$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte9"));
    public static VarHandle byte9$VH() {
        return CFUUIDBytes.byte9$VH;
    }
    public static byte byte9$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte9$VH.get(seg);
    }
    public static void byte9$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte9$VH.set(seg, x);
    }
    public static byte byte9$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte9$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte9$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte9$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte10$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte10"));
    public static VarHandle byte10$VH() {
        return CFUUIDBytes.byte10$VH;
    }
    public static byte byte10$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte10$VH.get(seg);
    }
    public static void byte10$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte10$VH.set(seg, x);
    }
    public static byte byte10$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte10$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte10$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte10$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte11$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte11"));
    public static VarHandle byte11$VH() {
        return CFUUIDBytes.byte11$VH;
    }
    public static byte byte11$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte11$VH.get(seg);
    }
    public static void byte11$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte11$VH.set(seg, x);
    }
    public static byte byte11$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte11$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte11$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte11$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte12$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte12"));
    public static VarHandle byte12$VH() {
        return CFUUIDBytes.byte12$VH;
    }
    public static byte byte12$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte12$VH.get(seg);
    }
    public static void byte12$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte12$VH.set(seg, x);
    }
    public static byte byte12$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte12$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte12$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte12$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte13$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte13"));
    public static VarHandle byte13$VH() {
        return CFUUIDBytes.byte13$VH;
    }
    public static byte byte13$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte13$VH.get(seg);
    }
    public static void byte13$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte13$VH.set(seg, x);
    }
    public static byte byte13$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte13$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte13$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte13$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte14$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte14"));
    public static VarHandle byte14$VH() {
        return CFUUIDBytes.byte14$VH;
    }
    public static byte byte14$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte14$VH.get(seg);
    }
    public static void byte14$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte14$VH.set(seg, x);
    }
    public static byte byte14$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte14$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte14$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte14$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte15$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("byte15"));
    public static VarHandle byte15$VH() {
        return CFUUIDBytes.byte15$VH;
    }
    public static byte byte15$get(MemorySegment seg) {
        return (byte)CFUUIDBytes.byte15$VH.get(seg);
    }
    public static void byte15$set( MemorySegment seg, byte x) {
        CFUUIDBytes.byte15$VH.set(seg, x);
    }
    public static byte byte15$get(MemorySegment seg, long index) {
        return (byte)CFUUIDBytes.byte15$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte15$set(MemorySegment seg, long index, byte x) {
        CFUUIDBytes.byte15$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


