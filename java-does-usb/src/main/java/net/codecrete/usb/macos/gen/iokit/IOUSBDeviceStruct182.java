// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct IOUSBDeviceStruct182 {
 *     void* _reserved;
 *     HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
 *     ULONG (*AddRef)(void*);
 *     ULONG (*Release)(void*);
 *     IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
 *     CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
 *     IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
 *     mach_port_t (*GetDeviceAsyncPort)(void*);
 *     IOReturn (*USBDeviceOpen)(void*);
 *     IOReturn (*USBDeviceClose)(void*);
 *     IOReturn (*GetDeviceClass)(void*,UInt8*);
 *     IOReturn (*GetDeviceSubClass)(void*,UInt8*);
 *     IOReturn (*GetDeviceProtocol)(void*,UInt8*);
 *     IOReturn (*GetDeviceVendor)(void*,UInt16*);
 *     IOReturn (*GetDeviceProduct)(void*,UInt16*);
 *     IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
 *     IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
 *     IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
 *     IOReturn (*GetDeviceSpeed)(void*,UInt8*);
 *     IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
 *     IOReturn (*GetLocationID)(void*,UInt32*);
 *     IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
 *     IOReturn (*GetConfiguration)(void*,UInt8*);
 *     IOReturn (*SetConfiguration)(void*,UInt8);
 *     IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
 *     IOReturn (*ResetDevice)(void*);
 *     IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
 *     IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
 *     IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
 *     IOReturn (*USBDeviceOpenSeize)(void*);
 *     IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
 *     IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
 *     IOReturn (*USBDeviceSuspend)(void*,Boolean);
 *     IOReturn (*USBDeviceAbortPipeZero)(void*);
 *     IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
 *     IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
 *     IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
 * };
 * }
 */
public class IOUSBDeviceStruct182 {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_reserved"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceOpen"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceClose"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSubClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProtocol"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceVendor"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProduct"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceReleaseNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceBusPowerAvailable"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSpeed"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNumberOfConfigurations"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLocationID"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfigurationDescriptorPtr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("SetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBusFrameNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("ResetDevice"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequest"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestAsync"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateInterfaceIterator"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceOpenSeize"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestTO"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestAsyncTO"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceSuspend"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceAbortPipeZero"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetManufacturerStringIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetProductStringIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetSerialNumberStringIndex")
    ).withName("IOUSBDeviceStruct182");
    public static MemoryLayout $LAYOUT() {
        return IOUSBDeviceStruct182.$struct$LAYOUT;
    }
    static final VarHandle _reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved"));
    public static VarHandle _reserved$VH() {
        return IOUSBDeviceStruct182._reserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static MemorySegment _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182._reserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static void _reserved$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182._reserved$VH.set(seg, x);
    }
    public static MemorySegment _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182._reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182._reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("byte0"),
            Constants$root.C_CHAR$LAYOUT.withName("byte1"),
            Constants$root.C_CHAR$LAYOUT.withName("byte2"),
            Constants$root.C_CHAR$LAYOUT.withName("byte3"),
            Constants$root.C_CHAR$LAYOUT.withName("byte4"),
            Constants$root.C_CHAR$LAYOUT.withName("byte5"),
            Constants$root.C_CHAR$LAYOUT.withName("byte6"),
            Constants$root.C_CHAR$LAYOUT.withName("byte7"),
            Constants$root.C_CHAR$LAYOUT.withName("byte8"),
            Constants$root.C_CHAR$LAYOUT.withName("byte9"),
            Constants$root.C_CHAR$LAYOUT.withName("byte10"),
            Constants$root.C_CHAR$LAYOUT.withName("byte11"),
            Constants$root.C_CHAR$LAYOUT.withName("byte12"),
            Constants$root.C_CHAR$LAYOUT.withName("byte13"),
            Constants$root.C_CHAR$LAYOUT.withName("byte14"),
            Constants$root.C_CHAR$LAYOUT.withName("byte15")
        ),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.QueryInterface$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOUSBDeviceStruct182.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct182.QueryInterface$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOUSBDeviceStruct182.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.AddRef$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(void*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOUSBDeviceStruct182.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.AddRef$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOUSBDeviceStruct182.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.Release$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(void*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOUSBDeviceStruct182.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.Release$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOUSBDeviceStruct182.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor CreateDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public interface CreateDeviceAsyncEventSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateDeviceAsyncEventSource fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$FUNC, scope);
        }
        static CreateDeviceAsyncEventSource ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncEventSource"));
    public static VarHandle CreateDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static MemorySegment CreateDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemorySegment CreateDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.CreateDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncEventSource CreateDeviceAsyncEventSource(MemorySegment segment, SegmentScope scope) {
        return CreateDeviceAsyncEventSource.ofAddress(CreateDeviceAsyncEventSource$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceAsyncEventSource$FUNC
    );
    /**
     * {@snippet :
 * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public interface GetDeviceAsyncEventSource {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetDeviceAsyncEventSource fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct182.GetDeviceAsyncEventSource$FUNC, scope);
        }
        static GetDeviceAsyncEventSource ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAsyncEventSource$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncEventSource"));
    public static VarHandle GetDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct182.GetDeviceAsyncEventSource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public static MemorySegment GetDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAsyncEventSource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetDeviceAsyncEventSource)(void*);
     * }
     */
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncEventSource GetDeviceAsyncEventSource(MemorySegment segment, SegmentScope scope) {
        return GetDeviceAsyncEventSource.ofAddress(GetDeviceAsyncEventSource$get(segment), scope);
    }
    static final FunctionDescriptor CreateDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.CreateDeviceAsyncPort$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public interface CreateDeviceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateDeviceAsyncPort fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncPort.class, fi, IOUSBDeviceStruct182.CreateDeviceAsyncPort$FUNC, scope);
        }
        static CreateDeviceAsyncPort ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.CreateDeviceAsyncPort$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncPort"));
    public static VarHandle CreateDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct182.CreateDeviceAsyncPort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static MemorySegment CreateDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateDeviceAsyncPort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateDeviceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.CreateDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemorySegment CreateDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.CreateDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncPort CreateDeviceAsyncPort(MemorySegment segment, SegmentScope scope) {
        return CreateDeviceAsyncPort.ofAddress(CreateDeviceAsyncPort$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceAsyncPort$FUNC
    );
    /**
     * {@snippet :
 * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public interface GetDeviceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetDeviceAsyncPort fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncPort.class, fi, IOUSBDeviceStruct182.GetDeviceAsyncPort$FUNC, scope);
        }
        static GetDeviceAsyncPort ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceAsyncPort$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncPort"));
    public static VarHandle GetDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct182.GetDeviceAsyncPort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public static MemorySegment GetDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAsyncPort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * mach_port_t (*GetDeviceAsyncPort)(void*);
     * }
     */
    public static void GetDeviceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncPort GetDeviceAsyncPort(MemorySegment segment, SegmentScope scope) {
        return GetDeviceAsyncPort.ofAddress(GetDeviceAsyncPort$get(segment), scope);
    }
    static final FunctionDescriptor USBDeviceOpen$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceOpen$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBDeviceOpen$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public interface USBDeviceOpen {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceOpen fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBDeviceOpen.class, fi, IOUSBDeviceStruct182.USBDeviceOpen$FUNC, scope);
        }
        static USBDeviceOpen ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBDeviceOpen$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceOpen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceOpen"));
    public static VarHandle USBDeviceOpen$VH() {
        return IOUSBDeviceStruct182.USBDeviceOpen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public static MemorySegment USBDeviceOpen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceOpen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpen)(void*);
     * }
     */
    public static void USBDeviceOpen$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceOpen$VH.set(seg, x);
    }
    public static MemorySegment USBDeviceOpen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceOpen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpen$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceOpen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpen USBDeviceOpen(MemorySegment segment, SegmentScope scope) {
        return USBDeviceOpen.ofAddress(USBDeviceOpen$get(segment), scope);
    }
    static final FunctionDescriptor USBDeviceClose$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceClose$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBDeviceClose$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public interface USBDeviceClose {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceClose fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBDeviceClose.class, fi, IOUSBDeviceStruct182.USBDeviceClose$FUNC, scope);
        }
        static USBDeviceClose ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBDeviceClose$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceClose"));
    public static VarHandle USBDeviceClose$VH() {
        return IOUSBDeviceStruct182.USBDeviceClose$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public static MemorySegment USBDeviceClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceClose$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceClose)(void*);
     * }
     */
    public static void USBDeviceClose$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceClose$VH.set(seg, x);
    }
    public static MemorySegment USBDeviceClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceClose$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceClose USBDeviceClose(MemorySegment segment, SegmentScope scope) {
        return USBDeviceClose.ofAddress(USBDeviceClose$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceClass$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public interface GetDeviceClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceClass.class, fi, IOUSBDeviceStruct182.GetDeviceClass$FUNC, scope);
        }
        static GetDeviceClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceClass$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceClass"));
    public static VarHandle GetDeviceClass$VH() {
        return IOUSBDeviceStruct182.GetDeviceClass$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceClass$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceClass)(void*,UInt8*);
     * }
     */
    public static void GetDeviceClass$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceClass$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceClass$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceClass GetDeviceClass(MemorySegment segment, SegmentScope scope) {
        return GetDeviceClass.ofAddress(GetDeviceClass$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceSubClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSubClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceSubClass$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public interface GetDeviceSubClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceSubClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceSubClass.class, fi, IOUSBDeviceStruct182.GetDeviceSubClass$FUNC, scope);
        }
        static GetDeviceSubClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceSubClass$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSubClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSubClass"));
    public static VarHandle GetDeviceSubClass$VH() {
        return IOUSBDeviceStruct182.GetDeviceSubClass$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceSubClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceSubClass$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSubClass)(void*,UInt8*);
     * }
     */
    public static void GetDeviceSubClass$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceSubClass$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceSubClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceSubClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSubClass$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceSubClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSubClass GetDeviceSubClass(MemorySegment segment, SegmentScope scope) {
        return GetDeviceSubClass.ofAddress(GetDeviceSubClass$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceProtocol$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProtocol$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceProtocol$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public interface GetDeviceProtocol {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceProtocol fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceProtocol.class, fi, IOUSBDeviceStruct182.GetDeviceProtocol$FUNC, scope);
        }
        static GetDeviceProtocol ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceProtocol$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProtocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProtocol"));
    public static VarHandle GetDeviceProtocol$VH() {
        return IOUSBDeviceStruct182.GetDeviceProtocol$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceProtocol$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceProtocol$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProtocol)(void*,UInt8*);
     * }
     */
    public static void GetDeviceProtocol$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceProtocol$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceProtocol$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceProtocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProtocol$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceProtocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProtocol GetDeviceProtocol(MemorySegment segment, SegmentScope scope) {
        return GetDeviceProtocol.ofAddress(GetDeviceProtocol$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceVendor$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceVendor$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceVendor$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public interface GetDeviceVendor {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceVendor fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceVendor.class, fi, IOUSBDeviceStruct182.GetDeviceVendor$FUNC, scope);
        }
        static GetDeviceVendor ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceVendor$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceVendor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceVendor"));
    public static VarHandle GetDeviceVendor$VH() {
        return IOUSBDeviceStruct182.GetDeviceVendor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceVendor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static void GetDeviceVendor$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceVendor$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceVendor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceVendor$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceVendor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceVendor GetDeviceVendor(MemorySegment segment, SegmentScope scope) {
        return GetDeviceVendor.ofAddress(GetDeviceVendor$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceProduct$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProduct$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceProduct$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public interface GetDeviceProduct {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceProduct fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceProduct.class, fi, IOUSBDeviceStruct182.GetDeviceProduct$FUNC, scope);
        }
        static GetDeviceProduct ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceProduct$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProduct$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProduct"));
    public static VarHandle GetDeviceProduct$VH() {
        return IOUSBDeviceStruct182.GetDeviceProduct$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceProduct$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static void GetDeviceProduct$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceProduct$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceProduct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProduct$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceProduct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProduct GetDeviceProduct(MemorySegment segment, SegmentScope scope) {
        return GetDeviceProduct.ofAddress(GetDeviceProduct$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceReleaseNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceReleaseNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceReleaseNumber$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public interface GetDeviceReleaseNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceReleaseNumber fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceReleaseNumber.class, fi, IOUSBDeviceStruct182.GetDeviceReleaseNumber$FUNC, scope);
        }
        static GetDeviceReleaseNumber ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceReleaseNumber$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceReleaseNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceReleaseNumber"));
    public static VarHandle GetDeviceReleaseNumber$VH() {
        return IOUSBDeviceStruct182.GetDeviceReleaseNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceReleaseNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceReleaseNumber$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceReleaseNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceReleaseNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceReleaseNumber GetDeviceReleaseNumber(MemorySegment segment, SegmentScope scope) {
        return GetDeviceReleaseNumber.ofAddress(GetDeviceReleaseNumber$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceAddress$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAddress$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceAddress$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public interface GetDeviceAddress {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceAddress fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceAddress.class, fi, IOUSBDeviceStruct182.GetDeviceAddress$FUNC, scope);
        }
        static GetDeviceAddress ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceAddress$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAddress"));
    public static VarHandle GetDeviceAddress$VH() {
        return IOUSBDeviceStruct182.GetDeviceAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public static MemorySegment GetDeviceAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceAddress)(void*,USBDeviceAddress*);
     * }
     */
    public static void GetDeviceAddress$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAddress$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAddress$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAddress GetDeviceAddress(MemorySegment segment, SegmentScope scope) {
        return GetDeviceAddress.ofAddress(GetDeviceAddress$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceBusPowerAvailable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceBusPowerAvailable$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public interface GetDeviceBusPowerAvailable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceBusPowerAvailable fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceBusPowerAvailable.class, fi, IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$FUNC, scope);
        }
        static GetDeviceBusPowerAvailable ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceBusPowerAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceBusPowerAvailable"));
    public static VarHandle GetDeviceBusPowerAvailable$VH() {
        return IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetDeviceBusPowerAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceBusPowerAvailable)(void*,UInt32*);
     * }
     */
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceBusPowerAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceBusPowerAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceBusPowerAvailable GetDeviceBusPowerAvailable(MemorySegment segment, SegmentScope scope) {
        return GetDeviceBusPowerAvailable.ofAddress(GetDeviceBusPowerAvailable$get(segment), scope);
    }
    static final FunctionDescriptor GetDeviceSpeed$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSpeed$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetDeviceSpeed$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public interface GetDeviceSpeed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceSpeed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetDeviceSpeed.class, fi, IOUSBDeviceStruct182.GetDeviceSpeed$FUNC, scope);
        }
        static GetDeviceSpeed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetDeviceSpeed$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSpeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSpeed"));
    public static VarHandle GetDeviceSpeed$VH() {
        return IOUSBDeviceStruct182.GetDeviceSpeed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetDeviceSpeed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceSpeed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceSpeed)(void*,UInt8*);
     * }
     */
    public static void GetDeviceSpeed$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceSpeed$VH.set(seg, x);
    }
    public static MemorySegment GetDeviceSpeed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetDeviceSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSpeed$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetDeviceSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSpeed GetDeviceSpeed(MemorySegment segment, SegmentScope scope) {
        return GetDeviceSpeed.ofAddress(GetDeviceSpeed$get(segment), scope);
    }
    static final FunctionDescriptor GetNumberOfConfigurations$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumberOfConfigurations$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetNumberOfConfigurations$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public interface GetNumberOfConfigurations {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetNumberOfConfigurations fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetNumberOfConfigurations.class, fi, IOUSBDeviceStruct182.GetNumberOfConfigurations$FUNC, scope);
        }
        static GetNumberOfConfigurations ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetNumberOfConfigurations$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNumberOfConfigurations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNumberOfConfigurations"));
    public static VarHandle GetNumberOfConfigurations$VH() {
        return IOUSBDeviceStruct182.GetNumberOfConfigurations$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetNumberOfConfigurations$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetNumberOfConfigurations$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetNumberOfConfigurations)(void*,UInt8*);
     * }
     */
    public static void GetNumberOfConfigurations$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetNumberOfConfigurations$VH.set(seg, x);
    }
    public static MemorySegment GetNumberOfConfigurations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetNumberOfConfigurations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumberOfConfigurations$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetNumberOfConfigurations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNumberOfConfigurations GetNumberOfConfigurations(MemorySegment segment, SegmentScope scope) {
        return GetNumberOfConfigurations.ofAddress(GetNumberOfConfigurations$get(segment), scope);
    }
    static final FunctionDescriptor GetLocationID$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLocationID$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetLocationID$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public interface GetLocationID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLocationID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetLocationID.class, fi, IOUSBDeviceStruct182.GetLocationID$FUNC, scope);
        }
        static GetLocationID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetLocationID$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLocationID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLocationID"));
    public static VarHandle GetLocationID$VH() {
        return IOUSBDeviceStruct182.GetLocationID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetLocationID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetLocationID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static void GetLocationID$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetLocationID$VH.set(seg, x);
    }
    public static MemorySegment GetLocationID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetLocationID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLocationID$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetLocationID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLocationID GetLocationID(MemorySegment segment, SegmentScope scope) {
        return GetLocationID.ofAddress(GetLocationID$get(segment), scope);
    }
    static final FunctionDescriptor GetConfigurationDescriptorPtr$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfigurationDescriptorPtr$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public interface GetConfigurationDescriptorPtr {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetConfigurationDescriptorPtr fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetConfigurationDescriptorPtr.class, fi, IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$FUNC, scope);
        }
        static GetConfigurationDescriptorPtr ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfigurationDescriptorPtr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfigurationDescriptorPtr"));
    public static VarHandle GetConfigurationDescriptorPtr$VH() {
        return IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public static MemorySegment GetConfigurationDescriptorPtr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationDescriptorPtr)(void*,UInt8,IOUSBConfigurationDescriptorPtr*);
     * }
     */
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$VH.set(seg, x);
    }
    public static MemorySegment GetConfigurationDescriptorPtr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetConfigurationDescriptorPtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfigurationDescriptorPtr GetConfigurationDescriptorPtr(MemorySegment segment, SegmentScope scope) {
        return GetConfigurationDescriptorPtr.ofAddress(GetConfigurationDescriptorPtr$get(segment), scope);
    }
    static final FunctionDescriptor GetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetConfiguration$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public interface GetConfiguration {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetConfiguration fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetConfiguration.class, fi, IOUSBDeviceStruct182.GetConfiguration$FUNC, scope);
        }
        static GetConfiguration ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetConfiguration$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfiguration"));
    public static VarHandle GetConfiguration$VH() {
        return IOUSBDeviceStruct182.GetConfiguration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetConfiguration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetConfiguration)(void*,UInt8*);
     * }
     */
    public static void GetConfiguration$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetConfiguration$VH.set(seg, x);
    }
    public static MemorySegment GetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfiguration$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfiguration GetConfiguration(MemorySegment segment, SegmentScope scope) {
        return GetConfiguration.ofAddress(GetConfiguration$get(segment), scope);
    }
    static final FunctionDescriptor SetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle SetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.SetConfiguration$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public interface SetConfiguration {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(SetConfiguration fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(SetConfiguration.class, fi, IOUSBDeviceStruct182.SetConfiguration$FUNC, scope);
        }
        static SetConfiguration ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.SetConfiguration$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetConfiguration"));
    public static VarHandle SetConfiguration$VH() {
        return IOUSBDeviceStruct182.SetConfiguration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public static MemorySegment SetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.SetConfiguration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*SetConfiguration)(void*,UInt8);
     * }
     */
    public static void SetConfiguration$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.SetConfiguration$VH.set(seg, x);
    }
    public static MemorySegment SetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.SetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetConfiguration$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.SetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetConfiguration SetConfiguration(MemorySegment segment, SegmentScope scope) {
        return SetConfiguration.ofAddress(SetConfiguration$get(segment), scope);
    }
    static final FunctionDescriptor GetBusFrameNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBusFrameNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.GetBusFrameNumber$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public interface GetBusFrameNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBusFrameNumber fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(GetBusFrameNumber.class, fi, IOUSBDeviceStruct182.GetBusFrameNumber$FUNC, scope);
        }
        static GetBusFrameNumber ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct182.GetBusFrameNumber$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBusFrameNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBusFrameNumber"));
    public static VarHandle GetBusFrameNumber$VH() {
        return IOUSBDeviceStruct182.GetBusFrameNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetBusFrameNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static void GetBusFrameNumber$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.GetBusFrameNumber$VH.set(seg, x);
    }
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.GetBusFrameNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumber$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.GetBusFrameNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumber GetBusFrameNumber(MemorySegment segment, SegmentScope scope) {
        return GetBusFrameNumber.ofAddress(GetBusFrameNumber$get(segment), scope);
    }
    static final FunctionDescriptor ResetDevice$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ResetDevice$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.ResetDevice$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*ResetDevice)(void*);
     * }
     */
    public interface ResetDevice {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ResetDevice fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ResetDevice.class, fi, IOUSBDeviceStruct182.ResetDevice$FUNC, scope);
        }
        static ResetDevice ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.ResetDevice$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ResetDevice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResetDevice"));
    public static VarHandle ResetDevice$VH() {
        return IOUSBDeviceStruct182.ResetDevice$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ResetDevice)(void*);
     * }
     */
    public static MemorySegment ResetDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.ResetDevice$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ResetDevice)(void*);
     * }
     */
    public static void ResetDevice$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.ResetDevice$VH.set(seg, x);
    }
    public static MemorySegment ResetDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.ResetDevice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetDevice$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.ResetDevice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResetDevice ResetDevice(MemorySegment segment, SegmentScope scope) {
        return ResetDevice.ofAddress(ResetDevice$get(segment), scope);
    }
    static final FunctionDescriptor DeviceRequest$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequest$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.DeviceRequest$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public interface DeviceRequest {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeviceRequest fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(DeviceRequest.class, fi, IOUSBDeviceStruct182.DeviceRequest$FUNC, scope);
        }
        static DeviceRequest ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.DeviceRequest$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequest"));
    public static VarHandle DeviceRequest$VH() {
        return IOUSBDeviceStruct182.DeviceRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public static MemorySegment DeviceRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequest)(void*,IOUSBDevRequest*);
     * }
     */
    public static void DeviceRequest$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequest$VH.set(seg, x);
    }
    public static MemorySegment DeviceRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequest$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequest DeviceRequest(MemorySegment segment, SegmentScope scope) {
        return DeviceRequest.ofAddress(DeviceRequest$get(segment), scope);
    }
    static final FunctionDescriptor DeviceRequestAsync$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestAsync$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.DeviceRequestAsync$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public interface DeviceRequestAsync {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DeviceRequestAsync fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(DeviceRequestAsync.class, fi, IOUSBDeviceStruct182.DeviceRequestAsync$FUNC, scope);
        }
        static DeviceRequestAsync ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct182.DeviceRequestAsync$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestAsync$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestAsync"));
    public static VarHandle DeviceRequestAsync$VH() {
        return IOUSBDeviceStruct182.DeviceRequestAsync$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment DeviceRequestAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestAsync$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsync)(void*,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static void DeviceRequestAsync$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestAsync$VH.set(seg, x);
    }
    public static MemorySegment DeviceRequestAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestAsync$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsync$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestAsync$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsync DeviceRequestAsync(MemorySegment segment, SegmentScope scope) {
        return DeviceRequestAsync.ofAddress(DeviceRequestAsync$get(segment), scope);
    }
    static final FunctionDescriptor CreateInterfaceIterator$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInterfaceIterator$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.CreateInterfaceIterator$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public interface CreateInterfaceIterator {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(CreateInterfaceIterator fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(CreateInterfaceIterator.class, fi, IOUSBDeviceStruct182.CreateInterfaceIterator$FUNC, scope);
        }
        static CreateInterfaceIterator ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct182.CreateInterfaceIterator$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInterfaceIterator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateInterfaceIterator"));
    public static VarHandle CreateInterfaceIterator$VH() {
        return IOUSBDeviceStruct182.CreateInterfaceIterator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public static MemorySegment CreateInterfaceIterator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateInterfaceIterator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceIterator)(void*,IOUSBFindInterfaceRequest*,io_iterator_t*);
     * }
     */
    public static void CreateInterfaceIterator$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.CreateInterfaceIterator$VH.set(seg, x);
    }
    public static MemorySegment CreateInterfaceIterator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.CreateInterfaceIterator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceIterator$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.CreateInterfaceIterator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceIterator CreateInterfaceIterator(MemorySegment segment, SegmentScope scope) {
        return CreateInterfaceIterator.ofAddress(CreateInterfaceIterator$get(segment), scope);
    }
    static final FunctionDescriptor USBDeviceOpenSeize$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceOpenSeize$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBDeviceOpenSeize$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public interface USBDeviceOpenSeize {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceOpenSeize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBDeviceOpenSeize.class, fi, IOUSBDeviceStruct182.USBDeviceOpenSeize$FUNC, scope);
        }
        static USBDeviceOpenSeize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBDeviceOpenSeize$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceOpenSeize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceOpenSeize"));
    public static VarHandle USBDeviceOpenSeize$VH() {
        return IOUSBDeviceStruct182.USBDeviceOpenSeize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public static MemorySegment USBDeviceOpenSeize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceOpenSeize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceOpenSeize)(void*);
     * }
     */
    public static void USBDeviceOpenSeize$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceOpenSeize$VH.set(seg, x);
    }
    public static MemorySegment USBDeviceOpenSeize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceOpenSeize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpenSeize$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceOpenSeize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpenSeize USBDeviceOpenSeize(MemorySegment segment, SegmentScope scope) {
        return USBDeviceOpenSeize.ofAddress(USBDeviceOpenSeize$get(segment), scope);
    }
    static final FunctionDescriptor DeviceRequestTO$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestTO$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.DeviceRequestTO$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public interface DeviceRequestTO {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeviceRequestTO fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(DeviceRequestTO.class, fi, IOUSBDeviceStruct182.DeviceRequestTO$FUNC, scope);
        }
        static DeviceRequestTO ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.DeviceRequestTO$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestTO$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestTO"));
    public static VarHandle DeviceRequestTO$VH() {
        return IOUSBDeviceStruct182.DeviceRequestTO$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public static MemorySegment DeviceRequestTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestTO$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestTO)(void*,IOUSBDevRequestTO*);
     * }
     */
    public static void DeviceRequestTO$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestTO$VH.set(seg, x);
    }
    public static MemorySegment DeviceRequestTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestTO$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestTO$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestTO$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestTO DeviceRequestTO(MemorySegment segment, SegmentScope scope) {
        return DeviceRequestTO.ofAddress(DeviceRequestTO$get(segment), scope);
    }
    static final FunctionDescriptor DeviceRequestAsyncTO$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestAsyncTO$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.DeviceRequestAsyncTO$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public interface DeviceRequestAsyncTO {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DeviceRequestAsyncTO fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(DeviceRequestAsyncTO.class, fi, IOUSBDeviceStruct182.DeviceRequestAsyncTO$FUNC, scope);
        }
        static DeviceRequestAsyncTO ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct182.DeviceRequestAsyncTO$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestAsyncTO$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestAsyncTO"));
    public static VarHandle DeviceRequestAsyncTO$VH() {
        return IOUSBDeviceStruct182.DeviceRequestAsyncTO$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment DeviceRequestAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestAsyncTO$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*DeviceRequestAsyncTO)(void*,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static void DeviceRequestAsyncTO$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestAsyncTO$VH.set(seg, x);
    }
    public static MemorySegment DeviceRequestAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.DeviceRequestAsyncTO$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsyncTO$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.DeviceRequestAsyncTO$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsyncTO DeviceRequestAsyncTO(MemorySegment segment, SegmentScope scope) {
        return DeviceRequestAsyncTO.ofAddress(DeviceRequestAsyncTO$get(segment), scope);
    }
    static final FunctionDescriptor USBDeviceSuspend$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle USBDeviceSuspend$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBDeviceSuspend$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public interface USBDeviceSuspend {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(USBDeviceSuspend fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBDeviceSuspend.class, fi, IOUSBDeviceStruct182.USBDeviceSuspend$FUNC, scope);
        }
        static USBDeviceSuspend ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBDeviceSuspend$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceSuspend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceSuspend"));
    public static VarHandle USBDeviceSuspend$VH() {
        return IOUSBDeviceStruct182.USBDeviceSuspend$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public static MemorySegment USBDeviceSuspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceSuspend$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceSuspend)(void*,Boolean);
     * }
     */
    public static void USBDeviceSuspend$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceSuspend$VH.set(seg, x);
    }
    public static MemorySegment USBDeviceSuspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceSuspend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceSuspend$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceSuspend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceSuspend USBDeviceSuspend(MemorySegment segment, SegmentScope scope) {
        return USBDeviceSuspend.ofAddress(USBDeviceSuspend$get(segment), scope);
    }
    static final FunctionDescriptor USBDeviceAbortPipeZero$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceAbortPipeZero$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBDeviceAbortPipeZero$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public interface USBDeviceAbortPipeZero {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBDeviceAbortPipeZero fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBDeviceAbortPipeZero.class, fi, IOUSBDeviceStruct182.USBDeviceAbortPipeZero$FUNC, scope);
        }
        static USBDeviceAbortPipeZero ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBDeviceAbortPipeZero$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceAbortPipeZero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceAbortPipeZero"));
    public static VarHandle USBDeviceAbortPipeZero$VH() {
        return IOUSBDeviceStruct182.USBDeviceAbortPipeZero$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public static MemorySegment USBDeviceAbortPipeZero$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceAbortPipeZero$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBDeviceAbortPipeZero)(void*);
     * }
     */
    public static void USBDeviceAbortPipeZero$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceAbortPipeZero$VH.set(seg, x);
    }
    public static MemorySegment USBDeviceAbortPipeZero$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBDeviceAbortPipeZero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceAbortPipeZero$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBDeviceAbortPipeZero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceAbortPipeZero USBDeviceAbortPipeZero(MemorySegment segment, SegmentScope scope) {
        return USBDeviceAbortPipeZero.ofAddress(USBDeviceAbortPipeZero$get(segment), scope);
    }
    static final FunctionDescriptor USBGetManufacturerStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetManufacturerStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBGetManufacturerStringIndex$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetManufacturerStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetManufacturerStringIndex fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBGetManufacturerStringIndex.class, fi, IOUSBDeviceStruct182.USBGetManufacturerStringIndex$FUNC, scope);
        }
        static USBGetManufacturerStringIndex ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBGetManufacturerStringIndex$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetManufacturerStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetManufacturerStringIndex"));
    public static VarHandle USBGetManufacturerStringIndex$VH() {
        return IOUSBDeviceStruct182.USBGetManufacturerStringIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetManufacturerStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetManufacturerStringIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetManufacturerStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetManufacturerStringIndex$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetManufacturerStringIndex$VH.set(seg, x);
    }
    public static MemorySegment USBGetManufacturerStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetManufacturerStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetManufacturerStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetManufacturerStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetManufacturerStringIndex USBGetManufacturerStringIndex(MemorySegment segment, SegmentScope scope) {
        return USBGetManufacturerStringIndex.ofAddress(USBGetManufacturerStringIndex$get(segment), scope);
    }
    static final FunctionDescriptor USBGetProductStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetProductStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBGetProductStringIndex$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetProductStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetProductStringIndex fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBGetProductStringIndex.class, fi, IOUSBDeviceStruct182.USBGetProductStringIndex$FUNC, scope);
        }
        static USBGetProductStringIndex ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBGetProductStringIndex$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetProductStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetProductStringIndex"));
    public static VarHandle USBGetProductStringIndex$VH() {
        return IOUSBDeviceStruct182.USBGetProductStringIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetProductStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetProductStringIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetProductStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetProductStringIndex$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetProductStringIndex$VH.set(seg, x);
    }
    public static MemorySegment USBGetProductStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetProductStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetProductStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetProductStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetProductStringIndex USBGetProductStringIndex(MemorySegment segment, SegmentScope scope) {
        return USBGetProductStringIndex.ofAddress(USBGetProductStringIndex$get(segment), scope);
    }
    static final FunctionDescriptor USBGetSerialNumberStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetSerialNumberStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$FUNC
    );
    /**
     * {@snippet :
 * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBGetSerialNumberStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBGetSerialNumberStringIndex fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(USBGetSerialNumberStringIndex.class, fi, IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$FUNC, scope);
        }
        static USBGetSerialNumberStringIndex ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetSerialNumberStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetSerialNumberStringIndex"));
    public static VarHandle USBGetSerialNumberStringIndex$VH() {
        return IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBGetSerialNumberStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBGetSerialNumberStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBGetSerialNumberStringIndex$set(MemorySegment seg, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$VH.set(seg, x);
    }
    public static MemorySegment USBGetSerialNumberStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetSerialNumberStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        IOUSBDeviceStruct182.USBGetSerialNumberStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetSerialNumberStringIndex USBGetSerialNumberStringIndex(MemorySegment segment, SegmentScope scope) {
        return USBGetSerialNumberStringIndex.ofAddress(USBGetSerialNumberStringIndex$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


