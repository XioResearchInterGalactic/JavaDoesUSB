// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
public class IOUSBDeviceStruct942 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_reserved"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceOpen"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceClose"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSubClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProtocol"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceVendor"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProduct"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceReleaseNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceBusPowerAvailable"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSpeed"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNumberOfConfigurations"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLocationID"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfigurationDescriptorPtr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("SetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBusFrameNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("ResetDevice"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequest"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestAsync"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateInterfaceIterator"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceOpenSeize"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestTO"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestAsyncTO"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceSuspend"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceAbortPipeZero"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetManufacturerStringIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetProductStringIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("USBGetSerialNumberStringIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceReEnumerate"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBusMicroFrameNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIOUSBLibVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBusFrameNumberWithTime"),
        Constants$root.C_POINTER$LAYOUT.withName("GetUSBDeviceInformation"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestExtraPower"),
        Constants$root.C_POINTER$LAYOUT.withName("ReturnExtraPower"),
        Constants$root.C_POINTER$LAYOUT.withName("GetExtraPowerAllocated"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBandwidthAvailableForDevice"),
        Constants$root.C_POINTER$LAYOUT.withName("SetConfigurationV2"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterForNotification"),
        Constants$root.C_POINTER$LAYOUT.withName("UnregisterNotification"),
        Constants$root.C_POINTER$LAYOUT.withName("AcknowledgeNotification"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncNotificationPort")
    ).withName("IOUSBDeviceStruct942");
    public static MemoryLayout $LAYOUT() {
        return IOUSBDeviceStruct942.$struct$LAYOUT;
    }
    static final VarHandle _reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved"));
    public static VarHandle _reserved$VH() {
        return IOUSBDeviceStruct942._reserved$VH;
    }
    public static MemoryAddress _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942._reserved$VH.get(seg);
    }
    public static void _reserved$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942._reserved$VH.set(seg, x);
    }
    public static MemoryAddress _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942._reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942._reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("byte0"),
            Constants$root.C_CHAR$LAYOUT.withName("byte1"),
            Constants$root.C_CHAR$LAYOUT.withName("byte2"),
            Constants$root.C_CHAR$LAYOUT.withName("byte3"),
            Constants$root.C_CHAR$LAYOUT.withName("byte4"),
            Constants$root.C_CHAR$LAYOUT.withName("byte5"),
            Constants$root.C_CHAR$LAYOUT.withName("byte6"),
            Constants$root.C_CHAR$LAYOUT.withName("byte7"),
            Constants$root.C_CHAR$LAYOUT.withName("byte8"),
            Constants$root.C_CHAR$LAYOUT.withName("byte9"),
            Constants$root.C_CHAR$LAYOUT.withName("byte10"),
            Constants$root.C_CHAR$LAYOUT.withName("byte11"),
            Constants$root.C_CHAR$LAYOUT.withName("byte12"),
            Constants$root.C_CHAR$LAYOUT.withName("byte13"),
            Constants$root.C_CHAR$LAYOUT.withName("byte14"),
            Constants$root.C_CHAR$LAYOUT.withName("byte15")
        ),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOUSBDeviceStruct942.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOUSBDeviceStruct942.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOUSBDeviceStruct942.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOUSBDeviceStruct942.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOUSBDeviceStruct942.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOUSBDeviceStruct942.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor CreateDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$FUNC
    );
    public interface CreateDeviceAsyncEventSource {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(CreateDeviceAsyncEventSource fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$FUNC, session);
        }
        static CreateDeviceAsyncEventSource ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncEventSource"));
    public static VarHandle CreateDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$VH;
    }
    public static MemoryAddress CreateDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$VH.get(seg);
    }
    public static void CreateDeviceAsyncEventSource$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemoryAddress CreateDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncEventSource CreateDeviceAsyncEventSource (MemorySegment segment, MemorySession session) {
        return CreateDeviceAsyncEventSource.ofAddress(CreateDeviceAsyncEventSource$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceAsyncEventSource$FUNC
    );
    public interface GetDeviceAsyncEventSource {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetDeviceAsyncEventSource fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct942.GetDeviceAsyncEventSource$FUNC, session);
        }
        static GetDeviceAsyncEventSource ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncEventSource$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncEventSource"));
    public static VarHandle GetDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct942.GetDeviceAsyncEventSource$VH;
    }
    public static MemoryAddress GetDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncEventSource$VH.get(seg);
    }
    public static void GetDeviceAsyncEventSource$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncEventSource GetDeviceAsyncEventSource (MemorySegment segment, MemorySession session) {
        return GetDeviceAsyncEventSource.ofAddress(GetDeviceAsyncEventSource$get(segment), session);
    }
    static final FunctionDescriptor CreateDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.CreateDeviceAsyncPort$FUNC
    );
    public interface CreateDeviceAsyncPort {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(CreateDeviceAsyncPort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncPort.class, fi, IOUSBDeviceStruct942.CreateDeviceAsyncPort$FUNC, session);
        }
        static CreateDeviceAsyncPort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.CreateDeviceAsyncPort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncPort"));
    public static VarHandle CreateDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct942.CreateDeviceAsyncPort$VH;
    }
    public static MemoryAddress CreateDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateDeviceAsyncPort$VH.get(seg);
    }
    public static void CreateDeviceAsyncPort$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemoryAddress CreateDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncPort CreateDeviceAsyncPort (MemorySegment segment, MemorySession session) {
        return CreateDeviceAsyncPort.ofAddress(CreateDeviceAsyncPort$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceAsyncPort$FUNC
    );
    public interface GetDeviceAsyncPort {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetDeviceAsyncPort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncPort.class, fi, IOUSBDeviceStruct942.GetDeviceAsyncPort$FUNC, session);
        }
        static GetDeviceAsyncPort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceAsyncPort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncPort"));
    public static VarHandle GetDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct942.GetDeviceAsyncPort$VH;
    }
    public static MemoryAddress GetDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncPort$VH.get(seg);
    }
    public static void GetDeviceAsyncPort$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncPort GetDeviceAsyncPort (MemorySegment segment, MemorySession session) {
        return GetDeviceAsyncPort.ofAddress(GetDeviceAsyncPort$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceOpen$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceOpen$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceOpen$FUNC
    );
    public interface USBDeviceOpen {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceOpen fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceOpen.class, fi, IOUSBDeviceStruct942.USBDeviceOpen$FUNC, session);
        }
        static USBDeviceOpen ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceOpen$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceOpen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceOpen"));
    public static VarHandle USBDeviceOpen$VH() {
        return IOUSBDeviceStruct942.USBDeviceOpen$VH;
    }
    public static MemoryAddress USBDeviceOpen$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceOpen$VH.get(seg);
    }
    public static void USBDeviceOpen$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceOpen$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceOpen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceOpen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpen$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceOpen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpen USBDeviceOpen (MemorySegment segment, MemorySession session) {
        return USBDeviceOpen.ofAddress(USBDeviceOpen$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceClose$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceClose$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceClose$FUNC
    );
    public interface USBDeviceClose {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceClose fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceClose.class, fi, IOUSBDeviceStruct942.USBDeviceClose$FUNC, session);
        }
        static USBDeviceClose ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceClose$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceClose"));
    public static VarHandle USBDeviceClose$VH() {
        return IOUSBDeviceStruct942.USBDeviceClose$VH;
    }
    public static MemoryAddress USBDeviceClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceClose$VH.get(seg);
    }
    public static void USBDeviceClose$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceClose$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceClose$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceClose USBDeviceClose (MemorySegment segment, MemorySession session) {
        return USBDeviceClose.ofAddress(USBDeviceClose$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceClass$FUNC
    );
    public interface GetDeviceClass {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceClass fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceClass.class, fi, IOUSBDeviceStruct942.GetDeviceClass$FUNC, session);
        }
        static GetDeviceClass ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceClass$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceClass"));
    public static VarHandle GetDeviceClass$VH() {
        return IOUSBDeviceStruct942.GetDeviceClass$VH;
    }
    public static MemoryAddress GetDeviceClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceClass$VH.get(seg);
    }
    public static void GetDeviceClass$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceClass$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceClass GetDeviceClass (MemorySegment segment, MemorySession session) {
        return GetDeviceClass.ofAddress(GetDeviceClass$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceSubClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSubClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceSubClass$FUNC
    );
    public interface GetDeviceSubClass {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceSubClass fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceSubClass.class, fi, IOUSBDeviceStruct942.GetDeviceSubClass$FUNC, session);
        }
        static GetDeviceSubClass ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceSubClass$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSubClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSubClass"));
    public static VarHandle GetDeviceSubClass$VH() {
        return IOUSBDeviceStruct942.GetDeviceSubClass$VH;
    }
    public static MemoryAddress GetDeviceSubClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceSubClass$VH.get(seg);
    }
    public static void GetDeviceSubClass$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceSubClass$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceSubClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceSubClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSubClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceSubClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSubClass GetDeviceSubClass (MemorySegment segment, MemorySession session) {
        return GetDeviceSubClass.ofAddress(GetDeviceSubClass$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceProtocol$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProtocol$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceProtocol$FUNC
    );
    public interface GetDeviceProtocol {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceProtocol fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceProtocol.class, fi, IOUSBDeviceStruct942.GetDeviceProtocol$FUNC, session);
        }
        static GetDeviceProtocol ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceProtocol$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProtocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProtocol"));
    public static VarHandle GetDeviceProtocol$VH() {
        return IOUSBDeviceStruct942.GetDeviceProtocol$VH;
    }
    public static MemoryAddress GetDeviceProtocol$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceProtocol$VH.get(seg);
    }
    public static void GetDeviceProtocol$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceProtocol$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceProtocol$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceProtocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProtocol$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceProtocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProtocol GetDeviceProtocol (MemorySegment segment, MemorySession session) {
        return GetDeviceProtocol.ofAddress(GetDeviceProtocol$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceVendor$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceVendor$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceVendor$FUNC
    );
    public interface GetDeviceVendor {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceVendor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceVendor.class, fi, IOUSBDeviceStruct942.GetDeviceVendor$FUNC, session);
        }
        static GetDeviceVendor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceVendor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceVendor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceVendor"));
    public static VarHandle GetDeviceVendor$VH() {
        return IOUSBDeviceStruct942.GetDeviceVendor$VH;
    }
    public static MemoryAddress GetDeviceVendor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceVendor$VH.get(seg);
    }
    public static void GetDeviceVendor$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceVendor$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceVendor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceVendor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceVendor$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceVendor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceVendor GetDeviceVendor (MemorySegment segment, MemorySession session) {
        return GetDeviceVendor.ofAddress(GetDeviceVendor$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceProduct$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProduct$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceProduct$FUNC
    );
    public interface GetDeviceProduct {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceProduct fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceProduct.class, fi, IOUSBDeviceStruct942.GetDeviceProduct$FUNC, session);
        }
        static GetDeviceProduct ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceProduct$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProduct$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProduct"));
    public static VarHandle GetDeviceProduct$VH() {
        return IOUSBDeviceStruct942.GetDeviceProduct$VH;
    }
    public static MemoryAddress GetDeviceProduct$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceProduct$VH.get(seg);
    }
    public static void GetDeviceProduct$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceProduct$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceProduct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceProduct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProduct$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceProduct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProduct GetDeviceProduct (MemorySegment segment, MemorySession session) {
        return GetDeviceProduct.ofAddress(GetDeviceProduct$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceReleaseNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceReleaseNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceReleaseNumber$FUNC
    );
    public interface GetDeviceReleaseNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceReleaseNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceReleaseNumber.class, fi, IOUSBDeviceStruct942.GetDeviceReleaseNumber$FUNC, session);
        }
        static GetDeviceReleaseNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceReleaseNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceReleaseNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceReleaseNumber"));
    public static VarHandle GetDeviceReleaseNumber$VH() {
        return IOUSBDeviceStruct942.GetDeviceReleaseNumber$VH;
    }
    public static MemoryAddress GetDeviceReleaseNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceReleaseNumber$VH.get(seg);
    }
    public static void GetDeviceReleaseNumber$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceReleaseNumber$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceReleaseNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceReleaseNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceReleaseNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceReleaseNumber GetDeviceReleaseNumber (MemorySegment segment, MemorySession session) {
        return GetDeviceReleaseNumber.ofAddress(GetDeviceReleaseNumber$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAddress$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAddress$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceAddress$FUNC
    );
    public interface GetDeviceAddress {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceAddress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAddress.class, fi, IOUSBDeviceStruct942.GetDeviceAddress$FUNC, session);
        }
        static GetDeviceAddress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceAddress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAddress"));
    public static VarHandle GetDeviceAddress$VH() {
        return IOUSBDeviceStruct942.GetDeviceAddress$VH;
    }
    public static MemoryAddress GetDeviceAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAddress$VH.get(seg);
    }
    public static void GetDeviceAddress$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAddress$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAddress GetDeviceAddress (MemorySegment segment, MemorySession session) {
        return GetDeviceAddress.ofAddress(GetDeviceAddress$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceBusPowerAvailable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceBusPowerAvailable$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$FUNC
    );
    public interface GetDeviceBusPowerAvailable {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceBusPowerAvailable fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceBusPowerAvailable.class, fi, IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$FUNC, session);
        }
        static GetDeviceBusPowerAvailable ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceBusPowerAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceBusPowerAvailable"));
    public static VarHandle GetDeviceBusPowerAvailable$VH() {
        return IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$VH;
    }
    public static MemoryAddress GetDeviceBusPowerAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$VH.get(seg);
    }
    public static void GetDeviceBusPowerAvailable$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceBusPowerAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceBusPowerAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceBusPowerAvailable GetDeviceBusPowerAvailable (MemorySegment segment, MemorySession session) {
        return GetDeviceBusPowerAvailable.ofAddress(GetDeviceBusPowerAvailable$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceSpeed$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSpeed$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceSpeed$FUNC
    );
    public interface GetDeviceSpeed {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceSpeed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceSpeed.class, fi, IOUSBDeviceStruct942.GetDeviceSpeed$FUNC, session);
        }
        static GetDeviceSpeed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetDeviceSpeed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSpeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSpeed"));
    public static VarHandle GetDeviceSpeed$VH() {
        return IOUSBDeviceStruct942.GetDeviceSpeed$VH;
    }
    public static MemoryAddress GetDeviceSpeed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceSpeed$VH.get(seg);
    }
    public static void GetDeviceSpeed$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceSpeed$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceSpeed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSpeed$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSpeed GetDeviceSpeed (MemorySegment segment, MemorySession session) {
        return GetDeviceSpeed.ofAddress(GetDeviceSpeed$get(segment), session);
    }
    static final FunctionDescriptor GetNumberOfConfigurations$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumberOfConfigurations$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetNumberOfConfigurations$FUNC
    );
    public interface GetNumberOfConfigurations {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetNumberOfConfigurations fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetNumberOfConfigurations.class, fi, IOUSBDeviceStruct942.GetNumberOfConfigurations$FUNC, session);
        }
        static GetNumberOfConfigurations ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetNumberOfConfigurations$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNumberOfConfigurations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNumberOfConfigurations"));
    public static VarHandle GetNumberOfConfigurations$VH() {
        return IOUSBDeviceStruct942.GetNumberOfConfigurations$VH;
    }
    public static MemoryAddress GetNumberOfConfigurations$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetNumberOfConfigurations$VH.get(seg);
    }
    public static void GetNumberOfConfigurations$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetNumberOfConfigurations$VH.set(seg, x);
    }
    public static MemoryAddress GetNumberOfConfigurations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetNumberOfConfigurations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumberOfConfigurations$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetNumberOfConfigurations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNumberOfConfigurations GetNumberOfConfigurations (MemorySegment segment, MemorySession session) {
        return GetNumberOfConfigurations.ofAddress(GetNumberOfConfigurations$get(segment), session);
    }
    static final FunctionDescriptor GetLocationID$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLocationID$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetLocationID$FUNC
    );
    public interface GetLocationID {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetLocationID fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetLocationID.class, fi, IOUSBDeviceStruct942.GetLocationID$FUNC, session);
        }
        static GetLocationID ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetLocationID$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLocationID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLocationID"));
    public static VarHandle GetLocationID$VH() {
        return IOUSBDeviceStruct942.GetLocationID$VH;
    }
    public static MemoryAddress GetLocationID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetLocationID$VH.get(seg);
    }
    public static void GetLocationID$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetLocationID$VH.set(seg, x);
    }
    public static MemoryAddress GetLocationID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetLocationID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLocationID$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetLocationID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLocationID GetLocationID (MemorySegment segment, MemorySession session) {
        return GetLocationID.ofAddress(GetLocationID$get(segment), session);
    }
    static final FunctionDescriptor GetConfigurationDescriptorPtr$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfigurationDescriptorPtr$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$FUNC
    );
    public interface GetConfigurationDescriptorPtr {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetConfigurationDescriptorPtr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetConfigurationDescriptorPtr.class, fi, IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$FUNC, session);
        }
        static GetConfigurationDescriptorPtr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfigurationDescriptorPtr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfigurationDescriptorPtr"));
    public static VarHandle GetConfigurationDescriptorPtr$VH() {
        return IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$VH;
    }
    public static MemoryAddress GetConfigurationDescriptorPtr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$VH.get(seg);
    }
    public static void GetConfigurationDescriptorPtr$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$VH.set(seg, x);
    }
    public static MemoryAddress GetConfigurationDescriptorPtr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetConfigurationDescriptorPtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfigurationDescriptorPtr GetConfigurationDescriptorPtr (MemorySegment segment, MemorySession session) {
        return GetConfigurationDescriptorPtr.ofAddress(GetConfigurationDescriptorPtr$get(segment), session);
    }
    static final FunctionDescriptor GetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetConfiguration$FUNC
    );
    public interface GetConfiguration {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetConfiguration fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetConfiguration.class, fi, IOUSBDeviceStruct942.GetConfiguration$FUNC, session);
        }
        static GetConfiguration ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetConfiguration$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfiguration"));
    public static VarHandle GetConfiguration$VH() {
        return IOUSBDeviceStruct942.GetConfiguration$VH;
    }
    public static MemoryAddress GetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetConfiguration$VH.get(seg);
    }
    public static void GetConfiguration$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetConfiguration$VH.set(seg, x);
    }
    public static MemoryAddress GetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfiguration$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfiguration GetConfiguration (MemorySegment segment, MemorySession session) {
        return GetConfiguration.ofAddress(GetConfiguration$get(segment), session);
    }
    static final FunctionDescriptor SetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle SetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.SetConfiguration$FUNC
    );
    public interface SetConfiguration {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1);
        static MemorySegment allocate(SetConfiguration fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetConfiguration.class, fi, IOUSBDeviceStruct942.SetConfiguration$FUNC, session);
        }
        static SetConfiguration ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.SetConfiguration$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetConfiguration"));
    public static VarHandle SetConfiguration$VH() {
        return IOUSBDeviceStruct942.SetConfiguration$VH;
    }
    public static MemoryAddress SetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.SetConfiguration$VH.get(seg);
    }
    public static void SetConfiguration$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.SetConfiguration$VH.set(seg, x);
    }
    public static MemoryAddress SetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.SetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetConfiguration$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.SetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetConfiguration SetConfiguration (MemorySegment segment, MemorySession session) {
        return SetConfiguration.ofAddress(SetConfiguration$get(segment), session);
    }
    static final FunctionDescriptor GetBusFrameNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBusFrameNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetBusFrameNumber$FUNC
    );
    public interface GetBusFrameNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetBusFrameNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBusFrameNumber.class, fi, IOUSBDeviceStruct942.GetBusFrameNumber$FUNC, session);
        }
        static GetBusFrameNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetBusFrameNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBusFrameNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBusFrameNumber"));
    public static VarHandle GetBusFrameNumber$VH() {
        return IOUSBDeviceStruct942.GetBusFrameNumber$VH;
    }
    public static MemoryAddress GetBusFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusFrameNumber$VH.get(seg);
    }
    public static void GetBusFrameNumber$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusFrameNumber$VH.set(seg, x);
    }
    public static MemoryAddress GetBusFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusFrameNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusFrameNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumber GetBusFrameNumber (MemorySegment segment, MemorySession session) {
        return GetBusFrameNumber.ofAddress(GetBusFrameNumber$get(segment), session);
    }
    static final FunctionDescriptor ResetDevice$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ResetDevice$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.ResetDevice$FUNC
    );
    public interface ResetDevice {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ResetDevice fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ResetDevice.class, fi, IOUSBDeviceStruct942.ResetDevice$FUNC, session);
        }
        static ResetDevice ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.ResetDevice$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ResetDevice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResetDevice"));
    public static VarHandle ResetDevice$VH() {
        return IOUSBDeviceStruct942.ResetDevice$VH;
    }
    public static MemoryAddress ResetDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.ResetDevice$VH.get(seg);
    }
    public static void ResetDevice$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.ResetDevice$VH.set(seg, x);
    }
    public static MemoryAddress ResetDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.ResetDevice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetDevice$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.ResetDevice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResetDevice ResetDevice (MemorySegment segment, MemorySession session) {
        return ResetDevice.ofAddress(ResetDevice$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequest$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequest$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.DeviceRequest$FUNC
    );
    public interface DeviceRequest {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(DeviceRequest fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequest.class, fi, IOUSBDeviceStruct942.DeviceRequest$FUNC, session);
        }
        static DeviceRequest ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.DeviceRequest$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequest"));
    public static VarHandle DeviceRequest$VH() {
        return IOUSBDeviceStruct942.DeviceRequest$VH;
    }
    public static MemoryAddress DeviceRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequest$VH.get(seg);
    }
    public static void DeviceRequest$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequest$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequest$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequest DeviceRequest (MemorySegment segment, MemorySession session) {
        return DeviceRequest.ofAddress(DeviceRequest$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequestAsync$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestAsync$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.DeviceRequestAsync$FUNC
    );
    public interface DeviceRequestAsync {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(DeviceRequestAsync fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequestAsync.class, fi, IOUSBDeviceStruct942.DeviceRequestAsync$FUNC, session);
        }
        static DeviceRequestAsync ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct942.DeviceRequestAsync$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestAsync$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestAsync"));
    public static VarHandle DeviceRequestAsync$VH() {
        return IOUSBDeviceStruct942.DeviceRequestAsync$VH;
    }
    public static MemoryAddress DeviceRequestAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestAsync$VH.get(seg);
    }
    public static void DeviceRequestAsync$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestAsync$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequestAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestAsync$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsync$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestAsync$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsync DeviceRequestAsync (MemorySegment segment, MemorySession session) {
        return DeviceRequestAsync.ofAddress(DeviceRequestAsync$get(segment), session);
    }
    static final FunctionDescriptor CreateInterfaceIterator$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInterfaceIterator$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.CreateInterfaceIterator$FUNC
    );
    public interface CreateInterfaceIterator {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(CreateInterfaceIterator fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateInterfaceIterator.class, fi, IOUSBDeviceStruct942.CreateInterfaceIterator$FUNC, session);
        }
        static CreateInterfaceIterator ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.CreateInterfaceIterator$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInterfaceIterator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateInterfaceIterator"));
    public static VarHandle CreateInterfaceIterator$VH() {
        return IOUSBDeviceStruct942.CreateInterfaceIterator$VH;
    }
    public static MemoryAddress CreateInterfaceIterator$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateInterfaceIterator$VH.get(seg);
    }
    public static void CreateInterfaceIterator$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateInterfaceIterator$VH.set(seg, x);
    }
    public static MemoryAddress CreateInterfaceIterator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.CreateInterfaceIterator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceIterator$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.CreateInterfaceIterator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceIterator CreateInterfaceIterator (MemorySegment segment, MemorySession session) {
        return CreateInterfaceIterator.ofAddress(CreateInterfaceIterator$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceOpenSeize$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceOpenSeize$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceOpenSeize$FUNC
    );
    public interface USBDeviceOpenSeize {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceOpenSeize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceOpenSeize.class, fi, IOUSBDeviceStruct942.USBDeviceOpenSeize$FUNC, session);
        }
        static USBDeviceOpenSeize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceOpenSeize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceOpenSeize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceOpenSeize"));
    public static VarHandle USBDeviceOpenSeize$VH() {
        return IOUSBDeviceStruct942.USBDeviceOpenSeize$VH;
    }
    public static MemoryAddress USBDeviceOpenSeize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceOpenSeize$VH.get(seg);
    }
    public static void USBDeviceOpenSeize$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceOpenSeize$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceOpenSeize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceOpenSeize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpenSeize$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceOpenSeize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpenSeize USBDeviceOpenSeize (MemorySegment segment, MemorySession session) {
        return USBDeviceOpenSeize.ofAddress(USBDeviceOpenSeize$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequestTO$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestTO$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.DeviceRequestTO$FUNC
    );
    public interface DeviceRequestTO {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(DeviceRequestTO fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequestTO.class, fi, IOUSBDeviceStruct942.DeviceRequestTO$FUNC, session);
        }
        static DeviceRequestTO ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.DeviceRequestTO$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestTO$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestTO"));
    public static VarHandle DeviceRequestTO$VH() {
        return IOUSBDeviceStruct942.DeviceRequestTO$VH;
    }
    public static MemoryAddress DeviceRequestTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestTO$VH.get(seg);
    }
    public static void DeviceRequestTO$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestTO$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequestTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestTO$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestTO$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestTO$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestTO DeviceRequestTO (MemorySegment segment, MemorySession session) {
        return DeviceRequestTO.ofAddress(DeviceRequestTO$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequestAsyncTO$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestAsyncTO$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.DeviceRequestAsyncTO$FUNC
    );
    public interface DeviceRequestAsyncTO {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(DeviceRequestAsyncTO fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequestAsyncTO.class, fi, IOUSBDeviceStruct942.DeviceRequestAsyncTO$FUNC, session);
        }
        static DeviceRequestAsyncTO ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct942.DeviceRequestAsyncTO$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestAsyncTO$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestAsyncTO"));
    public static VarHandle DeviceRequestAsyncTO$VH() {
        return IOUSBDeviceStruct942.DeviceRequestAsyncTO$VH;
    }
    public static MemoryAddress DeviceRequestAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestAsyncTO$VH.get(seg);
    }
    public static void DeviceRequestAsyncTO$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestAsyncTO$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequestAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.DeviceRequestAsyncTO$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsyncTO$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.DeviceRequestAsyncTO$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsyncTO DeviceRequestAsyncTO (MemorySegment segment, MemorySession session) {
        return DeviceRequestAsyncTO.ofAddress(DeviceRequestAsyncTO$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceSuspend$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle USBDeviceSuspend$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceSuspend$FUNC
    );
    public interface USBDeviceSuspend {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1);
        static MemorySegment allocate(USBDeviceSuspend fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceSuspend.class, fi, IOUSBDeviceStruct942.USBDeviceSuspend$FUNC, session);
        }
        static USBDeviceSuspend ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceSuspend$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceSuspend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceSuspend"));
    public static VarHandle USBDeviceSuspend$VH() {
        return IOUSBDeviceStruct942.USBDeviceSuspend$VH;
    }
    public static MemoryAddress USBDeviceSuspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceSuspend$VH.get(seg);
    }
    public static void USBDeviceSuspend$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceSuspend$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceSuspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceSuspend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceSuspend$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceSuspend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceSuspend USBDeviceSuspend (MemorySegment segment, MemorySession session) {
        return USBDeviceSuspend.ofAddress(USBDeviceSuspend$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceAbortPipeZero$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceAbortPipeZero$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceAbortPipeZero$FUNC
    );
    public interface USBDeviceAbortPipeZero {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceAbortPipeZero fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceAbortPipeZero.class, fi, IOUSBDeviceStruct942.USBDeviceAbortPipeZero$FUNC, session);
        }
        static USBDeviceAbortPipeZero ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceAbortPipeZero$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceAbortPipeZero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceAbortPipeZero"));
    public static VarHandle USBDeviceAbortPipeZero$VH() {
        return IOUSBDeviceStruct942.USBDeviceAbortPipeZero$VH;
    }
    public static MemoryAddress USBDeviceAbortPipeZero$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceAbortPipeZero$VH.get(seg);
    }
    public static void USBDeviceAbortPipeZero$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceAbortPipeZero$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceAbortPipeZero$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceAbortPipeZero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceAbortPipeZero$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceAbortPipeZero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceAbortPipeZero USBDeviceAbortPipeZero (MemorySegment segment, MemorySession session) {
        return USBDeviceAbortPipeZero.ofAddress(USBDeviceAbortPipeZero$get(segment), session);
    }
    static final FunctionDescriptor USBGetManufacturerStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetManufacturerStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBGetManufacturerStringIndex$FUNC
    );
    public interface USBGetManufacturerStringIndex {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(USBGetManufacturerStringIndex fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBGetManufacturerStringIndex.class, fi, IOUSBDeviceStruct942.USBGetManufacturerStringIndex$FUNC, session);
        }
        static USBGetManufacturerStringIndex ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBGetManufacturerStringIndex$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetManufacturerStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetManufacturerStringIndex"));
    public static VarHandle USBGetManufacturerStringIndex$VH() {
        return IOUSBDeviceStruct942.USBGetManufacturerStringIndex$VH;
    }
    public static MemoryAddress USBGetManufacturerStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetManufacturerStringIndex$VH.get(seg);
    }
    public static void USBGetManufacturerStringIndex$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetManufacturerStringIndex$VH.set(seg, x);
    }
    public static MemoryAddress USBGetManufacturerStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetManufacturerStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetManufacturerStringIndex$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetManufacturerStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetManufacturerStringIndex USBGetManufacturerStringIndex (MemorySegment segment, MemorySession session) {
        return USBGetManufacturerStringIndex.ofAddress(USBGetManufacturerStringIndex$get(segment), session);
    }
    static final FunctionDescriptor USBGetProductStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetProductStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBGetProductStringIndex$FUNC
    );
    public interface USBGetProductStringIndex {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(USBGetProductStringIndex fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBGetProductStringIndex.class, fi, IOUSBDeviceStruct942.USBGetProductStringIndex$FUNC, session);
        }
        static USBGetProductStringIndex ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBGetProductStringIndex$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetProductStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetProductStringIndex"));
    public static VarHandle USBGetProductStringIndex$VH() {
        return IOUSBDeviceStruct942.USBGetProductStringIndex$VH;
    }
    public static MemoryAddress USBGetProductStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetProductStringIndex$VH.get(seg);
    }
    public static void USBGetProductStringIndex$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetProductStringIndex$VH.set(seg, x);
    }
    public static MemoryAddress USBGetProductStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetProductStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetProductStringIndex$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetProductStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetProductStringIndex USBGetProductStringIndex (MemorySegment segment, MemorySession session) {
        return USBGetProductStringIndex.ofAddress(USBGetProductStringIndex$get(segment), session);
    }
    static final FunctionDescriptor USBGetSerialNumberStringIndex$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBGetSerialNumberStringIndex$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$FUNC
    );
    public interface USBGetSerialNumberStringIndex {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(USBGetSerialNumberStringIndex fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBGetSerialNumberStringIndex.class, fi, IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$FUNC, session);
        }
        static USBGetSerialNumberStringIndex ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBGetSerialNumberStringIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBGetSerialNumberStringIndex"));
    public static VarHandle USBGetSerialNumberStringIndex$VH() {
        return IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$VH;
    }
    public static MemoryAddress USBGetSerialNumberStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$VH.get(seg);
    }
    public static void USBGetSerialNumberStringIndex$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$VH.set(seg, x);
    }
    public static MemoryAddress USBGetSerialNumberStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBGetSerialNumberStringIndex$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBGetSerialNumberStringIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBGetSerialNumberStringIndex USBGetSerialNumberStringIndex (MemorySegment segment, MemorySession session) {
        return USBGetSerialNumberStringIndex.ofAddress(USBGetSerialNumberStringIndex$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceReEnumerate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle USBDeviceReEnumerate$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.USBDeviceReEnumerate$FUNC
    );
    public interface USBDeviceReEnumerate {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(USBDeviceReEnumerate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceReEnumerate.class, fi, IOUSBDeviceStruct942.USBDeviceReEnumerate$FUNC, session);
        }
        static USBDeviceReEnumerate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.USBDeviceReEnumerate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceReEnumerate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceReEnumerate"));
    public static VarHandle USBDeviceReEnumerate$VH() {
        return IOUSBDeviceStruct942.USBDeviceReEnumerate$VH;
    }
    public static MemoryAddress USBDeviceReEnumerate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceReEnumerate$VH.get(seg);
    }
    public static void USBDeviceReEnumerate$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceReEnumerate$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceReEnumerate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.USBDeviceReEnumerate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceReEnumerate$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.USBDeviceReEnumerate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceReEnumerate USBDeviceReEnumerate (MemorySegment segment, MemorySession session) {
        return USBDeviceReEnumerate.ofAddress(USBDeviceReEnumerate$get(segment), session);
    }
    static final FunctionDescriptor GetBusMicroFrameNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBusMicroFrameNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetBusMicroFrameNumber$FUNC
    );
    public interface GetBusMicroFrameNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetBusMicroFrameNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBusMicroFrameNumber.class, fi, IOUSBDeviceStruct942.GetBusMicroFrameNumber$FUNC, session);
        }
        static GetBusMicroFrameNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetBusMicroFrameNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBusMicroFrameNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBusMicroFrameNumber"));
    public static VarHandle GetBusMicroFrameNumber$VH() {
        return IOUSBDeviceStruct942.GetBusMicroFrameNumber$VH;
    }
    public static MemoryAddress GetBusMicroFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusMicroFrameNumber$VH.get(seg);
    }
    public static void GetBusMicroFrameNumber$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusMicroFrameNumber$VH.set(seg, x);
    }
    public static MemoryAddress GetBusMicroFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusMicroFrameNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusMicroFrameNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusMicroFrameNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusMicroFrameNumber GetBusMicroFrameNumber (MemorySegment segment, MemorySession session) {
        return GetBusMicroFrameNumber.ofAddress(GetBusMicroFrameNumber$get(segment), session);
    }
    static final FunctionDescriptor GetIOUSBLibVersion$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIOUSBLibVersion$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetIOUSBLibVersion$FUNC
    );
    public interface GetIOUSBLibVersion {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetIOUSBLibVersion fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetIOUSBLibVersion.class, fi, IOUSBDeviceStruct942.GetIOUSBLibVersion$FUNC, session);
        }
        static GetIOUSBLibVersion ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetIOUSBLibVersion$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIOUSBLibVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIOUSBLibVersion"));
    public static VarHandle GetIOUSBLibVersion$VH() {
        return IOUSBDeviceStruct942.GetIOUSBLibVersion$VH;
    }
    public static MemoryAddress GetIOUSBLibVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetIOUSBLibVersion$VH.get(seg);
    }
    public static void GetIOUSBLibVersion$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetIOUSBLibVersion$VH.set(seg, x);
    }
    public static MemoryAddress GetIOUSBLibVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetIOUSBLibVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIOUSBLibVersion$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetIOUSBLibVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIOUSBLibVersion GetIOUSBLibVersion (MemorySegment segment, MemorySession session) {
        return GetIOUSBLibVersion.ofAddress(GetIOUSBLibVersion$get(segment), session);
    }
    static final FunctionDescriptor GetBusFrameNumberWithTime$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBusFrameNumberWithTime$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetBusFrameNumberWithTime$FUNC
    );
    public interface GetBusFrameNumberWithTime {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetBusFrameNumberWithTime fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBusFrameNumberWithTime.class, fi, IOUSBDeviceStruct942.GetBusFrameNumberWithTime$FUNC, session);
        }
        static GetBusFrameNumberWithTime ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetBusFrameNumberWithTime$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBusFrameNumberWithTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBusFrameNumberWithTime"));
    public static VarHandle GetBusFrameNumberWithTime$VH() {
        return IOUSBDeviceStruct942.GetBusFrameNumberWithTime$VH;
    }
    public static MemoryAddress GetBusFrameNumberWithTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusFrameNumberWithTime$VH.get(seg);
    }
    public static void GetBusFrameNumberWithTime$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusFrameNumberWithTime$VH.set(seg, x);
    }
    public static MemoryAddress GetBusFrameNumberWithTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBusFrameNumberWithTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumberWithTime$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBusFrameNumberWithTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumberWithTime GetBusFrameNumberWithTime (MemorySegment segment, MemorySession session) {
        return GetBusFrameNumberWithTime.ofAddress(GetBusFrameNumberWithTime$get(segment), session);
    }
    static final FunctionDescriptor GetUSBDeviceInformation$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUSBDeviceInformation$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetUSBDeviceInformation$FUNC
    );
    public interface GetUSBDeviceInformation {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetUSBDeviceInformation fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetUSBDeviceInformation.class, fi, IOUSBDeviceStruct942.GetUSBDeviceInformation$FUNC, session);
        }
        static GetUSBDeviceInformation ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetUSBDeviceInformation$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUSBDeviceInformation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetUSBDeviceInformation"));
    public static VarHandle GetUSBDeviceInformation$VH() {
        return IOUSBDeviceStruct942.GetUSBDeviceInformation$VH;
    }
    public static MemoryAddress GetUSBDeviceInformation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetUSBDeviceInformation$VH.get(seg);
    }
    public static void GetUSBDeviceInformation$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetUSBDeviceInformation$VH.set(seg, x);
    }
    public static MemoryAddress GetUSBDeviceInformation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetUSBDeviceInformation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUSBDeviceInformation$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetUSBDeviceInformation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUSBDeviceInformation GetUSBDeviceInformation (MemorySegment segment, MemorySession session) {
        return GetUSBDeviceInformation.ofAddress(GetUSBDeviceInformation$get(segment), session);
    }
    static final FunctionDescriptor RequestExtraPower$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestExtraPower$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.RequestExtraPower$FUNC
    );
    public interface RequestExtraPower {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(RequestExtraPower fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RequestExtraPower.class, fi, IOUSBDeviceStruct942.RequestExtraPower$FUNC, session);
        }
        static RequestExtraPower ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct942.RequestExtraPower$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestExtraPower$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestExtraPower"));
    public static VarHandle RequestExtraPower$VH() {
        return IOUSBDeviceStruct942.RequestExtraPower$VH;
    }
    public static MemoryAddress RequestExtraPower$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.RequestExtraPower$VH.get(seg);
    }
    public static void RequestExtraPower$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.RequestExtraPower$VH.set(seg, x);
    }
    public static MemoryAddress RequestExtraPower$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.RequestExtraPower$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestExtraPower$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.RequestExtraPower$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestExtraPower RequestExtraPower (MemorySegment segment, MemorySession session) {
        return RequestExtraPower.ofAddress(RequestExtraPower$get(segment), session);
    }
    static final FunctionDescriptor ReturnExtraPower$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ReturnExtraPower$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.ReturnExtraPower$FUNC
    );
    public interface ReturnExtraPower {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(ReturnExtraPower fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ReturnExtraPower.class, fi, IOUSBDeviceStruct942.ReturnExtraPower$FUNC, session);
        }
        static ReturnExtraPower ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.ReturnExtraPower$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReturnExtraPower$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReturnExtraPower"));
    public static VarHandle ReturnExtraPower$VH() {
        return IOUSBDeviceStruct942.ReturnExtraPower$VH;
    }
    public static MemoryAddress ReturnExtraPower$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.ReturnExtraPower$VH.get(seg);
    }
    public static void ReturnExtraPower$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.ReturnExtraPower$VH.set(seg, x);
    }
    public static MemoryAddress ReturnExtraPower$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.ReturnExtraPower$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReturnExtraPower$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.ReturnExtraPower$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReturnExtraPower ReturnExtraPower (MemorySegment segment, MemorySession session) {
        return ReturnExtraPower.ofAddress(ReturnExtraPower$get(segment), session);
    }
    static final FunctionDescriptor GetExtraPowerAllocated$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetExtraPowerAllocated$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetExtraPowerAllocated$FUNC
    );
    public interface GetExtraPowerAllocated {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetExtraPowerAllocated fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetExtraPowerAllocated.class, fi, IOUSBDeviceStruct942.GetExtraPowerAllocated$FUNC, session);
        }
        static GetExtraPowerAllocated ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetExtraPowerAllocated$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetExtraPowerAllocated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetExtraPowerAllocated"));
    public static VarHandle GetExtraPowerAllocated$VH() {
        return IOUSBDeviceStruct942.GetExtraPowerAllocated$VH;
    }
    public static MemoryAddress GetExtraPowerAllocated$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetExtraPowerAllocated$VH.get(seg);
    }
    public static void GetExtraPowerAllocated$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetExtraPowerAllocated$VH.set(seg, x);
    }
    public static MemoryAddress GetExtraPowerAllocated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetExtraPowerAllocated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtraPowerAllocated$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetExtraPowerAllocated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtraPowerAllocated GetExtraPowerAllocated (MemorySegment segment, MemorySession session) {
        return GetExtraPowerAllocated.ofAddress(GetExtraPowerAllocated$get(segment), session);
    }
    static final FunctionDescriptor GetBandwidthAvailableForDevice$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBandwidthAvailableForDevice$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$FUNC
    );
    public interface GetBandwidthAvailableForDevice {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetBandwidthAvailableForDevice fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBandwidthAvailableForDevice.class, fi, IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$FUNC, session);
        }
        static GetBandwidthAvailableForDevice ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBandwidthAvailableForDevice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBandwidthAvailableForDevice"));
    public static VarHandle GetBandwidthAvailableForDevice$VH() {
        return IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$VH;
    }
    public static MemoryAddress GetBandwidthAvailableForDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$VH.get(seg);
    }
    public static void GetBandwidthAvailableForDevice$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$VH.set(seg, x);
    }
    public static MemoryAddress GetBandwidthAvailableForDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBandwidthAvailableForDevice$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetBandwidthAvailableForDevice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBandwidthAvailableForDevice GetBandwidthAvailableForDevice (MemorySegment segment, MemorySession session) {
        return GetBandwidthAvailableForDevice.ofAddress(GetBandwidthAvailableForDevice$get(segment), session);
    }
    static final FunctionDescriptor SetConfigurationV2$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_BOOL$LAYOUT,
        Constants$root.C_BOOL$LAYOUT
    );
    static final MethodHandle SetConfigurationV2$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.SetConfigurationV2$FUNC
    );
    public interface SetConfigurationV2 {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1, boolean _x2, boolean _x3);
        static MemorySegment allocate(SetConfigurationV2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetConfigurationV2.class, fi, IOUSBDeviceStruct942.SetConfigurationV2$FUNC, session);
        }
        static SetConfigurationV2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1, boolean __x2, boolean __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct942.SetConfigurationV2$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetConfigurationV2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetConfigurationV2"));
    public static VarHandle SetConfigurationV2$VH() {
        return IOUSBDeviceStruct942.SetConfigurationV2$VH;
    }
    public static MemoryAddress SetConfigurationV2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.SetConfigurationV2$VH.get(seg);
    }
    public static void SetConfigurationV2$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.SetConfigurationV2$VH.set(seg, x);
    }
    public static MemoryAddress SetConfigurationV2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.SetConfigurationV2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetConfigurationV2$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.SetConfigurationV2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetConfigurationV2 SetConfigurationV2 (MemorySegment segment, MemorySession session) {
        return SetConfigurationV2.ofAddress(SetConfigurationV2$get(segment), session);
    }
    static final FunctionDescriptor RegisterForNotification$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterForNotification$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.RegisterForNotification$FUNC
    );
    public interface RegisterForNotification {

        int apply(java.lang.foreign.MemoryAddress _x0, long _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(RegisterForNotification fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RegisterForNotification.class, fi, IOUSBDeviceStruct942.RegisterForNotification$FUNC, session);
        }
        static RegisterForNotification ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IOUSBDeviceStruct942.RegisterForNotification$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterForNotification$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterForNotification"));
    public static VarHandle RegisterForNotification$VH() {
        return IOUSBDeviceStruct942.RegisterForNotification$VH;
    }
    public static MemoryAddress RegisterForNotification$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.RegisterForNotification$VH.get(seg);
    }
    public static void RegisterForNotification$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.RegisterForNotification$VH.set(seg, x);
    }
    public static MemoryAddress RegisterForNotification$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.RegisterForNotification$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterForNotification$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.RegisterForNotification$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterForNotification RegisterForNotification (MemorySegment segment, MemorySession session) {
        return RegisterForNotification.ofAddress(RegisterForNotification$get(segment), session);
    }
    static final FunctionDescriptor UnregisterNotification$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle UnregisterNotification$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.UnregisterNotification$FUNC
    );
    public interface UnregisterNotification {

        int apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(UnregisterNotification fi, MemorySession session) {
            return RuntimeHelper.upcallStub(UnregisterNotification.class, fi, IOUSBDeviceStruct942.UnregisterNotification$FUNC, session);
        }
        static UnregisterNotification ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.UnregisterNotification$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnregisterNotification$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnregisterNotification"));
    public static VarHandle UnregisterNotification$VH() {
        return IOUSBDeviceStruct942.UnregisterNotification$VH;
    }
    public static MemoryAddress UnregisterNotification$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.UnregisterNotification$VH.get(seg);
    }
    public static void UnregisterNotification$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.UnregisterNotification$VH.set(seg, x);
    }
    public static MemoryAddress UnregisterNotification$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.UnregisterNotification$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterNotification$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.UnregisterNotification$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterNotification UnregisterNotification (MemorySegment segment, MemorySession session) {
        return UnregisterNotification.ofAddress(UnregisterNotification$get(segment), session);
    }
    static final FunctionDescriptor AcknowledgeNotification$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle AcknowledgeNotification$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.AcknowledgeNotification$FUNC
    );
    public interface AcknowledgeNotification {

        int apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(AcknowledgeNotification fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AcknowledgeNotification.class, fi, IOUSBDeviceStruct942.AcknowledgeNotification$FUNC, session);
        }
        static AcknowledgeNotification ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct942.AcknowledgeNotification$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AcknowledgeNotification$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AcknowledgeNotification"));
    public static VarHandle AcknowledgeNotification$VH() {
        return IOUSBDeviceStruct942.AcknowledgeNotification$VH;
    }
    public static MemoryAddress AcknowledgeNotification$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.AcknowledgeNotification$VH.get(seg);
    }
    public static void AcknowledgeNotification$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.AcknowledgeNotification$VH.set(seg, x);
    }
    public static MemoryAddress AcknowledgeNotification$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.AcknowledgeNotification$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AcknowledgeNotification$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.AcknowledgeNotification$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AcknowledgeNotification AcknowledgeNotification (MemorySegment segment, MemorySession session) {
        return AcknowledgeNotification.ofAddress(AcknowledgeNotification$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAsyncNotificationPort$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncNotificationPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$FUNC
    );
    public interface GetDeviceAsyncNotificationPort {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetDeviceAsyncNotificationPort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncNotificationPort.class, fi, IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$FUNC, session);
        }
        static GetDeviceAsyncNotificationPort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncNotificationPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncNotificationPort"));
    public static VarHandle GetDeviceAsyncNotificationPort$VH() {
        return IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$VH;
    }
    public static MemoryAddress GetDeviceAsyncNotificationPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$VH.get(seg);
    }
    public static void GetDeviceAsyncNotificationPort$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAsyncNotificationPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncNotificationPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct942.GetDeviceAsyncNotificationPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncNotificationPort GetDeviceAsyncNotificationPort (MemorySegment segment, MemorySession session) {
        return GetDeviceAsyncNotificationPort.ofAddress(GetDeviceAsyncNotificationPort$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


