// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class IOUSBDevRequest {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("bmRequestType"),
        Constants$root.C_CHAR$LAYOUT.withName("bRequest"),
        Constants$root.C_SHORT$LAYOUT.withName("wValue"),
        Constants$root.C_SHORT$LAYOUT.withName("wIndex"),
        Constants$root.C_SHORT$LAYOUT.withName("wLength"),
        Constants$root.C_POINTER$LAYOUT.withName("pData"),
        Constants$root.C_INT$LAYOUT.withName("wLenDone"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return IOUSBDevRequest.$struct$LAYOUT;
    }
    static final VarHandle bmRequestType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bmRequestType"));
    public static VarHandle bmRequestType$VH() {
        return IOUSBDevRequest.bmRequestType$VH;
    }
    public static byte bmRequestType$get(MemorySegment seg) {
        return (byte)IOUSBDevRequest.bmRequestType$VH.get(seg);
    }
    public static void bmRequestType$set( MemorySegment seg, byte x) {
        IOUSBDevRequest.bmRequestType$VH.set(seg, x);
    }
    public static byte bmRequestType$get(MemorySegment seg, long index) {
        return (byte)IOUSBDevRequest.bmRequestType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bmRequestType$set(MemorySegment seg, long index, byte x) {
        IOUSBDevRequest.bmRequestType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bRequest"));
    public static VarHandle bRequest$VH() {
        return IOUSBDevRequest.bRequest$VH;
    }
    public static byte bRequest$get(MemorySegment seg) {
        return (byte)IOUSBDevRequest.bRequest$VH.get(seg);
    }
    public static void bRequest$set( MemorySegment seg, byte x) {
        IOUSBDevRequest.bRequest$VH.set(seg, x);
    }
    public static byte bRequest$get(MemorySegment seg, long index) {
        return (byte)IOUSBDevRequest.bRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bRequest$set(MemorySegment seg, long index, byte x) {
        IOUSBDevRequest.bRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wValue"));
    public static VarHandle wValue$VH() {
        return IOUSBDevRequest.wValue$VH;
    }
    public static short wValue$get(MemorySegment seg) {
        return (short)IOUSBDevRequest.wValue$VH.get(seg);
    }
    public static void wValue$set( MemorySegment seg, short x) {
        IOUSBDevRequest.wValue$VH.set(seg, x);
    }
    public static short wValue$get(MemorySegment seg, long index) {
        return (short)IOUSBDevRequest.wValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wValue$set(MemorySegment seg, long index, short x) {
        IOUSBDevRequest.wValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wIndex"));
    public static VarHandle wIndex$VH() {
        return IOUSBDevRequest.wIndex$VH;
    }
    public static short wIndex$get(MemorySegment seg) {
        return (short)IOUSBDevRequest.wIndex$VH.get(seg);
    }
    public static void wIndex$set( MemorySegment seg, short x) {
        IOUSBDevRequest.wIndex$VH.set(seg, x);
    }
    public static short wIndex$get(MemorySegment seg, long index) {
        return (short)IOUSBDevRequest.wIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wIndex$set(MemorySegment seg, long index, short x) {
        IOUSBDevRequest.wIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wLength"));
    public static VarHandle wLength$VH() {
        return IOUSBDevRequest.wLength$VH;
    }
    public static short wLength$get(MemorySegment seg) {
        return (short)IOUSBDevRequest.wLength$VH.get(seg);
    }
    public static void wLength$set( MemorySegment seg, short x) {
        IOUSBDevRequest.wLength$VH.set(seg, x);
    }
    public static short wLength$get(MemorySegment seg, long index) {
        return (short)IOUSBDevRequest.wLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLength$set(MemorySegment seg, long index, short x) {
        IOUSBDevRequest.wLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pData"));
    public static VarHandle pData$VH() {
        return IOUSBDevRequest.pData$VH;
    }
    public static MemoryAddress pData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDevRequest.pData$VH.get(seg);
    }
    public static void pData$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDevRequest.pData$VH.set(seg, x);
    }
    public static MemoryAddress pData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDevRequest.pData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pData$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDevRequest.pData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wLenDone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wLenDone"));
    public static VarHandle wLenDone$VH() {
        return IOUSBDevRequest.wLenDone$VH;
    }
    public static int wLenDone$get(MemorySegment seg) {
        return (int)IOUSBDevRequest.wLenDone$VH.get(seg);
    }
    public static void wLenDone$set( MemorySegment seg, int x) {
        IOUSBDevRequest.wLenDone$VH.set(seg, x);
    }
    public static int wLenDone$get(MemorySegment seg, long index) {
        return (int)IOUSBDevRequest.wLenDone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLenDone$set(MemorySegment seg, long index, int x) {
        IOUSBDevRequest.wLenDone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


