// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
public class IOCFPlugInInterfaceStruct {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_reserved"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_SHORT$LAYOUT.withName("version"),
        Constants$root.C_SHORT$LAYOUT.withName("revision"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("Probe"),
        Constants$root.C_POINTER$LAYOUT.withName("Start"),
        Constants$root.C_POINTER$LAYOUT.withName("Stop")
    ).withName("IOCFPlugInInterfaceStruct");
    public static MemoryLayout $LAYOUT() {
        return IOCFPlugInInterfaceStruct.$struct$LAYOUT;
    }
    static final VarHandle _reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved"));
    public static VarHandle _reserved$VH() {
        return IOCFPlugInInterfaceStruct._reserved$VH;
    }
    public static MemoryAddress _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct._reserved$VH.get(seg);
    }
    public static void _reserved$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct._reserved$VH.set(seg, x);
    }
    public static MemoryAddress _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct._reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct._reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("byte0"),
            Constants$root.C_CHAR$LAYOUT.withName("byte1"),
            Constants$root.C_CHAR$LAYOUT.withName("byte2"),
            Constants$root.C_CHAR$LAYOUT.withName("byte3"),
            Constants$root.C_CHAR$LAYOUT.withName("byte4"),
            Constants$root.C_CHAR$LAYOUT.withName("byte5"),
            Constants$root.C_CHAR$LAYOUT.withName("byte6"),
            Constants$root.C_CHAR$LAYOUT.withName("byte7"),
            Constants$root.C_CHAR$LAYOUT.withName("byte8"),
            Constants$root.C_CHAR$LAYOUT.withName("byte9"),
            Constants$root.C_CHAR$LAYOUT.withName("byte10"),
            Constants$root.C_CHAR$LAYOUT.withName("byte11"),
            Constants$root.C_CHAR$LAYOUT.withName("byte12"),
            Constants$root.C_CHAR$LAYOUT.withName("byte13"),
            Constants$root.C_CHAR$LAYOUT.withName("byte14"),
            Constants$root.C_CHAR$LAYOUT.withName("byte15")
        ),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOCFPlugInInterfaceStruct.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOCFPlugInInterfaceStruct.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOCFPlugInInterfaceStruct.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOCFPlugInInterfaceStruct.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOCFPlugInInterfaceStruct.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOCFPlugInInterfaceStruct.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return IOCFPlugInInterfaceStruct.version$VH;
    }
    public static short version$get(MemorySegment seg) {
        return (short)IOCFPlugInInterfaceStruct.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, short x) {
        IOCFPlugInInterfaceStruct.version$VH.set(seg, x);
    }
    public static short version$get(MemorySegment seg, long index) {
        return (short)IOCFPlugInInterfaceStruct.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, short x) {
        IOCFPlugInInterfaceStruct.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle revision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("revision"));
    public static VarHandle revision$VH() {
        return IOCFPlugInInterfaceStruct.revision$VH;
    }
    public static short revision$get(MemorySegment seg) {
        return (short)IOCFPlugInInterfaceStruct.revision$VH.get(seg);
    }
    public static void revision$set( MemorySegment seg, short x) {
        IOCFPlugInInterfaceStruct.revision$VH.set(seg, x);
    }
    public static short revision$get(MemorySegment seg, long index) {
        return (short)IOCFPlugInInterfaceStruct.revision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void revision$set(MemorySegment seg, long index, short x) {
        IOCFPlugInInterfaceStruct.revision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor Probe$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Probe$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.Probe$FUNC
    );
    public interface Probe {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(Probe fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Probe.class, fi, IOCFPlugInInterfaceStruct.Probe$FUNC, session);
        }
        static Probe ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.Probe$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Probe$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Probe"));
    public static VarHandle Probe$VH() {
        return IOCFPlugInInterfaceStruct.Probe$VH;
    }
    public static MemoryAddress Probe$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Probe$VH.get(seg);
    }
    public static void Probe$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Probe$VH.set(seg, x);
    }
    public static MemoryAddress Probe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Probe$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Probe$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Probe$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Probe Probe (MemorySegment segment, MemorySession session) {
        return Probe.ofAddress(Probe$get(segment), session);
    }
    static final FunctionDescriptor Start$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle Start$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.Start$FUNC
    );
    public interface Start {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(Start fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Start.class, fi, IOCFPlugInInterfaceStruct.Start$FUNC, session);
        }
        static Start ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.Start$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Start"));
    public static VarHandle Start$VH() {
        return IOCFPlugInInterfaceStruct.Start$VH;
    }
    public static MemoryAddress Start$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Start$VH.get(seg);
    }
    public static void Start$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Start$VH.set(seg, x);
    }
    public static MemoryAddress Start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Start$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Start Start (MemorySegment segment, MemorySession session) {
        return Start.ofAddress(Start$get(segment), session);
    }
    static final FunctionDescriptor Stop$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Stop$MH = RuntimeHelper.downcallHandle(
        IOCFPlugInInterfaceStruct.Stop$FUNC
    );
    public interface Stop {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Stop fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Stop.class, fi, IOCFPlugInInterfaceStruct.Stop$FUNC, session);
        }
        static Stop ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOCFPlugInInterfaceStruct.Stop$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stop$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stop"));
    public static VarHandle Stop$VH() {
        return IOCFPlugInInterfaceStruct.Stop$VH;
    }
    public static MemoryAddress Stop$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Stop$VH.get(seg);
    }
    public static void Stop$set( MemorySegment seg, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Stop$VH.set(seg, x);
    }
    public static MemoryAddress Stop$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOCFPlugInInterfaceStruct.Stop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stop$set(MemorySegment seg, long index, MemoryAddress x) {
        IOCFPlugInInterfaceStruct.Stop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stop Stop (MemorySegment segment, MemorySession session) {
        return Stop.ofAddress(Stop$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


