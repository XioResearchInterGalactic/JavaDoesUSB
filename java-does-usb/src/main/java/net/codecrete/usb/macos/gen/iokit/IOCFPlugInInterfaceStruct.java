// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct IOCFPlugInInterfaceStruct {
 *     void* _reserved;
 *     HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
 *     ULONG (*AddRef)(void*);
 *     ULONG (*Release)(void*);
 *     UInt16 version;
 *     UInt16 revision;
 *     IOReturn (*Probe)(void*,CFDictionaryRef,io_service_t,SInt32*);
 *     IOReturn (*Start)(void*,CFDictionaryRef,io_service_t);
 *     IOReturn (*Stop)(void*);
 * };
 * }
 */
public class IOCFPlugInInterfaceStruct {

    public static MemoryLayout $LAYOUT() {
        return constants$40.const$2;
    }
    public static VarHandle _reserved$VH() {
        return constants$40.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static MemorySegment _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static void _reserved$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$3.set(seg, x);
    }
    public static MemorySegment _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$40.const$4, fi, constants$5.const$1, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$5.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$40.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$5.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(void*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$41.const$0, fi, constants$5.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$41.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$41.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$41.const$1.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$41.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$41.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(void*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$41.const$2, fi, constants$5.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$41.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$41.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$41.const$3.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$41.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$41.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    public static VarHandle version$VH() {
        return constants$41.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 version;
     * }
     */
    public static short version$get(MemorySegment seg) {
        return (short)constants$41.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 version;
     * }
     */
    public static void version$set(MemorySegment seg, short x) {
        constants$41.const$4.set(seg, x);
    }
    public static short version$get(MemorySegment seg, long index) {
        return (short)constants$41.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, short x) {
        constants$41.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle revision$VH() {
        return constants$41.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 revision;
     * }
     */
    public static short revision$get(MemorySegment seg) {
        return (short)constants$41.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 revision;
     * }
     */
    public static void revision$set(MemorySegment seg, short x) {
        constants$41.const$5.set(seg, x);
    }
    public static short revision$get(MemorySegment seg, long index) {
        return (short)constants$41.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void revision$set(MemorySegment seg, long index, short x) {
        constants$41.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * IOReturn (*Probe)(void*,CFDictionaryRef,io_service_t,SInt32*);
     * }
     */
    public interface Probe {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Probe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$42.const$1, fi, constants$42.const$0, scope);
        }
        static Probe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$42.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Probe$VH() {
        return constants$42.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*Probe)(void*,CFDictionaryRef,io_service_t,SInt32*);
     * }
     */
    public static MemorySegment Probe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$42.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*Probe)(void*,CFDictionaryRef,io_service_t,SInt32*);
     * }
     */
    public static void Probe$set(MemorySegment seg, MemorySegment x) {
        constants$42.const$3.set(seg, x);
    }
    public static MemorySegment Probe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$42.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Probe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$42.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Probe Probe(MemorySegment segment, Arena scope) {
        return Probe.ofAddress(Probe$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*Start)(void*,CFDictionaryRef,io_service_t);
     * }
     */
    public interface Start {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Start fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$42.const$5, fi, constants$42.const$4, scope);
        }
        static Start ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$43.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Start$VH() {
        return constants$43.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*Start)(void*,CFDictionaryRef,io_service_t);
     * }
     */
    public static MemorySegment Start$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$43.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*Start)(void*,CFDictionaryRef,io_service_t);
     * }
     */
    public static void Start$set(MemorySegment seg, MemorySegment x) {
        constants$43.const$1.set(seg, x);
    }
    public static MemorySegment Start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$43.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void Start$set(MemorySegment seg, long index, MemorySegment x) {
        constants$43.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static Start Start(MemorySegment segment, Arena scope) {
        return Start.ofAddress(Start$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*Stop)(void*);
     * }
     */
    public interface Stop {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Stop fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$43.const$2, fi, constants$5.const$5, scope);
        }
        static Stop ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Stop$VH() {
        return constants$43.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*Stop)(void*);
     * }
     */
    public static MemorySegment Stop$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$43.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*Stop)(void*);
     * }
     */
    public static void Stop$set(MemorySegment seg, MemorySegment x) {
        constants$43.const$3.set(seg, x);
    }
    public static MemorySegment Stop$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$43.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Stop$set(MemorySegment seg, long index, MemorySegment x) {
        constants$43.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stop Stop(MemorySegment segment, Arena scope) {
        return Stop.ofAddress(Stop$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


