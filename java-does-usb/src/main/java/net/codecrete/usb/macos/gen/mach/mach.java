// Generated by jextract

package net.codecrete.usb.macos.gen.mach;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class mach  {

    /* package-private */ mach() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mach_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mach_error_string$MH,"mach_error_string");
    }
    public static MemoryAddress mach_error_string ( int error_value) {
        var mh$ = mach_error_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mach_error$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mach_error$MH,"mach_error");
    }
    public static void mach_error ( Addressable str,  int error_value) {
        var mh$ = mach_error$MH();
        try {
            mh$.invokeExact(str, error_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


