// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct {
 *     UInt16 bInterfaceClass;
 *     UInt16 bInterfaceSubClass;
 *     UInt16 bInterfaceProtocol;
 *     UInt16 bAlternateSetting;
 * };
 * }
 */
public class IOUSBFindInterfaceRequest {

    public static MemoryLayout $LAYOUT() {
        return constants$1.const$2;
    }
    public static VarHandle bInterfaceClass$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 bInterfaceClass;
     * }
     */
    public static short bInterfaceClass$get(MemorySegment seg) {
        return (short)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 bInterfaceClass;
     * }
     */
    public static void bInterfaceClass$set(MemorySegment seg, short x) {
        constants$1.const$3.set(seg, x);
    }
    public static short bInterfaceClass$get(MemorySegment seg, long index) {
        return (short)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceClass$set(MemorySegment seg, long index, short x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bInterfaceSubClass$VH() {
        return constants$1.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 bInterfaceSubClass;
     * }
     */
    public static short bInterfaceSubClass$get(MemorySegment seg) {
        return (short)constants$1.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 bInterfaceSubClass;
     * }
     */
    public static void bInterfaceSubClass$set(MemorySegment seg, short x) {
        constants$1.const$4.set(seg, x);
    }
    public static short bInterfaceSubClass$get(MemorySegment seg, long index) {
        return (short)constants$1.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceSubClass$set(MemorySegment seg, long index, short x) {
        constants$1.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bInterfaceProtocol$VH() {
        return constants$1.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 bInterfaceProtocol;
     * }
     */
    public static short bInterfaceProtocol$get(MemorySegment seg) {
        return (short)constants$1.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 bInterfaceProtocol;
     * }
     */
    public static void bInterfaceProtocol$set(MemorySegment seg, short x) {
        constants$1.const$5.set(seg, x);
    }
    public static short bInterfaceProtocol$get(MemorySegment seg, long index) {
        return (short)constants$1.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceProtocol$set(MemorySegment seg, long index, short x) {
        constants$1.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bAlternateSetting$VH() {
        return constants$2.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UInt16 bAlternateSetting;
     * }
     */
    public static short bAlternateSetting$get(MemorySegment seg) {
        return (short)constants$2.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UInt16 bAlternateSetting;
     * }
     */
    public static void bAlternateSetting$set(MemorySegment seg, short x) {
        constants$2.const$0.set(seg, x);
    }
    public static short bAlternateSetting$get(MemorySegment seg, long index) {
        return (short)constants$2.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bAlternateSetting$set(MemorySegment seg, long index, short x) {
        constants$2.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


