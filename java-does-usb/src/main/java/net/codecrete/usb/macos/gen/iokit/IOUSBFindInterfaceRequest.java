// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class IOUSBFindInterfaceRequest {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("bInterfaceClass"),
        Constants$root.C_SHORT$LAYOUT.withName("bInterfaceSubClass"),
        Constants$root.C_SHORT$LAYOUT.withName("bInterfaceProtocol"),
        Constants$root.C_SHORT$LAYOUT.withName("bAlternateSetting")
    );
    public static MemoryLayout $LAYOUT() {
        return IOUSBFindInterfaceRequest.$struct$LAYOUT;
    }
    static final VarHandle bInterfaceClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bInterfaceClass"));
    public static VarHandle bInterfaceClass$VH() {
        return IOUSBFindInterfaceRequest.bInterfaceClass$VH;
    }
    public static short bInterfaceClass$get(MemorySegment seg) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceClass$VH.get(seg);
    }
    public static void bInterfaceClass$set( MemorySegment seg, short x) {
        IOUSBFindInterfaceRequest.bInterfaceClass$VH.set(seg, x);
    }
    public static short bInterfaceClass$get(MemorySegment seg, long index) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceClass$set(MemorySegment seg, long index, short x) {
        IOUSBFindInterfaceRequest.bInterfaceClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bInterfaceSubClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bInterfaceSubClass"));
    public static VarHandle bInterfaceSubClass$VH() {
        return IOUSBFindInterfaceRequest.bInterfaceSubClass$VH;
    }
    public static short bInterfaceSubClass$get(MemorySegment seg) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceSubClass$VH.get(seg);
    }
    public static void bInterfaceSubClass$set( MemorySegment seg, short x) {
        IOUSBFindInterfaceRequest.bInterfaceSubClass$VH.set(seg, x);
    }
    public static short bInterfaceSubClass$get(MemorySegment seg, long index) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceSubClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceSubClass$set(MemorySegment seg, long index, short x) {
        IOUSBFindInterfaceRequest.bInterfaceSubClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bInterfaceProtocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bInterfaceProtocol"));
    public static VarHandle bInterfaceProtocol$VH() {
        return IOUSBFindInterfaceRequest.bInterfaceProtocol$VH;
    }
    public static short bInterfaceProtocol$get(MemorySegment seg) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceProtocol$VH.get(seg);
    }
    public static void bInterfaceProtocol$set( MemorySegment seg, short x) {
        IOUSBFindInterfaceRequest.bInterfaceProtocol$VH.set(seg, x);
    }
    public static short bInterfaceProtocol$get(MemorySegment seg, long index) {
        return (short)IOUSBFindInterfaceRequest.bInterfaceProtocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bInterfaceProtocol$set(MemorySegment seg, long index, short x) {
        IOUSBFindInterfaceRequest.bInterfaceProtocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bAlternateSetting$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bAlternateSetting"));
    public static VarHandle bAlternateSetting$VH() {
        return IOUSBFindInterfaceRequest.bAlternateSetting$VH;
    }
    public static short bAlternateSetting$get(MemorySegment seg) {
        return (short)IOUSBFindInterfaceRequest.bAlternateSetting$VH.get(seg);
    }
    public static void bAlternateSetting$set( MemorySegment seg, short x) {
        IOUSBFindInterfaceRequest.bAlternateSetting$VH.set(seg, x);
    }
    public static short bAlternateSetting$get(MemorySegment seg, long index) {
        return (short)IOUSBFindInterfaceRequest.bAlternateSetting$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bAlternateSetting$set(MemorySegment seg, long index, short x) {
        IOUSBFindInterfaceRequest.bAlternateSetting$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


