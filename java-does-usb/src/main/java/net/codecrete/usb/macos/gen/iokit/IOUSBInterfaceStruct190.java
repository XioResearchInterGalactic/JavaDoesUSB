// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct IOUSBInterfaceStruct190 {
 *     void* _reserved;
 *     HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
 *     ULONG (*AddRef)(void*);
 *     ULONG (*Release)(void*);
 *     IOReturn (*CreateInterfaceAsyncEventSource)(void*,CFRunLoopSourceRef*);
 *     CFRunLoopSourceRef (*GetInterfaceAsyncEventSource)(void*);
 *     IOReturn (*CreateInterfaceAsyncPort)(void*,mach_port_t*);
 *     mach_port_t (*GetInterfaceAsyncPort)(void*);
 *     IOReturn (*USBInterfaceOpen)(void*);
 *     IOReturn (*USBInterfaceClose)(void*);
 *     IOReturn (*GetInterfaceClass)(void*,UInt8*);
 *     IOReturn (*GetInterfaceSubClass)(void*,UInt8*);
 *     IOReturn (*GetInterfaceProtocol)(void*,UInt8*);
 *     IOReturn (*GetDeviceVendor)(void*,UInt16*);
 *     IOReturn (*GetDeviceProduct)(void*,UInt16*);
 *     IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
 *     IOReturn (*GetConfigurationValue)(void*,UInt8*);
 *     IOReturn (*GetInterfaceNumber)(void*,UInt8*);
 *     IOReturn (*GetAlternateSetting)(void*,UInt8*);
 *     IOReturn (*GetNumEndpoints)(void*,UInt8*);
 *     IOReturn (*GetLocationID)(void*,UInt32*);
 *     IOReturn (*GetDevice)(void*,io_service_t*);
 *     IOReturn (*SetAlternateInterface)(void*,UInt8);
 *     IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
 *     IOReturn (*ControlRequest)(void*,UInt8,IOUSBDevRequest*);
 *     IOReturn (*ControlRequestAsync)(void*,UInt8,IOUSBDevRequest*,IOAsyncCallback1,void*);
 *     IOReturn (*GetPipeProperties)(void*,UInt8,UInt8*,UInt8*,UInt8*,UInt16*,UInt8*);
 *     IOReturn (*GetPipeStatus)(void*,UInt8);
 *     IOReturn (*AbortPipe)(void*,UInt8);
 *     IOReturn (*ResetPipe)(void*,UInt8);
 *     IOReturn (*ClearPipeStall)(void*,UInt8);
 *     IOReturn (*ReadPipe)(void*,UInt8,void*,UInt32*);
 *     IOReturn (*WritePipe)(void*,UInt8,void*,UInt32);
 *     IOReturn (*ReadPipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
 *     IOReturn (*WritePipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
 *     IOReturn (*ReadIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
 *     IOReturn (*WriteIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
 *     IOReturn (*ControlRequestTO)(void*,UInt8,IOUSBDevRequestTO*);
 *     IOReturn (*ControlRequestAsyncTO)(void*,UInt8,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
 *     IOReturn (*ReadPipeTO)(void*,UInt8,void*,UInt32*,UInt32,UInt32);
 *     IOReturn (*WritePipeTO)(void*,UInt8,void*,UInt32,UInt32,UInt32);
 *     IOReturn (*ReadPipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
 *     IOReturn (*WritePipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
 *     IOReturn (*USBInterfaceGetStringIndex)(void*,UInt8*);
 *     IOReturn (*USBInterfaceOpenSeize)(void*);
 *     IOReturn (*ClearPipeStallBothEnds)(void*,UInt8);
 *     IOReturn (*SetPipePolicy)(void*,UInt8,UInt16,UInt8);
 *     IOReturn (*GetBandwidthAvailable)(void*,UInt32*);
 *     IOReturn (*GetEndpointProperties)(void*,UInt8,UInt8,UInt8,UInt8*,UInt16*,UInt8*);
 * };
 * }
 */
public class IOUSBInterfaceStruct190 {

    public static MemoryLayout $LAYOUT() {
        return constants$20.const$2;
    }
    public static VarHandle _reserved$VH() {
        return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static MemorySegment _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* _reserved;
     * }
     */
    public static void _reserved$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$3.set(seg, x);
    }
    public static MemorySegment _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$20.const$4, fi, constants$5.const$1, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$5.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle QueryInterface$VH() {
        return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(void*,REFIID,LPVOID*);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$5.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, Arena scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*AddRef)(void*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$21.const$0, fi, constants$5.const$5, scope);
        }
        static AddRef ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AddRef$VH() {
        return constants$21.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(void*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$1.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, Arena scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * ULONG (*Release)(void*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$21.const$2, fi, constants$5.const$5, scope);
        }
        static Release ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Release$VH() {
        return constants$21.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(void*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$3.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, Arena scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*CreateInterfaceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public interface CreateInterfaceAsyncEventSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateInterfaceAsyncEventSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$21.const$4, fi, constants$6.const$5, scope);
        }
        static CreateInterfaceAsyncEventSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateInterfaceAsyncEventSource$VH() {
        return constants$21.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static MemorySegment CreateInterfaceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceAsyncEventSource)(void*,CFRunLoopSourceRef*);
     * }
     */
    public static void CreateInterfaceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$5.set(seg, x);
    }
    public static MemorySegment CreateInterfaceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceAsyncEventSource CreateInterfaceAsyncEventSource(MemorySegment segment, Arena scope) {
        return CreateInterfaceAsyncEventSource.ofAddress(CreateInterfaceAsyncEventSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * CFRunLoopSourceRef (*GetInterfaceAsyncEventSource)(void*);
     * }
     */
    public interface GetInterfaceAsyncEventSource {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetInterfaceAsyncEventSource fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$22.const$0, fi, constants$3.const$0, scope);
        }
        static GetInterfaceAsyncEventSource ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$7.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceAsyncEventSource$VH() {
        return constants$22.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetInterfaceAsyncEventSource)(void*);
     * }
     */
    public static MemorySegment GetInterfaceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$22.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CFRunLoopSourceRef (*GetInterfaceAsyncEventSource)(void*);
     * }
     */
    public static void GetInterfaceAsyncEventSource$set(MemorySegment seg, MemorySegment x) {
        constants$22.const$1.set(seg, x);
    }
    public static MemorySegment GetInterfaceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$22.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceAsyncEventSource$set(MemorySegment seg, long index, MemorySegment x) {
        constants$22.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceAsyncEventSource GetInterfaceAsyncEventSource(MemorySegment segment, Arena scope) {
        return GetInterfaceAsyncEventSource.ofAddress(GetInterfaceAsyncEventSource$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*CreateInterfaceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public interface CreateInterfaceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(CreateInterfaceAsyncPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$22.const$2, fi, constants$6.const$5, scope);
        }
        static CreateInterfaceAsyncPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CreateInterfaceAsyncPort$VH() {
        return constants$22.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static MemorySegment CreateInterfaceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$22.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*CreateInterfaceAsyncPort)(void*,mach_port_t*);
     * }
     */
    public static void CreateInterfaceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        constants$22.const$3.set(seg, x);
    }
    public static MemorySegment CreateInterfaceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$22.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$22.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceAsyncPort CreateInterfaceAsyncPort(MemorySegment segment, Arena scope) {
        return CreateInterfaceAsyncPort.ofAddress(CreateInterfaceAsyncPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * mach_port_t (*GetInterfaceAsyncPort)(void*);
     * }
     */
    public interface GetInterfaceAsyncPort {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetInterfaceAsyncPort fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$22.const$4, fi, constants$5.const$5, scope);
        }
        static GetInterfaceAsyncPort ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceAsyncPort$VH() {
        return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * mach_port_t (*GetInterfaceAsyncPort)(void*);
     * }
     */
    public static MemorySegment GetInterfaceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * mach_port_t (*GetInterfaceAsyncPort)(void*);
     * }
     */
    public static void GetInterfaceAsyncPort$set(MemorySegment seg, MemorySegment x) {
        constants$22.const$5.set(seg, x);
    }
    public static MemorySegment GetInterfaceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$22.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceAsyncPort$set(MemorySegment seg, long index, MemorySegment x) {
        constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceAsyncPort GetInterfaceAsyncPort(MemorySegment segment, Arena scope) {
        return GetInterfaceAsyncPort.ofAddress(GetInterfaceAsyncPort$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBInterfaceOpen)(void*);
     * }
     */
    public interface USBInterfaceOpen {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBInterfaceOpen fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$23.const$0, fi, constants$5.const$5, scope);
        }
        static USBInterfaceOpen ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBInterfaceOpen$VH() {
        return constants$23.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceOpen)(void*);
     * }
     */
    public static MemorySegment USBInterfaceOpen$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$23.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceOpen)(void*);
     * }
     */
    public static void USBInterfaceOpen$set(MemorySegment seg, MemorySegment x) {
        constants$23.const$1.set(seg, x);
    }
    public static MemorySegment USBInterfaceOpen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$23.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBInterfaceOpen$set(MemorySegment seg, long index, MemorySegment x) {
        constants$23.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBInterfaceOpen USBInterfaceOpen(MemorySegment segment, Arena scope) {
        return USBInterfaceOpen.ofAddress(USBInterfaceOpen$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBInterfaceClose)(void*);
     * }
     */
    public interface USBInterfaceClose {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBInterfaceClose fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$23.const$2, fi, constants$5.const$5, scope);
        }
        static USBInterfaceClose ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBInterfaceClose$VH() {
        return constants$23.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceClose)(void*);
     * }
     */
    public static MemorySegment USBInterfaceClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$23.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceClose)(void*);
     * }
     */
    public static void USBInterfaceClose$set(MemorySegment seg, MemorySegment x) {
        constants$23.const$3.set(seg, x);
    }
    public static MemorySegment USBInterfaceClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$23.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void USBInterfaceClose$set(MemorySegment seg, long index, MemorySegment x) {
        constants$23.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBInterfaceClose USBInterfaceClose(MemorySegment segment, Arena scope) {
        return USBInterfaceClose.ofAddress(USBInterfaceClose$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetInterfaceClass)(void*,UInt8*);
     * }
     */
    public interface GetInterfaceClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetInterfaceClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$23.const$4, fi, constants$6.const$5, scope);
        }
        static GetInterfaceClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceClass$VH() {
        return constants$23.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetInterfaceClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$23.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceClass)(void*,UInt8*);
     * }
     */
    public static void GetInterfaceClass$set(MemorySegment seg, MemorySegment x) {
        constants$23.const$5.set(seg, x);
    }
    public static MemorySegment GetInterfaceClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$23.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$23.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceClass GetInterfaceClass(MemorySegment segment, Arena scope) {
        return GetInterfaceClass.ofAddress(GetInterfaceClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetInterfaceSubClass)(void*,UInt8*);
     * }
     */
    public interface GetInterfaceSubClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetInterfaceSubClass fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$24.const$0, fi, constants$6.const$5, scope);
        }
        static GetInterfaceSubClass ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceSubClass$VH() {
        return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceSubClass)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetInterfaceSubClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceSubClass)(void*,UInt8*);
     * }
     */
    public static void GetInterfaceSubClass$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$1.set(seg, x);
    }
    public static MemorySegment GetInterfaceSubClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceSubClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceSubClass GetInterfaceSubClass(MemorySegment segment, Arena scope) {
        return GetInterfaceSubClass.ofAddress(GetInterfaceSubClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetInterfaceProtocol)(void*,UInt8*);
     * }
     */
    public interface GetInterfaceProtocol {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetInterfaceProtocol fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$24.const$2, fi, constants$6.const$5, scope);
        }
        static GetInterfaceProtocol ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceProtocol$VH() {
        return constants$24.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceProtocol)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetInterfaceProtocol$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceProtocol)(void*,UInt8*);
     * }
     */
    public static void GetInterfaceProtocol$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$3.set(seg, x);
    }
    public static MemorySegment GetInterfaceProtocol$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceProtocol$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceProtocol GetInterfaceProtocol(MemorySegment segment, Arena scope) {
        return GetInterfaceProtocol.ofAddress(GetInterfaceProtocol$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public interface GetDeviceVendor {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceVendor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$24.const$4, fi, constants$6.const$5, scope);
        }
        static GetDeviceVendor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceVendor$VH() {
        return constants$24.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceVendor)(void*,UInt16*);
     * }
     */
    public static void GetDeviceVendor$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$5.set(seg, x);
    }
    public static MemorySegment GetDeviceVendor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceVendor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceVendor GetDeviceVendor(MemorySegment segment, Arena scope) {
        return GetDeviceVendor.ofAddress(GetDeviceVendor$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public interface GetDeviceProduct {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceProduct fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$25.const$0, fi, constants$6.const$5, scope);
        }
        static GetDeviceProduct ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceProduct$VH() {
        return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceProduct)(void*,UInt16*);
     * }
     */
    public static void GetDeviceProduct$set(MemorySegment seg, MemorySegment x) {
        constants$25.const$1.set(seg, x);
    }
    public static MemorySegment GetDeviceProduct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$25.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProduct$set(MemorySegment seg, long index, MemorySegment x) {
        constants$25.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProduct GetDeviceProduct(MemorySegment segment, Arena scope) {
        return GetDeviceProduct.ofAddress(GetDeviceProduct$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public interface GetDeviceReleaseNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDeviceReleaseNumber fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$25.const$2, fi, constants$6.const$5, scope);
        }
        static GetDeviceReleaseNumber ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDeviceReleaseNumber$VH() {
        return constants$25.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$25.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDeviceReleaseNumber)(void*,UInt16*);
     * }
     */
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, MemorySegment x) {
        constants$25.const$3.set(seg, x);
    }
    public static MemorySegment GetDeviceReleaseNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$25.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, long index, MemorySegment x) {
        constants$25.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceReleaseNumber GetDeviceReleaseNumber(MemorySegment segment, Arena scope) {
        return GetDeviceReleaseNumber.ofAddress(GetDeviceReleaseNumber$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetConfigurationValue)(void*,UInt8*);
     * }
     */
    public interface GetConfigurationValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetConfigurationValue fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$25.const$4, fi, constants$6.const$5, scope);
        }
        static GetConfigurationValue ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetConfigurationValue$VH() {
        return constants$25.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationValue)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetConfigurationValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$25.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetConfigurationValue)(void*,UInt8*);
     * }
     */
    public static void GetConfigurationValue$set(MemorySegment seg, MemorySegment x) {
        constants$25.const$5.set(seg, x);
    }
    public static MemorySegment GetConfigurationValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$25.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfigurationValue$set(MemorySegment seg, long index, MemorySegment x) {
        constants$25.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfigurationValue GetConfigurationValue(MemorySegment segment, Arena scope) {
        return GetConfigurationValue.ofAddress(GetConfigurationValue$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetInterfaceNumber)(void*,UInt8*);
     * }
     */
    public interface GetInterfaceNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetInterfaceNumber fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$26.const$0, fi, constants$6.const$5, scope);
        }
        static GetInterfaceNumber ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetInterfaceNumber$VH() {
        return constants$26.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceNumber)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetInterfaceNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetInterfaceNumber)(void*,UInt8*);
     * }
     */
    public static void GetInterfaceNumber$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$1.set(seg, x);
    }
    public static MemorySegment GetInterfaceNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceNumber$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceNumber GetInterfaceNumber(MemorySegment segment, Arena scope) {
        return GetInterfaceNumber.ofAddress(GetInterfaceNumber$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetAlternateSetting)(void*,UInt8*);
     * }
     */
    public interface GetAlternateSetting {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAlternateSetting fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$26.const$2, fi, constants$6.const$5, scope);
        }
        static GetAlternateSetting ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetAlternateSetting$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetAlternateSetting)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetAlternateSetting$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetAlternateSetting)(void*,UInt8*);
     * }
     */
    public static void GetAlternateSetting$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$3.set(seg, x);
    }
    public static MemorySegment GetAlternateSetting$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAlternateSetting$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAlternateSetting GetAlternateSetting(MemorySegment segment, Arena scope) {
        return GetAlternateSetting.ofAddress(GetAlternateSetting$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetNumEndpoints)(void*,UInt8*);
     * }
     */
    public interface GetNumEndpoints {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetNumEndpoints fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$26.const$4, fi, constants$6.const$5, scope);
        }
        static GetNumEndpoints ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetNumEndpoints$VH() {
        return constants$26.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetNumEndpoints)(void*,UInt8*);
     * }
     */
    public static MemorySegment GetNumEndpoints$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetNumEndpoints)(void*,UInt8*);
     * }
     */
    public static void GetNumEndpoints$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$5.set(seg, x);
    }
    public static MemorySegment GetNumEndpoints$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumEndpoints$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNumEndpoints GetNumEndpoints(MemorySegment segment, Arena scope) {
        return GetNumEndpoints.ofAddress(GetNumEndpoints$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public interface GetLocationID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLocationID fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$27.const$0, fi, constants$6.const$5, scope);
        }
        static GetLocationID ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLocationID$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetLocationID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetLocationID)(void*,UInt32*);
     * }
     */
    public static void GetLocationID$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$1.set(seg, x);
    }
    public static MemorySegment GetLocationID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLocationID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLocationID GetLocationID(MemorySegment segment, Arena scope) {
        return GetLocationID.ofAddress(GetLocationID$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetDevice)(void*,io_service_t*);
     * }
     */
    public interface GetDevice {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDevice fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$27.const$2, fi, constants$6.const$5, scope);
        }
        static GetDevice ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDevice$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetDevice)(void*,io_service_t*);
     * }
     */
    public static MemorySegment GetDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetDevice)(void*,io_service_t*);
     * }
     */
    public static void GetDevice$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$3.set(seg, x);
    }
    public static MemorySegment GetDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDevice$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDevice GetDevice(MemorySegment segment, Arena scope) {
        return GetDevice.ofAddress(GetDevice$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*SetAlternateInterface)(void*,UInt8);
     * }
     */
    public interface SetAlternateInterface {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(SetAlternateInterface fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$27.const$4, fi, constants$14.const$0, scope);
        }
        static SetAlternateInterface ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetAlternateInterface$VH() {
        return constants$27.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*SetAlternateInterface)(void*,UInt8);
     * }
     */
    public static MemorySegment SetAlternateInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*SetAlternateInterface)(void*,UInt8);
     * }
     */
    public static void SetAlternateInterface$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$5.set(seg, x);
    }
    public static MemorySegment SetAlternateInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAlternateInterface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAlternateInterface SetAlternateInterface(MemorySegment segment, Arena scope) {
        return SetAlternateInterface.ofAddress(SetAlternateInterface$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public interface GetBusFrameNumber {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBusFrameNumber fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$28.const$0, fi, constants$14.const$4, scope);
        }
        static GetBusFrameNumber ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$15.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBusFrameNumber$VH() {
        return constants$28.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetBusFrameNumber)(void*,UInt64*,AbsoluteTime*);
     * }
     */
    public static void GetBusFrameNumber$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$1.set(seg, x);
    }
    public static MemorySegment GetBusFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumber$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumber GetBusFrameNumber(MemorySegment segment, Arena scope) {
        return GetBusFrameNumber.ofAddress(GetBusFrameNumber$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ControlRequest)(void*,UInt8,IOUSBDevRequest*);
     * }
     */
    public interface ControlRequest {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ControlRequest fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$28.const$2, fi, constants$13.const$0, scope);
        }
        static ControlRequest ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$13.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ControlRequest$VH() {
        return constants$28.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ControlRequest)(void*,UInt8,IOUSBDevRequest*);
     * }
     */
    public static MemorySegment ControlRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ControlRequest)(void*,UInt8,IOUSBDevRequest*);
     * }
     */
    public static void ControlRequest$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$3.set(seg, x);
    }
    public static MemorySegment ControlRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlRequest$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ControlRequest ControlRequest(MemorySegment segment, Arena scope) {
        return ControlRequest.ofAddress(ControlRequest$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ControlRequestAsync)(void*,UInt8,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public interface ControlRequestAsync {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ControlRequestAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$28.const$5, fi, constants$28.const$4, scope);
        }
        static ControlRequestAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$29.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ControlRequestAsync$VH() {
        return constants$29.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ControlRequestAsync)(void*,UInt8,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment ControlRequestAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$29.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ControlRequestAsync)(void*,UInt8,IOUSBDevRequest*,IOAsyncCallback1,void*);
     * }
     */
    public static void ControlRequestAsync$set(MemorySegment seg, MemorySegment x) {
        constants$29.const$1.set(seg, x);
    }
    public static MemorySegment ControlRequestAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$29.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlRequestAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$29.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ControlRequestAsync ControlRequestAsync(MemorySegment segment, Arena scope) {
        return ControlRequestAsync.ofAddress(ControlRequestAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetPipeProperties)(void*,UInt8,UInt8*,UInt8*,UInt8*,UInt16*,UInt8*);
     * }
     */
    public interface GetPipeProperties {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(GetPipeProperties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$29.const$3, fi, constants$29.const$2, scope);
        }
        static GetPipeProperties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$29.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPipeProperties$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetPipeProperties)(void*,UInt8,UInt8*,UInt8*,UInt8*,UInt16*,UInt8*);
     * }
     */
    public static MemorySegment GetPipeProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetPipeProperties)(void*,UInt8,UInt8*,UInt8*,UInt8*,UInt16*,UInt8*);
     * }
     */
    public static void GetPipeProperties$set(MemorySegment seg, MemorySegment x) {
        constants$29.const$5.set(seg, x);
    }
    public static MemorySegment GetPipeProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPipeProperties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPipeProperties GetPipeProperties(MemorySegment segment, Arena scope) {
        return GetPipeProperties.ofAddress(GetPipeProperties$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetPipeStatus)(void*,UInt8);
     * }
     */
    public interface GetPipeStatus {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(GetPipeStatus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$30.const$0, fi, constants$14.const$0, scope);
        }
        static GetPipeStatus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPipeStatus$VH() {
        return constants$30.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetPipeStatus)(void*,UInt8);
     * }
     */
    public static MemorySegment GetPipeStatus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetPipeStatus)(void*,UInt8);
     * }
     */
    public static void GetPipeStatus$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$1.set(seg, x);
    }
    public static MemorySegment GetPipeStatus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPipeStatus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPipeStatus GetPipeStatus(MemorySegment segment, Arena scope) {
        return GetPipeStatus.ofAddress(GetPipeStatus$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*AbortPipe)(void*,UInt8);
     * }
     */
    public interface AbortPipe {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(AbortPipe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$30.const$2, fi, constants$14.const$0, scope);
        }
        static AbortPipe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AbortPipe$VH() {
        return constants$30.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*AbortPipe)(void*,UInt8);
     * }
     */
    public static MemorySegment AbortPipe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*AbortPipe)(void*,UInt8);
     * }
     */
    public static void AbortPipe$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$3.set(seg, x);
    }
    public static MemorySegment AbortPipe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void AbortPipe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static AbortPipe AbortPipe(MemorySegment segment, Arena scope) {
        return AbortPipe.ofAddress(AbortPipe$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ResetPipe)(void*,UInt8);
     * }
     */
    public interface ResetPipe {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(ResetPipe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$30.const$4, fi, constants$14.const$0, scope);
        }
        static ResetPipe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ResetPipe$VH() {
        return constants$30.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ResetPipe)(void*,UInt8);
     * }
     */
    public static MemorySegment ResetPipe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ResetPipe)(void*,UInt8);
     * }
     */
    public static void ResetPipe$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$5.set(seg, x);
    }
    public static MemorySegment ResetPipe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetPipe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResetPipe ResetPipe(MemorySegment segment, Arena scope) {
        return ResetPipe.ofAddress(ResetPipe$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ClearPipeStall)(void*,UInt8);
     * }
     */
    public interface ClearPipeStall {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(ClearPipeStall fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$31.const$0, fi, constants$14.const$0, scope);
        }
        static ClearPipeStall ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ClearPipeStall$VH() {
        return constants$31.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ClearPipeStall)(void*,UInt8);
     * }
     */
    public static MemorySegment ClearPipeStall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$31.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ClearPipeStall)(void*,UInt8);
     * }
     */
    public static void ClearPipeStall$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$1.set(seg, x);
    }
    public static MemorySegment ClearPipeStall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$31.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ClearPipeStall$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClearPipeStall ClearPipeStall(MemorySegment segment, Arena scope) {
        return ClearPipeStall.ofAddress(ClearPipeStall$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ReadPipe)(void*,UInt8,void*,UInt32*);
     * }
     */
    public interface ReadPipe {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReadPipe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$31.const$3, fi, constants$31.const$2, scope);
        }
        static ReadPipe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$31.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadPipe$VH() {
        return constants$31.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ReadPipe)(void*,UInt8,void*,UInt32*);
     * }
     */
    public static MemorySegment ReadPipe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ReadPipe)(void*,UInt8,void*,UInt32*);
     * }
     */
    public static void ReadPipe$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$5.set(seg, x);
    }
    public static MemorySegment ReadPipe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPipe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPipe ReadPipe(MemorySegment segment, Arena scope) {
        return ReadPipe.ofAddress(ReadPipe$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*WritePipe)(void*,UInt8,void*,UInt32);
     * }
     */
    public interface WritePipe {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(WritePipe fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$32.const$1, fi, constants$32.const$0, scope);
        }
        static WritePipe ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$32.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WritePipe$VH() {
        return constants$32.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*WritePipe)(void*,UInt8,void*,UInt32);
     * }
     */
    public static MemorySegment WritePipe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*WritePipe)(void*,UInt8,void*,UInt32);
     * }
     */
    public static void WritePipe$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$3.set(seg, x);
    }
    public static MemorySegment WritePipe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePipe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePipe WritePipe(MemorySegment segment, Arena scope) {
        return WritePipe.ofAddress(WritePipe$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ReadPipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public interface ReadPipeAsync {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(ReadPipeAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$32.const$5, fi, constants$32.const$4, scope);
        }
        static ReadPipeAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$33.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadPipeAsync$VH() {
        return constants$33.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ReadPipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment ReadPipeAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ReadPipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static void ReadPipeAsync$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$1.set(seg, x);
    }
    public static MemorySegment ReadPipeAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPipeAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPipeAsync ReadPipeAsync(MemorySegment segment, Arena scope) {
        return ReadPipeAsync.ofAddress(ReadPipeAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*WritePipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public interface WritePipeAsync {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(WritePipeAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$33.const$2, fi, constants$32.const$4, scope);
        }
        static WritePipeAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$33.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WritePipeAsync$VH() {
        return constants$33.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*WritePipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment WritePipeAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*WritePipeAsync)(void*,UInt8,void*,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static void WritePipeAsync$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$3.set(seg, x);
    }
    public static MemorySegment WritePipeAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePipeAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePipeAsync WritePipeAsync(MemorySegment segment, Arena scope) {
        return WritePipeAsync.ofAddress(WritePipeAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ReadIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public interface ReadIsochPipeAsync {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, long _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(ReadIsochPipeAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$33.const$5, fi, constants$33.const$4, scope);
        }
        static ReadIsochPipeAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, long __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$34.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadIsochPipeAsync$VH() {
        return constants$34.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ReadIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment ReadIsochPipeAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ReadIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public static void ReadIsochPipeAsync$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$1.set(seg, x);
    }
    public static MemorySegment ReadIsochPipeAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadIsochPipeAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadIsochPipeAsync ReadIsochPipeAsync(MemorySegment segment, Arena scope) {
        return ReadIsochPipeAsync.ofAddress(ReadIsochPipeAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*WriteIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public interface WriteIsochPipeAsync {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, long _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(WriteIsochPipeAsync fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$34.const$2, fi, constants$33.const$4, scope);
        }
        static WriteIsochPipeAsync ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, long __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$34.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WriteIsochPipeAsync$VH() {
        return constants$34.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*WriteIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment WriteIsochPipeAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*WriteIsochPipeAsync)(void*,UInt8,void*,UInt64,UInt32,IOUSBIsocFrame*,IOAsyncCallback1,void*);
     * }
     */
    public static void WriteIsochPipeAsync$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$3.set(seg, x);
    }
    public static MemorySegment WriteIsochPipeAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteIsochPipeAsync$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteIsochPipeAsync WriteIsochPipeAsync(MemorySegment segment, Arena scope) {
        return WriteIsochPipeAsync.ofAddress(WriteIsochPipeAsync$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ControlRequestTO)(void*,UInt8,IOUSBDevRequestTO*);
     * }
     */
    public interface ControlRequestTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ControlRequestTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$34.const$4, fi, constants$13.const$0, scope);
        }
        static ControlRequestTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$13.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ControlRequestTO$VH() {
        return constants$34.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ControlRequestTO)(void*,UInt8,IOUSBDevRequestTO*);
     * }
     */
    public static MemorySegment ControlRequestTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ControlRequestTO)(void*,UInt8,IOUSBDevRequestTO*);
     * }
     */
    public static void ControlRequestTO$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$5.set(seg, x);
    }
    public static MemorySegment ControlRequestTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlRequestTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ControlRequestTO ControlRequestTO(MemorySegment segment, Arena scope) {
        return ControlRequestTO.ofAddress(ControlRequestTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ControlRequestAsyncTO)(void*,UInt8,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public interface ControlRequestAsyncTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ControlRequestAsyncTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$35.const$0, fi, constants$28.const$4, scope);
        }
        static ControlRequestAsyncTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$29.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ControlRequestAsyncTO$VH() {
        return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ControlRequestAsyncTO)(void*,UInt8,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment ControlRequestAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ControlRequestAsyncTO)(void*,UInt8,IOUSBDevRequestTO*,IOAsyncCallback1,void*);
     * }
     */
    public static void ControlRequestAsyncTO$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$1.set(seg, x);
    }
    public static MemorySegment ControlRequestAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlRequestAsyncTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ControlRequestAsyncTO ControlRequestAsyncTO(MemorySegment segment, Arena scope) {
        return ControlRequestAsyncTO.ofAddress(ControlRequestAsyncTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ReadPipeTO)(void*,UInt8,void*,UInt32*,UInt32,UInt32);
     * }
     */
    public interface ReadPipeTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(ReadPipeTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$35.const$3, fi, constants$35.const$2, scope);
        }
        static ReadPipeTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$35.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadPipeTO$VH() {
        return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ReadPipeTO)(void*,UInt8,void*,UInt32*,UInt32,UInt32);
     * }
     */
    public static MemorySegment ReadPipeTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ReadPipeTO)(void*,UInt8,void*,UInt32*,UInt32,UInt32);
     * }
     */
    public static void ReadPipeTO$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$5.set(seg, x);
    }
    public static MemorySegment ReadPipeTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPipeTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPipeTO ReadPipeTO(MemorySegment segment, Arena scope) {
        return ReadPipeTO.ofAddress(ReadPipeTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*WritePipeTO)(void*,UInt8,void*,UInt32,UInt32,UInt32);
     * }
     */
    public interface WritePipeTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(WritePipeTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$36.const$1, fi, constants$36.const$0, scope);
        }
        static WritePipeTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$36.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WritePipeTO$VH() {
        return constants$36.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*WritePipeTO)(void*,UInt8,void*,UInt32,UInt32,UInt32);
     * }
     */
    public static MemorySegment WritePipeTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*WritePipeTO)(void*,UInt8,void*,UInt32,UInt32,UInt32);
     * }
     */
    public static void WritePipeTO$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$3.set(seg, x);
    }
    public static MemorySegment WritePipeTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePipeTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePipeTO WritePipeTO(MemorySegment segment, Arena scope) {
        return WritePipeTO.ofAddress(WritePipeTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ReadPipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public interface ReadPipeAsyncTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, int _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(ReadPipeAsyncTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$36.const$5, fi, constants$36.const$4, scope);
        }
        static ReadPipeAsyncTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, int __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$37.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReadPipeAsyncTO$VH() {
        return constants$37.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ReadPipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment ReadPipeAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ReadPipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static void ReadPipeAsyncTO$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$1.set(seg, x);
    }
    public static MemorySegment ReadPipeAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPipeAsyncTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPipeAsyncTO ReadPipeAsyncTO(MemorySegment segment, Arena scope) {
        return ReadPipeAsyncTO.ofAddress(ReadPipeAsyncTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*WritePipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public interface WritePipeAsyncTO {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, int _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(WritePipeAsyncTO fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$37.const$2, fi, constants$36.const$4, scope);
        }
        static WritePipeAsyncTO ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, int __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$37.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle WritePipeAsyncTO$VH() {
        return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*WritePipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static MemorySegment WritePipeAsyncTO$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*WritePipeAsyncTO)(void*,UInt8,void*,UInt32,UInt32,UInt32,IOAsyncCallback1,void*);
     * }
     */
    public static void WritePipeAsyncTO$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$3.set(seg, x);
    }
    public static MemorySegment WritePipeAsyncTO$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePipeAsyncTO$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePipeAsyncTO WritePipeAsyncTO(MemorySegment segment, Arena scope) {
        return WritePipeAsyncTO.ofAddress(WritePipeAsyncTO$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBInterfaceGetStringIndex)(void*,UInt8*);
     * }
     */
    public interface USBInterfaceGetStringIndex {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(USBInterfaceGetStringIndex fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$37.const$4, fi, constants$6.const$5, scope);
        }
        static USBInterfaceGetStringIndex ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBInterfaceGetStringIndex$VH() {
        return constants$37.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceGetStringIndex)(void*,UInt8*);
     * }
     */
    public static MemorySegment USBInterfaceGetStringIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceGetStringIndex)(void*,UInt8*);
     * }
     */
    public static void USBInterfaceGetStringIndex$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$5.set(seg, x);
    }
    public static MemorySegment USBInterfaceGetStringIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void USBInterfaceGetStringIndex$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBInterfaceGetStringIndex USBInterfaceGetStringIndex(MemorySegment segment, Arena scope) {
        return USBInterfaceGetStringIndex.ofAddress(USBInterfaceGetStringIndex$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*USBInterfaceOpenSeize)(void*);
     * }
     */
    public interface USBInterfaceOpenSeize {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(USBInterfaceOpenSeize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$38.const$0, fi, constants$5.const$5, scope);
        }
        static USBInterfaceOpenSeize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$6.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle USBInterfaceOpenSeize$VH() {
        return constants$38.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceOpenSeize)(void*);
     * }
     */
    public static MemorySegment USBInterfaceOpenSeize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*USBInterfaceOpenSeize)(void*);
     * }
     */
    public static void USBInterfaceOpenSeize$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$1.set(seg, x);
    }
    public static MemorySegment USBInterfaceOpenSeize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void USBInterfaceOpenSeize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBInterfaceOpenSeize USBInterfaceOpenSeize(MemorySegment segment, Arena scope) {
        return USBInterfaceOpenSeize.ofAddress(USBInterfaceOpenSeize$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*ClearPipeStallBothEnds)(void*,UInt8);
     * }
     */
    public interface ClearPipeStallBothEnds {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1);
        static MemorySegment allocate(ClearPipeStallBothEnds fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$38.const$2, fi, constants$14.const$0, scope);
        }
        static ClearPipeStallBothEnds ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ClearPipeStallBothEnds$VH() {
        return constants$38.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*ClearPipeStallBothEnds)(void*,UInt8);
     * }
     */
    public static MemorySegment ClearPipeStallBothEnds$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*ClearPipeStallBothEnds)(void*,UInt8);
     * }
     */
    public static void ClearPipeStallBothEnds$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$3.set(seg, x);
    }
    public static MemorySegment ClearPipeStallBothEnds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ClearPipeStallBothEnds$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClearPipeStallBothEnds ClearPipeStallBothEnds(MemorySegment segment, Arena scope) {
        return ClearPipeStallBothEnds.ofAddress(ClearPipeStallBothEnds$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*SetPipePolicy)(void*,UInt8,UInt16,UInt8);
     * }
     */
    public interface SetPipePolicy {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, short _x2, byte _x3);
        static MemorySegment allocate(SetPipePolicy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$38.const$5, fi, constants$38.const$4, scope);
        }
        static SetPipePolicy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, short __x2, byte __x3) -> {
                try {
                    return (int)constants$39.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPipePolicy$VH() {
        return constants$39.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*SetPipePolicy)(void*,UInt8,UInt16,UInt8);
     * }
     */
    public static MemorySegment SetPipePolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$39.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*SetPipePolicy)(void*,UInt8,UInt16,UInt8);
     * }
     */
    public static void SetPipePolicy$set(MemorySegment seg, MemorySegment x) {
        constants$39.const$1.set(seg, x);
    }
    public static MemorySegment SetPipePolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$39.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPipePolicy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$39.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPipePolicy SetPipePolicy(MemorySegment segment, Arena scope) {
        return SetPipePolicy.ofAddress(SetPipePolicy$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetBandwidthAvailable)(void*,UInt32*);
     * }
     */
    public interface GetBandwidthAvailable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBandwidthAvailable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$39.const$2, fi, constants$6.const$5, scope);
        }
        static GetBandwidthAvailable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$7.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBandwidthAvailable$VH() {
        return constants$39.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetBandwidthAvailable)(void*,UInt32*);
     * }
     */
    public static MemorySegment GetBandwidthAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$39.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetBandwidthAvailable)(void*,UInt32*);
     * }
     */
    public static void GetBandwidthAvailable$set(MemorySegment seg, MemorySegment x) {
        constants$39.const$3.set(seg, x);
    }
    public static MemorySegment GetBandwidthAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$39.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBandwidthAvailable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$39.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBandwidthAvailable GetBandwidthAvailable(MemorySegment segment, Arena scope) {
        return GetBandwidthAvailable.ofAddress(GetBandwidthAvailable$get(segment), scope);
    }
    /**
     * {@snippet :
 * IOReturn (*GetEndpointProperties)(void*,UInt8,UInt8,UInt8,UInt8*,UInt16*,UInt8*);
     * }
     */
    public interface GetEndpointProperties {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, byte _x2, byte _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(GetEndpointProperties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$39.const$5, fi, constants$39.const$4, scope);
        }
        static GetEndpointProperties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, byte __x2, byte __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)constants$40.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetEndpointProperties$VH() {
        return constants$40.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IOReturn (*GetEndpointProperties)(void*,UInt8,UInt8,UInt8,UInt8*,UInt16*,UInt8*);
     * }
     */
    public static MemorySegment GetEndpointProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IOReturn (*GetEndpointProperties)(void*,UInt8,UInt8,UInt8,UInt8*,UInt16*,UInt8*);
     * }
     */
    public static void GetEndpointProperties$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$1.set(seg, x);
    }
    public static MemorySegment GetEndpointProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetEndpointProperties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetEndpointProperties GetEndpointProperties(MemorySegment segment, Arena scope) {
        return GetEndpointProperties.ofAddress(GetEndpointProperties$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


