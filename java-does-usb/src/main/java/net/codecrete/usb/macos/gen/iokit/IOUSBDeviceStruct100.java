// Generated by jextract

package net.codecrete.usb.macos.gen.iokit;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
public class IOUSBDeviceStruct100 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_reserved"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncEventSource"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAsyncPort"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceOpen"),
        Constants$root.C_POINTER$LAYOUT.withName("USBDeviceClose"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSubClass"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProtocol"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceVendor"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceProduct"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceReleaseNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceBusPowerAvailable"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDeviceSpeed"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNumberOfConfigurations"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLocationID"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfigurationDescriptorPtr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("SetConfiguration"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBusFrameNumber"),
        Constants$root.C_POINTER$LAYOUT.withName("ResetDevice"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequest"),
        Constants$root.C_POINTER$LAYOUT.withName("DeviceRequestAsync"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateInterfaceIterator")
    ).withName("IOUSBDeviceStruct100");
    public static MemoryLayout $LAYOUT() {
        return IOUSBDeviceStruct100.$struct$LAYOUT;
    }
    static final VarHandle _reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_reserved"));
    public static VarHandle _reserved$VH() {
        return IOUSBDeviceStruct100._reserved$VH;
    }
    public static MemoryAddress _reserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100._reserved$VH.get(seg);
    }
    public static void _reserved$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100._reserved$VH.set(seg, x);
    }
    public static MemoryAddress _reserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100._reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _reserved$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100._reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("byte0"),
            Constants$root.C_CHAR$LAYOUT.withName("byte1"),
            Constants$root.C_CHAR$LAYOUT.withName("byte2"),
            Constants$root.C_CHAR$LAYOUT.withName("byte3"),
            Constants$root.C_CHAR$LAYOUT.withName("byte4"),
            Constants$root.C_CHAR$LAYOUT.withName("byte5"),
            Constants$root.C_CHAR$LAYOUT.withName("byte6"),
            Constants$root.C_CHAR$LAYOUT.withName("byte7"),
            Constants$root.C_CHAR$LAYOUT.withName("byte8"),
            Constants$root.C_CHAR$LAYOUT.withName("byte9"),
            Constants$root.C_CHAR$LAYOUT.withName("byte10"),
            Constants$root.C_CHAR$LAYOUT.withName("byte11"),
            Constants$root.C_CHAR$LAYOUT.withName("byte12"),
            Constants$root.C_CHAR$LAYOUT.withName("byte13"),
            Constants$root.C_CHAR$LAYOUT.withName("byte14"),
            Constants$root.C_CHAR$LAYOUT.withName("byte15")
        ),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOUSBDeviceStruct100.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct100.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOUSBDeviceStruct100.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOUSBDeviceStruct100.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOUSBDeviceStruct100.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOUSBDeviceStruct100.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOUSBDeviceStruct100.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor CreateDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$FUNC
    );
    public interface CreateDeviceAsyncEventSource {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(CreateDeviceAsyncEventSource fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$FUNC, session);
        }
        static CreateDeviceAsyncEventSource ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncEventSource"));
    public static VarHandle CreateDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$VH;
    }
    public static MemoryAddress CreateDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$VH.get(seg);
    }
    public static void CreateDeviceAsyncEventSource$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemoryAddress CreateDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncEventSource$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncEventSource CreateDeviceAsyncEventSource (MemorySegment segment, MemorySession session) {
        return CreateDeviceAsyncEventSource.ofAddress(CreateDeviceAsyncEventSource$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAsyncEventSource$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncEventSource$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceAsyncEventSource$FUNC
    );
    public interface GetDeviceAsyncEventSource {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetDeviceAsyncEventSource fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncEventSource.class, fi, IOUSBDeviceStruct100.GetDeviceAsyncEventSource$FUNC, session);
        }
        static GetDeviceAsyncEventSource ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAsyncEventSource$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncEventSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncEventSource"));
    public static VarHandle GetDeviceAsyncEventSource$VH() {
        return IOUSBDeviceStruct100.GetDeviceAsyncEventSource$VH;
    }
    public static MemoryAddress GetDeviceAsyncEventSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAsyncEventSource$VH.get(seg);
    }
    public static void GetDeviceAsyncEventSource$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAsyncEventSource$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAsyncEventSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAsyncEventSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncEventSource$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAsyncEventSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncEventSource GetDeviceAsyncEventSource (MemorySegment segment, MemorySession session) {
        return GetDeviceAsyncEventSource.ofAddress(GetDeviceAsyncEventSource$get(segment), session);
    }
    static final FunctionDescriptor CreateDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.CreateDeviceAsyncPort$FUNC
    );
    public interface CreateDeviceAsyncPort {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(CreateDeviceAsyncPort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateDeviceAsyncPort.class, fi, IOUSBDeviceStruct100.CreateDeviceAsyncPort$FUNC, session);
        }
        static CreateDeviceAsyncPort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.CreateDeviceAsyncPort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateDeviceAsyncPort"));
    public static VarHandle CreateDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct100.CreateDeviceAsyncPort$VH;
    }
    public static MemoryAddress CreateDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateDeviceAsyncPort$VH.get(seg);
    }
    public static void CreateDeviceAsyncPort$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemoryAddress CreateDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateDeviceAsyncPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateDeviceAsyncPort CreateDeviceAsyncPort (MemorySegment segment, MemorySession session) {
        return CreateDeviceAsyncPort.ofAddress(CreateDeviceAsyncPort$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAsyncPort$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAsyncPort$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceAsyncPort$FUNC
    );
    public interface GetDeviceAsyncPort {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(GetDeviceAsyncPort fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAsyncPort.class, fi, IOUSBDeviceStruct100.GetDeviceAsyncPort$FUNC, session);
        }
        static GetDeviceAsyncPort ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceAsyncPort$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAsyncPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAsyncPort"));
    public static VarHandle GetDeviceAsyncPort$VH() {
        return IOUSBDeviceStruct100.GetDeviceAsyncPort$VH;
    }
    public static MemoryAddress GetDeviceAsyncPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAsyncPort$VH.get(seg);
    }
    public static void GetDeviceAsyncPort$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAsyncPort$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAsyncPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAsyncPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAsyncPort$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAsyncPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAsyncPort GetDeviceAsyncPort (MemorySegment segment, MemorySession session) {
        return GetDeviceAsyncPort.ofAddress(GetDeviceAsyncPort$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceOpen$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceOpen$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.USBDeviceOpen$FUNC
    );
    public interface USBDeviceOpen {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceOpen fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceOpen.class, fi, IOUSBDeviceStruct100.USBDeviceOpen$FUNC, session);
        }
        static USBDeviceOpen ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.USBDeviceOpen$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceOpen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceOpen"));
    public static VarHandle USBDeviceOpen$VH() {
        return IOUSBDeviceStruct100.USBDeviceOpen$VH;
    }
    public static MemoryAddress USBDeviceOpen$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.USBDeviceOpen$VH.get(seg);
    }
    public static void USBDeviceOpen$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.USBDeviceOpen$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceOpen$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.USBDeviceOpen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceOpen$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.USBDeviceOpen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceOpen USBDeviceOpen (MemorySegment segment, MemorySession session) {
        return USBDeviceOpen.ofAddress(USBDeviceOpen$get(segment), session);
    }
    static final FunctionDescriptor USBDeviceClose$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle USBDeviceClose$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.USBDeviceClose$FUNC
    );
    public interface USBDeviceClose {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(USBDeviceClose fi, MemorySession session) {
            return RuntimeHelper.upcallStub(USBDeviceClose.class, fi, IOUSBDeviceStruct100.USBDeviceClose$FUNC, session);
        }
        static USBDeviceClose ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.USBDeviceClose$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle USBDeviceClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("USBDeviceClose"));
    public static VarHandle USBDeviceClose$VH() {
        return IOUSBDeviceStruct100.USBDeviceClose$VH;
    }
    public static MemoryAddress USBDeviceClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.USBDeviceClose$VH.get(seg);
    }
    public static void USBDeviceClose$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.USBDeviceClose$VH.set(seg, x);
    }
    public static MemoryAddress USBDeviceClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.USBDeviceClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void USBDeviceClose$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.USBDeviceClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static USBDeviceClose USBDeviceClose (MemorySegment segment, MemorySession session) {
        return USBDeviceClose.ofAddress(USBDeviceClose$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceClass$FUNC
    );
    public interface GetDeviceClass {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceClass fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceClass.class, fi, IOUSBDeviceStruct100.GetDeviceClass$FUNC, session);
        }
        static GetDeviceClass ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceClass$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceClass"));
    public static VarHandle GetDeviceClass$VH() {
        return IOUSBDeviceStruct100.GetDeviceClass$VH;
    }
    public static MemoryAddress GetDeviceClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceClass$VH.get(seg);
    }
    public static void GetDeviceClass$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceClass$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceClass GetDeviceClass (MemorySegment segment, MemorySession session) {
        return GetDeviceClass.ofAddress(GetDeviceClass$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceSubClass$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSubClass$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceSubClass$FUNC
    );
    public interface GetDeviceSubClass {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceSubClass fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceSubClass.class, fi, IOUSBDeviceStruct100.GetDeviceSubClass$FUNC, session);
        }
        static GetDeviceSubClass ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceSubClass$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSubClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSubClass"));
    public static VarHandle GetDeviceSubClass$VH() {
        return IOUSBDeviceStruct100.GetDeviceSubClass$VH;
    }
    public static MemoryAddress GetDeviceSubClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceSubClass$VH.get(seg);
    }
    public static void GetDeviceSubClass$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceSubClass$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceSubClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceSubClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSubClass$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceSubClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSubClass GetDeviceSubClass (MemorySegment segment, MemorySession session) {
        return GetDeviceSubClass.ofAddress(GetDeviceSubClass$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceProtocol$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProtocol$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceProtocol$FUNC
    );
    public interface GetDeviceProtocol {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceProtocol fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceProtocol.class, fi, IOUSBDeviceStruct100.GetDeviceProtocol$FUNC, session);
        }
        static GetDeviceProtocol ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceProtocol$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProtocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProtocol"));
    public static VarHandle GetDeviceProtocol$VH() {
        return IOUSBDeviceStruct100.GetDeviceProtocol$VH;
    }
    public static MemoryAddress GetDeviceProtocol$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceProtocol$VH.get(seg);
    }
    public static void GetDeviceProtocol$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceProtocol$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceProtocol$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceProtocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProtocol$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceProtocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProtocol GetDeviceProtocol (MemorySegment segment, MemorySession session) {
        return GetDeviceProtocol.ofAddress(GetDeviceProtocol$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceVendor$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceVendor$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceVendor$FUNC
    );
    public interface GetDeviceVendor {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceVendor fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceVendor.class, fi, IOUSBDeviceStruct100.GetDeviceVendor$FUNC, session);
        }
        static GetDeviceVendor ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceVendor$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceVendor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceVendor"));
    public static VarHandle GetDeviceVendor$VH() {
        return IOUSBDeviceStruct100.GetDeviceVendor$VH;
    }
    public static MemoryAddress GetDeviceVendor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceVendor$VH.get(seg);
    }
    public static void GetDeviceVendor$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceVendor$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceVendor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceVendor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceVendor$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceVendor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceVendor GetDeviceVendor (MemorySegment segment, MemorySession session) {
        return GetDeviceVendor.ofAddress(GetDeviceVendor$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceProduct$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceProduct$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceProduct$FUNC
    );
    public interface GetDeviceProduct {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceProduct fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceProduct.class, fi, IOUSBDeviceStruct100.GetDeviceProduct$FUNC, session);
        }
        static GetDeviceProduct ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceProduct$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceProduct$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceProduct"));
    public static VarHandle GetDeviceProduct$VH() {
        return IOUSBDeviceStruct100.GetDeviceProduct$VH;
    }
    public static MemoryAddress GetDeviceProduct$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceProduct$VH.get(seg);
    }
    public static void GetDeviceProduct$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceProduct$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceProduct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceProduct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceProduct$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceProduct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceProduct GetDeviceProduct (MemorySegment segment, MemorySession session) {
        return GetDeviceProduct.ofAddress(GetDeviceProduct$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceReleaseNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceReleaseNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceReleaseNumber$FUNC
    );
    public interface GetDeviceReleaseNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceReleaseNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceReleaseNumber.class, fi, IOUSBDeviceStruct100.GetDeviceReleaseNumber$FUNC, session);
        }
        static GetDeviceReleaseNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceReleaseNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceReleaseNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceReleaseNumber"));
    public static VarHandle GetDeviceReleaseNumber$VH() {
        return IOUSBDeviceStruct100.GetDeviceReleaseNumber$VH;
    }
    public static MemoryAddress GetDeviceReleaseNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceReleaseNumber$VH.get(seg);
    }
    public static void GetDeviceReleaseNumber$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceReleaseNumber$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceReleaseNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceReleaseNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceReleaseNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceReleaseNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceReleaseNumber GetDeviceReleaseNumber (MemorySegment segment, MemorySession session) {
        return GetDeviceReleaseNumber.ofAddress(GetDeviceReleaseNumber$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceAddress$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceAddress$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceAddress$FUNC
    );
    public interface GetDeviceAddress {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceAddress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceAddress.class, fi, IOUSBDeviceStruct100.GetDeviceAddress$FUNC, session);
        }
        static GetDeviceAddress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceAddress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceAddress"));
    public static VarHandle GetDeviceAddress$VH() {
        return IOUSBDeviceStruct100.GetDeviceAddress$VH;
    }
    public static MemoryAddress GetDeviceAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAddress$VH.get(seg);
    }
    public static void GetDeviceAddress$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAddress$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceAddress GetDeviceAddress (MemorySegment segment, MemorySession session) {
        return GetDeviceAddress.ofAddress(GetDeviceAddress$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceBusPowerAvailable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceBusPowerAvailable$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$FUNC
    );
    public interface GetDeviceBusPowerAvailable {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceBusPowerAvailable fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceBusPowerAvailable.class, fi, IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$FUNC, session);
        }
        static GetDeviceBusPowerAvailable ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceBusPowerAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceBusPowerAvailable"));
    public static VarHandle GetDeviceBusPowerAvailable$VH() {
        return IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$VH;
    }
    public static MemoryAddress GetDeviceBusPowerAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$VH.get(seg);
    }
    public static void GetDeviceBusPowerAvailable$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceBusPowerAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceBusPowerAvailable$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceBusPowerAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceBusPowerAvailable GetDeviceBusPowerAvailable (MemorySegment segment, MemorySession session) {
        return GetDeviceBusPowerAvailable.ofAddress(GetDeviceBusPowerAvailable$get(segment), session);
    }
    static final FunctionDescriptor GetDeviceSpeed$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDeviceSpeed$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetDeviceSpeed$FUNC
    );
    public interface GetDeviceSpeed {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetDeviceSpeed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDeviceSpeed.class, fi, IOUSBDeviceStruct100.GetDeviceSpeed$FUNC, session);
        }
        static GetDeviceSpeed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetDeviceSpeed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDeviceSpeed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDeviceSpeed"));
    public static VarHandle GetDeviceSpeed$VH() {
        return IOUSBDeviceStruct100.GetDeviceSpeed$VH;
    }
    public static MemoryAddress GetDeviceSpeed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceSpeed$VH.get(seg);
    }
    public static void GetDeviceSpeed$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceSpeed$VH.set(seg, x);
    }
    public static MemoryAddress GetDeviceSpeed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetDeviceSpeed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDeviceSpeed$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetDeviceSpeed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDeviceSpeed GetDeviceSpeed (MemorySegment segment, MemorySession session) {
        return GetDeviceSpeed.ofAddress(GetDeviceSpeed$get(segment), session);
    }
    static final FunctionDescriptor GetNumberOfConfigurations$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumberOfConfigurations$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetNumberOfConfigurations$FUNC
    );
    public interface GetNumberOfConfigurations {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetNumberOfConfigurations fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetNumberOfConfigurations.class, fi, IOUSBDeviceStruct100.GetNumberOfConfigurations$FUNC, session);
        }
        static GetNumberOfConfigurations ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetNumberOfConfigurations$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNumberOfConfigurations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNumberOfConfigurations"));
    public static VarHandle GetNumberOfConfigurations$VH() {
        return IOUSBDeviceStruct100.GetNumberOfConfigurations$VH;
    }
    public static MemoryAddress GetNumberOfConfigurations$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetNumberOfConfigurations$VH.get(seg);
    }
    public static void GetNumberOfConfigurations$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetNumberOfConfigurations$VH.set(seg, x);
    }
    public static MemoryAddress GetNumberOfConfigurations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetNumberOfConfigurations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNumberOfConfigurations$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetNumberOfConfigurations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNumberOfConfigurations GetNumberOfConfigurations (MemorySegment segment, MemorySession session) {
        return GetNumberOfConfigurations.ofAddress(GetNumberOfConfigurations$get(segment), session);
    }
    static final FunctionDescriptor GetLocationID$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLocationID$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetLocationID$FUNC
    );
    public interface GetLocationID {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetLocationID fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetLocationID.class, fi, IOUSBDeviceStruct100.GetLocationID$FUNC, session);
        }
        static GetLocationID ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetLocationID$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLocationID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLocationID"));
    public static VarHandle GetLocationID$VH() {
        return IOUSBDeviceStruct100.GetLocationID$VH;
    }
    public static MemoryAddress GetLocationID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetLocationID$VH.get(seg);
    }
    public static void GetLocationID$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetLocationID$VH.set(seg, x);
    }
    public static MemoryAddress GetLocationID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetLocationID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLocationID$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetLocationID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLocationID GetLocationID (MemorySegment segment, MemorySession session) {
        return GetLocationID.ofAddress(GetLocationID$get(segment), session);
    }
    static final FunctionDescriptor GetConfigurationDescriptorPtr$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfigurationDescriptorPtr$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$FUNC
    );
    public interface GetConfigurationDescriptorPtr {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetConfigurationDescriptorPtr fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetConfigurationDescriptorPtr.class, fi, IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$FUNC, session);
        }
        static GetConfigurationDescriptorPtr ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfigurationDescriptorPtr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfigurationDescriptorPtr"));
    public static VarHandle GetConfigurationDescriptorPtr$VH() {
        return IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$VH;
    }
    public static MemoryAddress GetConfigurationDescriptorPtr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$VH.get(seg);
    }
    public static void GetConfigurationDescriptorPtr$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$VH.set(seg, x);
    }
    public static MemoryAddress GetConfigurationDescriptorPtr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfigurationDescriptorPtr$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetConfigurationDescriptorPtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfigurationDescriptorPtr GetConfigurationDescriptorPtr (MemorySegment segment, MemorySession session) {
        return GetConfigurationDescriptorPtr.ofAddress(GetConfigurationDescriptorPtr$get(segment), session);
    }
    static final FunctionDescriptor GetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetConfiguration$FUNC
    );
    public interface GetConfiguration {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetConfiguration fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetConfiguration.class, fi, IOUSBDeviceStruct100.GetConfiguration$FUNC, session);
        }
        static GetConfiguration ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetConfiguration$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetConfiguration"));
    public static VarHandle GetConfiguration$VH() {
        return IOUSBDeviceStruct100.GetConfiguration$VH;
    }
    public static MemoryAddress GetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetConfiguration$VH.get(seg);
    }
    public static void GetConfiguration$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetConfiguration$VH.set(seg, x);
    }
    public static MemoryAddress GetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetConfiguration$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetConfiguration GetConfiguration (MemorySegment segment, MemorySession session) {
        return GetConfiguration.ofAddress(GetConfiguration$get(segment), session);
    }
    static final FunctionDescriptor SetConfiguration$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle SetConfiguration$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.SetConfiguration$FUNC
    );
    public interface SetConfiguration {

        int apply(java.lang.foreign.MemoryAddress _x0, byte _x1);
        static MemorySegment allocate(SetConfiguration fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SetConfiguration.class, fi, IOUSBDeviceStruct100.SetConfiguration$FUNC, session);
        }
        static SetConfiguration ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, byte __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.SetConfiguration$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetConfiguration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetConfiguration"));
    public static VarHandle SetConfiguration$VH() {
        return IOUSBDeviceStruct100.SetConfiguration$VH;
    }
    public static MemoryAddress SetConfiguration$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.SetConfiguration$VH.get(seg);
    }
    public static void SetConfiguration$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.SetConfiguration$VH.set(seg, x);
    }
    public static MemoryAddress SetConfiguration$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.SetConfiguration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetConfiguration$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.SetConfiguration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetConfiguration SetConfiguration (MemorySegment segment, MemorySession session) {
        return SetConfiguration.ofAddress(SetConfiguration$get(segment), session);
    }
    static final FunctionDescriptor GetBusFrameNumber$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBusFrameNumber$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.GetBusFrameNumber$FUNC
    );
    public interface GetBusFrameNumber {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(GetBusFrameNumber fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetBusFrameNumber.class, fi, IOUSBDeviceStruct100.GetBusFrameNumber$FUNC, session);
        }
        static GetBusFrameNumber ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct100.GetBusFrameNumber$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBusFrameNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBusFrameNumber"));
    public static VarHandle GetBusFrameNumber$VH() {
        return IOUSBDeviceStruct100.GetBusFrameNumber$VH;
    }
    public static MemoryAddress GetBusFrameNumber$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetBusFrameNumber$VH.get(seg);
    }
    public static void GetBusFrameNumber$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.GetBusFrameNumber$VH.set(seg, x);
    }
    public static MemoryAddress GetBusFrameNumber$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.GetBusFrameNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBusFrameNumber$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.GetBusFrameNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBusFrameNumber GetBusFrameNumber (MemorySegment segment, MemorySession session) {
        return GetBusFrameNumber.ofAddress(GetBusFrameNumber$get(segment), session);
    }
    static final FunctionDescriptor ResetDevice$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ResetDevice$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.ResetDevice$FUNC
    );
    public interface ResetDevice {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ResetDevice fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ResetDevice.class, fi, IOUSBDeviceStruct100.ResetDevice$FUNC, session);
        }
        static ResetDevice ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOUSBDeviceStruct100.ResetDevice$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ResetDevice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResetDevice"));
    public static VarHandle ResetDevice$VH() {
        return IOUSBDeviceStruct100.ResetDevice$VH;
    }
    public static MemoryAddress ResetDevice$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.ResetDevice$VH.get(seg);
    }
    public static void ResetDevice$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.ResetDevice$VH.set(seg, x);
    }
    public static MemoryAddress ResetDevice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.ResetDevice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetDevice$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.ResetDevice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResetDevice ResetDevice (MemorySegment segment, MemorySession session) {
        return ResetDevice.ofAddress(ResetDevice$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequest$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequest$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.DeviceRequest$FUNC
    );
    public interface DeviceRequest {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(DeviceRequest fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequest.class, fi, IOUSBDeviceStruct100.DeviceRequest$FUNC, session);
        }
        static DeviceRequest ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOUSBDeviceStruct100.DeviceRequest$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequest"));
    public static VarHandle DeviceRequest$VH() {
        return IOUSBDeviceStruct100.DeviceRequest$VH;
    }
    public static MemoryAddress DeviceRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.DeviceRequest$VH.get(seg);
    }
    public static void DeviceRequest$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.DeviceRequest$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.DeviceRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequest$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.DeviceRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequest DeviceRequest (MemorySegment segment, MemorySession session) {
        return DeviceRequest.ofAddress(DeviceRequest$get(segment), session);
    }
    static final FunctionDescriptor DeviceRequestAsync$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeviceRequestAsync$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.DeviceRequestAsync$FUNC
    );
    public interface DeviceRequestAsync {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(DeviceRequestAsync fi, MemorySession session) {
            return RuntimeHelper.upcallStub(DeviceRequestAsync.class, fi, IOUSBDeviceStruct100.DeviceRequestAsync$FUNC, session);
        }
        static DeviceRequestAsync ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOUSBDeviceStruct100.DeviceRequestAsync$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeviceRequestAsync$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceRequestAsync"));
    public static VarHandle DeviceRequestAsync$VH() {
        return IOUSBDeviceStruct100.DeviceRequestAsync$VH;
    }
    public static MemoryAddress DeviceRequestAsync$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.DeviceRequestAsync$VH.get(seg);
    }
    public static void DeviceRequestAsync$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.DeviceRequestAsync$VH.set(seg, x);
    }
    public static MemoryAddress DeviceRequestAsync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.DeviceRequestAsync$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceRequestAsync$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.DeviceRequestAsync$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeviceRequestAsync DeviceRequestAsync (MemorySegment segment, MemorySession session) {
        return DeviceRequestAsync.ofAddress(DeviceRequestAsync$get(segment), session);
    }
    static final FunctionDescriptor CreateInterfaceIterator$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInterfaceIterator$MH = RuntimeHelper.downcallHandle(
        IOUSBDeviceStruct100.CreateInterfaceIterator$FUNC
    );
    public interface CreateInterfaceIterator {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(CreateInterfaceIterator fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CreateInterfaceIterator.class, fi, IOUSBDeviceStruct100.CreateInterfaceIterator$FUNC, session);
        }
        static CreateInterfaceIterator ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOUSBDeviceStruct100.CreateInterfaceIterator$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInterfaceIterator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateInterfaceIterator"));
    public static VarHandle CreateInterfaceIterator$VH() {
        return IOUSBDeviceStruct100.CreateInterfaceIterator$VH;
    }
    public static MemoryAddress CreateInterfaceIterator$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateInterfaceIterator$VH.get(seg);
    }
    public static void CreateInterfaceIterator$set( MemorySegment seg, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateInterfaceIterator$VH.set(seg, x);
    }
    public static MemoryAddress CreateInterfaceIterator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOUSBDeviceStruct100.CreateInterfaceIterator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInterfaceIterator$set(MemorySegment seg, long index, MemoryAddress x) {
        IOUSBDeviceStruct100.CreateInterfaceIterator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInterfaceIterator CreateInterfaceIterator (MemorySegment segment, MemorySession session) {
        return CreateInterfaceIterator.ofAddress(CreateInterfaceIterator$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


