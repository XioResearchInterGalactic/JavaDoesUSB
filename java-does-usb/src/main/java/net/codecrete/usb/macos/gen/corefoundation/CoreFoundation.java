// Generated by jextract

package net.codecrete.usb.macos.gen.corefoundation;

import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class CoreFoundation  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CFGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFGetTypeID$MH,"CFGetTypeID");
    }
    /**
     * {@snippet :
     * CFTypeID CFGetTypeID(CFTypeRef cf);
     * }
     */
    public static long CFGetTypeID(MemorySegment cf) {
        var mh$ = CFGetTypeID$MH();
        try {
            return (long)mh$.invokeExact(cf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFRelease$MH,"CFRelease");
    }
    /**
     * {@snippet :
     * void CFRelease(CFTypeRef cf);
     * }
     */
    public static void CFRelease(MemorySegment cf) {
        var mh$ = CFRelease$MH();
        try {
            mh$.invokeExact(cf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFStringGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFStringGetTypeID$MH,"CFStringGetTypeID");
    }
    /**
     * {@snippet :
     * CFTypeID CFStringGetTypeID();
     * }
     */
    public static long CFStringGetTypeID() {
        var mh$ = CFStringGetTypeID$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFStringCreateWithCharacters$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFStringCreateWithCharacters$MH,"CFStringCreateWithCharacters");
    }
    /**
     * {@snippet :
     * CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar* chars, CFIndex numChars);
     * }
     */
    public static MemorySegment CFStringCreateWithCharacters(MemorySegment alloc, MemorySegment chars, long numChars) {
        var mh$ = CFStringCreateWithCharacters$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(alloc, chars, numChars);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFStringGetLength$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFStringGetLength$MH,"CFStringGetLength");
    }
    /**
     * {@snippet :
     * CFIndex CFStringGetLength(CFStringRef theString);
     * }
     */
    public static long CFStringGetLength(MemorySegment theString) {
        var mh$ = CFStringGetLength$MH();
        try {
            return (long)mh$.invokeExact(theString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFStringGetCharacters$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CFStringGetCharacters$MH,"CFStringGetCharacters");
    }
    /**
     * {@snippet :
     * void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar* buffer);
     * }
     */
    public static void CFStringGetCharacters(MemorySegment theString, MemorySegment range, MemorySegment buffer) {
        var mh$ = CFStringGetCharacters$MH();
        try {
            mh$.invokeExact(theString, range, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .kCFNumberSInt32Type = 3;
     * }
     */
    public static int kCFNumberSInt32Type() {
        return (int)3L;
    }
    public static MethodHandle CFNumberGetTypeID$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFNumberGetTypeID$MH,"CFNumberGetTypeID");
    }
    /**
     * {@snippet :
     * CFTypeID CFNumberGetTypeID();
     * }
     */
    public static long CFNumberGetTypeID() {
        var mh$ = CFNumberGetTypeID$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFNumberGetValue$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFNumberGetValue$MH,"CFNumberGetValue");
    }
    /**
     * {@snippet :
     * Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void* valuePtr);
     * }
     */
    public static byte CFNumberGetValue(MemorySegment number, long theType, MemorySegment valuePtr) {
        var mh$ = CFNumberGetValue$MH();
        try {
            return (byte)mh$.invokeExact(number, theType, valuePtr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFRunLoopGetCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFRunLoopGetCurrent$MH,"CFRunLoopGetCurrent");
    }
    /**
     * {@snippet :
     * CFRunLoopRef CFRunLoopGetCurrent();
     * }
     */
    public static MemorySegment CFRunLoopGetCurrent() {
        var mh$ = CFRunLoopGetCurrent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFRunLoopRun$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFRunLoopRun$MH,"CFRunLoopRun");
    }
    /**
     * {@snippet :
     * void CFRunLoopRun();
     * }
     */
    public static void CFRunLoopRun() {
        var mh$ = CFRunLoopRun$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFRunLoopAddSource$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFRunLoopAddSource$MH,"CFRunLoopAddSource");
    }
    /**
     * {@snippet :
     * void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode);
     * }
     */
    public static void CFRunLoopAddSource(MemorySegment rl, MemorySegment source, MemorySegment mode) {
        var mh$ = CFRunLoopAddSource$MH();
        try {
            mh$.invokeExact(rl, source, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFRunLoopRemoveSource$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CFRunLoopRemoveSource$MH,"CFRunLoopRemoveSource");
    }
    /**
     * {@snippet :
     * void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode);
     * }
     */
    public static void CFRunLoopRemoveSource(MemorySegment rl, MemorySegment source, MemorySegment mode) {
        var mh$ = CFRunLoopRemoveSource$MH();
        try {
            mh$.invokeExact(rl, source, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFUUIDGetUUIDBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CFUUIDGetUUIDBytes$MH,"CFUUIDGetUUIDBytes");
    }
    /**
     * {@snippet :
     * CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid);
     * }
     */
    public static MemorySegment CFUUIDGetUUIDBytes(SegmentAllocator allocator, MemorySegment uuid) {
        var mh$ = CFUUIDGetUUIDBytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, uuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CFUUIDCreateFromUUIDBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CFUUIDCreateFromUUIDBytes$MH,"CFUUIDCreateFromUUIDBytes");
    }
    /**
     * {@snippet :
     * CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);
     * }
     */
    public static MemorySegment CFUUIDCreateFromUUIDBytes(MemorySegment alloc, MemorySegment bytes) {
        var mh$ = CFUUIDCreateFromUUIDBytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(alloc, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


