// Generated by jextract

package net.codecrete.usb.linux.gen.ioctl;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class winsize {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("ws_row"),
        Constants$root.C_SHORT$LAYOUT.withName("ws_col"),
        Constants$root.C_SHORT$LAYOUT.withName("ws_xpixel"),
        Constants$root.C_SHORT$LAYOUT.withName("ws_ypixel")
    ).withName("winsize");
    public static MemoryLayout $LAYOUT() {
        return winsize.$struct$LAYOUT;
    }
    static final VarHandle ws_row$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ws_row"));
    public static VarHandle ws_row$VH() {
        return winsize.ws_row$VH;
    }
    public static short ws_row$get(MemorySegment seg) {
        return (short)winsize.ws_row$VH.get(seg);
    }
    public static void ws_row$set( MemorySegment seg, short x) {
        winsize.ws_row$VH.set(seg, x);
    }
    public static short ws_row$get(MemorySegment seg, long index) {
        return (short)winsize.ws_row$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_row$set(MemorySegment seg, long index, short x) {
        winsize.ws_row$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ws_col$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ws_col"));
    public static VarHandle ws_col$VH() {
        return winsize.ws_col$VH;
    }
    public static short ws_col$get(MemorySegment seg) {
        return (short)winsize.ws_col$VH.get(seg);
    }
    public static void ws_col$set( MemorySegment seg, short x) {
        winsize.ws_col$VH.set(seg, x);
    }
    public static short ws_col$get(MemorySegment seg, long index) {
        return (short)winsize.ws_col$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_col$set(MemorySegment seg, long index, short x) {
        winsize.ws_col$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ws_xpixel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ws_xpixel"));
    public static VarHandle ws_xpixel$VH() {
        return winsize.ws_xpixel$VH;
    }
    public static short ws_xpixel$get(MemorySegment seg) {
        return (short)winsize.ws_xpixel$VH.get(seg);
    }
    public static void ws_xpixel$set( MemorySegment seg, short x) {
        winsize.ws_xpixel$VH.set(seg, x);
    }
    public static short ws_xpixel$get(MemorySegment seg, long index) {
        return (short)winsize.ws_xpixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_xpixel$set(MemorySegment seg, long index, short x) {
        winsize.ws_xpixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ws_ypixel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ws_ypixel"));
    public static VarHandle ws_ypixel$VH() {
        return winsize.ws_ypixel$VH;
    }
    public static short ws_ypixel$get(MemorySegment seg) {
        return (short)winsize.ws_ypixel$VH.get(seg);
    }
    public static void ws_ypixel$set( MemorySegment seg, short x) {
        winsize.ws_ypixel$VH.set(seg, x);
    }
    public static short ws_ypixel$get(MemorySegment seg, long index) {
        return (short)winsize.ws_ypixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_ypixel$set(MemorySegment seg, long index, short x) {
        winsize.ws_ypixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


