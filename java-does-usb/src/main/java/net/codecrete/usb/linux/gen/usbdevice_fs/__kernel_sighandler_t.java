// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;
public interface __kernel_sighandler_t {

    void apply(int _x0);
    static MemorySegment allocate(__kernel_sighandler_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(__kernel_sighandler_t.class, fi, constants$0.__kernel_sighandler_t$FUNC, session);
    }
    static __kernel_sighandler_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int __x0) -> {
            try {
                constants$0.__kernel_sighandler_t$MH.invokeExact((Addressable)symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


