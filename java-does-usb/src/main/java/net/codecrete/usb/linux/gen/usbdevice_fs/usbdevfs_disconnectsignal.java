// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_disconnectsignal {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("signr"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("context")
    ).withName("usbdevfs_disconnectsignal");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_disconnectsignal.$struct$LAYOUT;
    }
    static final VarHandle signr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signr"));
    public static VarHandle signr$VH() {
        return usbdevfs_disconnectsignal.signr$VH;
    }
    public static int signr$get(MemorySegment seg) {
        return (int)usbdevfs_disconnectsignal.signr$VH.get(seg);
    }
    public static void signr$set( MemorySegment seg, int x) {
        usbdevfs_disconnectsignal.signr$VH.set(seg, x);
    }
    public static int signr$get(MemorySegment seg, long index) {
        return (int)usbdevfs_disconnectsignal.signr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signr$set(MemorySegment seg, long index, int x) {
        usbdevfs_disconnectsignal.signr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("context"));
    public static VarHandle context$VH() {
        return usbdevfs_disconnectsignal.context$VH;
    }
    public static MemoryAddress context$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)usbdevfs_disconnectsignal.context$VH.get(seg);
    }
    public static void context$set( MemorySegment seg, MemoryAddress x) {
        usbdevfs_disconnectsignal.context$VH.set(seg, x);
    }
    public static MemoryAddress context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)usbdevfs_disconnectsignal.context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void context$set(MemorySegment seg, long index, MemoryAddress x) {
        usbdevfs_disconnectsignal.context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


