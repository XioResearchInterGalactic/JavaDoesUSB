// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct usbdevfs_ctrltransfer {
 *     __u8 bRequestType;
 *     __u8 bRequest;
 *     __u16 wValue;
 *     __u16 wIndex;
 *     __u16 wLength;
 *     __u32 timeout;
 *     void* data;
 * };
 * }
 */
public class usbdevfs_ctrltransfer {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static VarHandle bRequestType$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 bRequestType;
     * }
     */
    public static byte bRequestType$get(MemorySegment seg) {
        return (byte)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 bRequestType;
     * }
     */
    public static void bRequestType$set(MemorySegment seg, byte x) {
        constants$0.const$1.set(seg, x);
    }
    public static byte bRequestType$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bRequestType$set(MemorySegment seg, long index, byte x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bRequest$VH() {
        return constants$0.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u8 bRequest;
     * }
     */
    public static byte bRequest$get(MemorySegment seg) {
        return (byte)constants$0.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u8 bRequest;
     * }
     */
    public static void bRequest$set(MemorySegment seg, byte x) {
        constants$0.const$2.set(seg, x);
    }
    public static byte bRequest$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bRequest$set(MemorySegment seg, long index, byte x) {
        constants$0.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wValue$VH() {
        return constants$0.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 wValue;
     * }
     */
    public static short wValue$get(MemorySegment seg) {
        return (short)constants$0.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 wValue;
     * }
     */
    public static void wValue$set(MemorySegment seg, short x) {
        constants$0.const$3.set(seg, x);
    }
    public static short wValue$get(MemorySegment seg, long index) {
        return (short)constants$0.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void wValue$set(MemorySegment seg, long index, short x) {
        constants$0.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wIndex$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 wIndex;
     * }
     */
    public static short wIndex$get(MemorySegment seg) {
        return (short)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 wIndex;
     * }
     */
    public static void wIndex$set(MemorySegment seg, short x) {
        constants$0.const$4.set(seg, x);
    }
    public static short wIndex$get(MemorySegment seg, long index) {
        return (short)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void wIndex$set(MemorySegment seg, long index, short x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle wLength$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u16 wLength;
     * }
     */
    public static short wLength$get(MemorySegment seg) {
        return (short)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u16 wLength;
     * }
     */
    public static void wLength$set(MemorySegment seg, short x) {
        constants$0.const$5.set(seg, x);
    }
    public static short wLength$get(MemorySegment seg, long index) {
        return (short)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void wLength$set(MemorySegment seg, long index, short x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timeout$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __u32 timeout;
     * }
     */
    public static int timeout$get(MemorySegment seg) {
        return (int)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __u32 timeout;
     * }
     */
    public static void timeout$set(MemorySegment seg, int x) {
        constants$1.const$0.set(seg, x);
    }
    public static int timeout$get(MemorySegment seg, long index) {
        return (int)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void timeout$set(MemorySegment seg, long index, int x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$1.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


