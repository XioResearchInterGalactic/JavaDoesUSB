// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_ioctl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ifno"),
        Constants$root.C_INT$LAYOUT.withName("ioctl_code"),
        Constants$root.C_POINTER$LAYOUT.withName("data")
    ).withName("usbdevfs_ioctl");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_ioctl.$struct$LAYOUT;
    }
    static final VarHandle ifno$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ifno"));
    public static VarHandle ifno$VH() {
        return usbdevfs_ioctl.ifno$VH;
    }
    public static int ifno$get(MemorySegment seg) {
        return (int)usbdevfs_ioctl.ifno$VH.get(seg);
    }
    public static void ifno$set( MemorySegment seg, int x) {
        usbdevfs_ioctl.ifno$VH.set(seg, x);
    }
    public static int ifno$get(MemorySegment seg, long index) {
        return (int)usbdevfs_ioctl.ifno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ifno$set(MemorySegment seg, long index, int x) {
        usbdevfs_ioctl.ifno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ioctl_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ioctl_code"));
    public static VarHandle ioctl_code$VH() {
        return usbdevfs_ioctl.ioctl_code$VH;
    }
    public static int ioctl_code$get(MemorySegment seg) {
        return (int)usbdevfs_ioctl.ioctl_code$VH.get(seg);
    }
    public static void ioctl_code$set( MemorySegment seg, int x) {
        usbdevfs_ioctl.ioctl_code$VH.set(seg, x);
    }
    public static int ioctl_code$get(MemorySegment seg, long index) {
        return (int)usbdevfs_ioctl.ioctl_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ioctl_code$set(MemorySegment seg, long index, int x) {
        usbdevfs_ioctl.ioctl_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return usbdevfs_ioctl.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)usbdevfs_ioctl.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        usbdevfs_ioctl.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)usbdevfs_ioctl.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        usbdevfs_ioctl.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


