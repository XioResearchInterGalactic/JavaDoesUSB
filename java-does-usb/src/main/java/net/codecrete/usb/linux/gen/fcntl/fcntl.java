// Generated by jextract

package net.codecrete.usb.linux.gen.fcntl;

import java.lang.foreign.Addressable;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class fcntl  {

    /* package-private */ fcntl() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _FCNTL_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int __O_LARGEFILE() {
        return (int)0L;
    }
    public static int F_GETLK64() {
        return (int)5L;
    }
    public static int F_SETLK64() {
        return (int)6L;
    }
    public static int F_SETLKW64() {
        return (int)7L;
    }
    public static int O_ACCMODE() {
        return (int)3L;
    }
    public static int O_RDONLY() {
        return (int)0L;
    }
    public static int O_WRONLY() {
        return (int)1L;
    }
    public static int O_RDWR() {
        return (int)2L;
    }
    public static int O_CREAT() {
        return (int)64L;
    }
    public static int O_EXCL() {
        return (int)128L;
    }
    public static int O_NOCTTY() {
        return (int)256L;
    }
    public static int O_TRUNC() {
        return (int)512L;
    }
    public static int O_APPEND() {
        return (int)1024L;
    }
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    public static int O_SYNC() {
        return (int)1052672L;
    }
    public static int O_ASYNC() {
        return (int)8192L;
    }
    public static int __O_DIRECTORY() {
        return (int)65536L;
    }
    public static int __O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int __O_CLOEXEC() {
        return (int)524288L;
    }
    public static int __O_DIRECT() {
        return (int)16384L;
    }
    public static int __O_NOATIME() {
        return (int)262144L;
    }
    public static int __O_PATH() {
        return (int)2097152L;
    }
    public static int __O_DSYNC() {
        return (int)4096L;
    }
    public static int F_GETLK() {
        return (int)5L;
    }
    public static int F_SETLK() {
        return (int)6L;
    }
    public static int F_SETLKW() {
        return (int)7L;
    }
    public static int F_DUPFD() {
        return (int)0L;
    }
    public static int F_GETFD() {
        return (int)1L;
    }
    public static int F_SETFD() {
        return (int)2L;
    }
    public static int F_GETFL() {
        return (int)3L;
    }
    public static int F_SETFL() {
        return (int)4L;
    }
    public static int __F_SETOWN() {
        return (int)8L;
    }
    public static int __F_GETOWN() {
        return (int)9L;
    }
    public static int __F_SETSIG() {
        return (int)10L;
    }
    public static int __F_GETSIG() {
        return (int)11L;
    }
    public static int __F_SETOWN_EX() {
        return (int)15L;
    }
    public static int __F_GETOWN_EX() {
        return (int)16L;
    }
    public static int F_DUPFD_CLOEXEC() {
        return (int)1030L;
    }
    public static int FD_CLOEXEC() {
        return (int)1L;
    }
    public static int F_RDLCK() {
        return (int)0L;
    }
    public static int F_WRLCK() {
        return (int)1L;
    }
    public static int F_UNLCK() {
        return (int)2L;
    }
    public static int F_EXLCK() {
        return (int)4L;
    }
    public static int F_SHLCK() {
        return (int)8L;
    }
    public static int LOCK_SH() {
        return (int)1L;
    }
    public static int LOCK_EX() {
        return (int)2L;
    }
    public static int LOCK_NB() {
        return (int)4L;
    }
    public static int LOCK_UN() {
        return (int)8L;
    }
    public static int __POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int __POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int POSIX_FADV_NORMAL() {
        return (int)0L;
    }
    public static int POSIX_FADV_RANDOM() {
        return (int)1L;
    }
    public static int POSIX_FADV_SEQUENTIAL() {
        return (int)2L;
    }
    public static int POSIX_FADV_WILLNEED() {
        return (int)3L;
    }
    public static int AT_SYMLINK_NOFOLLOW() {
        return (int)256L;
    }
    public static int AT_REMOVEDIR() {
        return (int)512L;
    }
    public static int AT_SYMLINK_FOLLOW() {
        return (int)1024L;
    }
    public static int AT_EACCESS() {
        return (int)512L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    public static int __S_IFMT() {
        return (int)61440L;
    }
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    public static int __S_IFREG() {
        return (int)32768L;
    }
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    public static int __S_ISUID() {
        return (int)2048L;
    }
    public static int __S_ISGID() {
        return (int)1024L;
    }
    public static int __S_ISVTX() {
        return (int)512L;
    }
    public static int __S_IREAD() {
        return (int)256L;
    }
    public static int __S_IWRITE() {
        return (int)128L;
    }
    public static int __S_IEXEC() {
        return (int)64L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fcntl$MH,"fcntl");
    }
    public static int fcntl ( int __fd,  int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$0.open$MH,"open");
    }
    public static int open ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.openat$MH,"openat");
    }
    public static int openat ( int __fd,  Addressable __file,  int __oflag, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.creat$MH,"creat");
    }
    public static int creat ( Addressable __file,  int __mode) {
        var mh$ = creat$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$0.lockf$MH,"lockf");
    }
    public static int lockf ( int __fd,  int __cmd,  long __len) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$0.posix_fadvise$MH,"posix_fadvise");
    }
    public static int posix_fadvise ( int __fd,  long __offset,  long __len,  int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$1.posix_fallocate$MH,"posix_fallocate");
    }
    public static int posix_fallocate ( int __fd,  long __offset,  long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int O_NDELAY() {
        return (int)2048L;
    }
    public static int O_FSYNC() {
        return (int)1052672L;
    }
    public static int __O_TMPFILE() {
        return (int)4259840L;
    }
    public static int O_DIRECTORY() {
        return (int)65536L;
    }
    public static int O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int O_CLOEXEC() {
        return (int)524288L;
    }
    public static int O_DSYNC() {
        return (int)4096L;
    }
    public static int O_RSYNC() {
        return (int)1052672L;
    }
    public static int F_SETOWN() {
        return (int)8L;
    }
    public static int F_GETOWN() {
        return (int)9L;
    }
    public static int FAPPEND() {
        return (int)1024L;
    }
    public static int FFSYNC() {
        return (int)1052672L;
    }
    public static int FASYNC() {
        return (int)8192L;
    }
    public static int FNONBLOCK() {
        return (int)2048L;
    }
    public static int FNDELAY() {
        return (int)2048L;
    }
    public static int POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int AT_FDCWD() {
        return (int)-100L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    public static int S_IFMT() {
        return (int)61440L;
    }
    public static int S_IFDIR() {
        return (int)16384L;
    }
    public static int S_IFCHR() {
        return (int)8192L;
    }
    public static int S_IFBLK() {
        return (int)24576L;
    }
    public static int S_IFREG() {
        return (int)32768L;
    }
    public static int S_IFIFO() {
        return (int)4096L;
    }
    public static int S_IFLNK() {
        return (int)40960L;
    }
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    public static int S_ISUID() {
        return (int)2048L;
    }
    public static int S_ISGID() {
        return (int)1024L;
    }
    public static int S_ISVTX() {
        return (int)512L;
    }
    public static int S_IRUSR() {
        return (int)256L;
    }
    public static int S_IWUSR() {
        return (int)128L;
    }
    public static int S_IXUSR() {
        return (int)64L;
    }
    public static int S_IRWXU() {
        return (int)448L;
    }
    public static int S_IRGRP() {
        return (int)32L;
    }
    public static int S_IWGRP() {
        return (int)16L;
    }
    public static int S_IXGRP() {
        return (int)8L;
    }
    public static int S_IRWXG() {
        return (int)56L;
    }
    public static int S_IROTH() {
        return (int)4L;
    }
    public static int S_IWOTH() {
        return (int)2L;
    }
    public static int S_IXOTH() {
        return (int)1L;
    }
    public static int S_IRWXO() {
        return (int)7L;
    }
}


