// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_streams {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_streams"),
        Constants$root.C_INT$LAYOUT.withName("num_eps"),
        MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("eps")
    ).withName("usbdevfs_streams");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_streams.$struct$LAYOUT;
    }
    static final VarHandle num_streams$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_streams"));
    public static VarHandle num_streams$VH() {
        return usbdevfs_streams.num_streams$VH;
    }
    public static int num_streams$get(MemorySegment seg) {
        return (int)usbdevfs_streams.num_streams$VH.get(seg);
    }
    public static void num_streams$set( MemorySegment seg, int x) {
        usbdevfs_streams.num_streams$VH.set(seg, x);
    }
    public static int num_streams$get(MemorySegment seg, long index) {
        return (int)usbdevfs_streams.num_streams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_streams$set(MemorySegment seg, long index, int x) {
        usbdevfs_streams.num_streams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_eps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_eps"));
    public static VarHandle num_eps$VH() {
        return usbdevfs_streams.num_eps$VH;
    }
    public static int num_eps$get(MemorySegment seg) {
        return (int)usbdevfs_streams.num_eps$VH.get(seg);
    }
    public static void num_eps$set( MemorySegment seg, int x) {
        usbdevfs_streams.num_eps$VH.set(seg, x);
    }
    public static int num_eps$get(MemorySegment seg, long index) {
        return (int)usbdevfs_streams.num_eps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_eps$set(MemorySegment seg, long index, int x) {
        usbdevfs_streams.num_eps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


