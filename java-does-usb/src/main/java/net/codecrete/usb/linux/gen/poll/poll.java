// Generated by jextract

package net.codecrete.usb.linux.gen.poll;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class poll  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define POLLIN 1
     * }
     */
    public static int POLLIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define POLLOUT 4
     * }
     */
    public static int POLLOUT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define POLLERR 8
     * }
     */
    public static int POLLERR() {
        return (int)8L;
    }
    public static MethodHandle poll$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"poll");
    }
    /**
     * {@snippet :
     * int poll(struct pollfd* __fds, nfds_t __nfds, int __timeout);
     * }
     */
    public static int poll(MemorySegment __fds, long __nfds, int __timeout) {
        var mh$ = poll$MH();
        try {
            return (int)mh$.invokeExact(__fds, __nfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


