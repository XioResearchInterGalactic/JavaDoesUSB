// Generated by jextract

package net.codecrete.usb.linux.gen.ioctl;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class termio {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("c_iflag"),
        Constants$root.C_SHORT$LAYOUT.withName("c_oflag"),
        Constants$root.C_SHORT$LAYOUT.withName("c_cflag"),
        Constants$root.C_SHORT$LAYOUT.withName("c_lflag"),
        Constants$root.C_CHAR$LAYOUT.withName("c_line"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("c_cc"),
        MemoryLayout.paddingLayout(8)
    ).withName("termio");
    public static MemoryLayout $LAYOUT() {
        return termio.$struct$LAYOUT;
    }
    static final VarHandle c_iflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_iflag"));
    public static VarHandle c_iflag$VH() {
        return termio.c_iflag$VH;
    }
    public static short c_iflag$get(MemorySegment seg) {
        return (short)termio.c_iflag$VH.get(seg);
    }
    public static void c_iflag$set( MemorySegment seg, short x) {
        termio.c_iflag$VH.set(seg, x);
    }
    public static short c_iflag$get(MemorySegment seg, long index) {
        return (short)termio.c_iflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_iflag$set(MemorySegment seg, long index, short x) {
        termio.c_iflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_oflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_oflag"));
    public static VarHandle c_oflag$VH() {
        return termio.c_oflag$VH;
    }
    public static short c_oflag$get(MemorySegment seg) {
        return (short)termio.c_oflag$VH.get(seg);
    }
    public static void c_oflag$set( MemorySegment seg, short x) {
        termio.c_oflag$VH.set(seg, x);
    }
    public static short c_oflag$get(MemorySegment seg, long index) {
        return (short)termio.c_oflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_oflag$set(MemorySegment seg, long index, short x) {
        termio.c_oflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_cflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_cflag"));
    public static VarHandle c_cflag$VH() {
        return termio.c_cflag$VH;
    }
    public static short c_cflag$get(MemorySegment seg) {
        return (short)termio.c_cflag$VH.get(seg);
    }
    public static void c_cflag$set( MemorySegment seg, short x) {
        termio.c_cflag$VH.set(seg, x);
    }
    public static short c_cflag$get(MemorySegment seg, long index) {
        return (short)termio.c_cflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_cflag$set(MemorySegment seg, long index, short x) {
        termio.c_cflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_lflag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_lflag"));
    public static VarHandle c_lflag$VH() {
        return termio.c_lflag$VH;
    }
    public static short c_lflag$get(MemorySegment seg) {
        return (short)termio.c_lflag$VH.get(seg);
    }
    public static void c_lflag$set( MemorySegment seg, short x) {
        termio.c_lflag$VH.set(seg, x);
    }
    public static short c_lflag$get(MemorySegment seg, long index) {
        return (short)termio.c_lflag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_lflag$set(MemorySegment seg, long index, short x) {
        termio.c_lflag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c_line"));
    public static VarHandle c_line$VH() {
        return termio.c_line$VH;
    }
    public static byte c_line$get(MemorySegment seg) {
        return (byte)termio.c_line$VH.get(seg);
    }
    public static void c_line$set( MemorySegment seg, byte x) {
        termio.c_line$VH.set(seg, x);
    }
    public static byte c_line$get(MemorySegment seg, long index) {
        return (byte)termio.c_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c_line$set(MemorySegment seg, long index, byte x) {
        termio.c_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment c_cc$slice(MemorySegment seg) {
        return seg.asSlice(9, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


