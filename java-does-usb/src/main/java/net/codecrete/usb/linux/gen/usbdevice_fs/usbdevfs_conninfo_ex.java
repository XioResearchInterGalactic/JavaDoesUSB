// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_conninfo_ex {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("size"),
        Constants$root.C_INT$LAYOUT.withName("busnum"),
        Constants$root.C_INT$LAYOUT.withName("devnum"),
        Constants$root.C_INT$LAYOUT.withName("speed"),
        Constants$root.C_CHAR$LAYOUT.withName("num_ports"),
        MemoryLayout.sequenceLayout(7, Constants$root.C_CHAR$LAYOUT).withName("ports")
    ).withName("usbdevfs_conninfo_ex");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_conninfo_ex.$struct$LAYOUT;
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return usbdevfs_conninfo_ex.size$VH;
    }
    public static int size$get(MemorySegment seg) {
        return (int)usbdevfs_conninfo_ex.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, int x) {
        usbdevfs_conninfo_ex.size$VH.set(seg, x);
    }
    public static int size$get(MemorySegment seg, long index) {
        return (int)usbdevfs_conninfo_ex.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, int x) {
        usbdevfs_conninfo_ex.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle busnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("busnum"));
    public static VarHandle busnum$VH() {
        return usbdevfs_conninfo_ex.busnum$VH;
    }
    public static int busnum$get(MemorySegment seg) {
        return (int)usbdevfs_conninfo_ex.busnum$VH.get(seg);
    }
    public static void busnum$set( MemorySegment seg, int x) {
        usbdevfs_conninfo_ex.busnum$VH.set(seg, x);
    }
    public static int busnum$get(MemorySegment seg, long index) {
        return (int)usbdevfs_conninfo_ex.busnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void busnum$set(MemorySegment seg, long index, int x) {
        usbdevfs_conninfo_ex.busnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle devnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("devnum"));
    public static VarHandle devnum$VH() {
        return usbdevfs_conninfo_ex.devnum$VH;
    }
    public static int devnum$get(MemorySegment seg) {
        return (int)usbdevfs_conninfo_ex.devnum$VH.get(seg);
    }
    public static void devnum$set( MemorySegment seg, int x) {
        usbdevfs_conninfo_ex.devnum$VH.set(seg, x);
    }
    public static int devnum$get(MemorySegment seg, long index) {
        return (int)usbdevfs_conninfo_ex.devnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void devnum$set(MemorySegment seg, long index, int x) {
        usbdevfs_conninfo_ex.devnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle speed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("speed"));
    public static VarHandle speed$VH() {
        return usbdevfs_conninfo_ex.speed$VH;
    }
    public static int speed$get(MemorySegment seg) {
        return (int)usbdevfs_conninfo_ex.speed$VH.get(seg);
    }
    public static void speed$set( MemorySegment seg, int x) {
        usbdevfs_conninfo_ex.speed$VH.set(seg, x);
    }
    public static int speed$get(MemorySegment seg, long index) {
        return (int)usbdevfs_conninfo_ex.speed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void speed$set(MemorySegment seg, long index, int x) {
        usbdevfs_conninfo_ex.speed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_ports$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_ports"));
    public static VarHandle num_ports$VH() {
        return usbdevfs_conninfo_ex.num_ports$VH;
    }
    public static byte num_ports$get(MemorySegment seg) {
        return (byte)usbdevfs_conninfo_ex.num_ports$VH.get(seg);
    }
    public static void num_ports$set( MemorySegment seg, byte x) {
        usbdevfs_conninfo_ex.num_ports$VH.set(seg, x);
    }
    public static byte num_ports$get(MemorySegment seg, long index) {
        return (byte)usbdevfs_conninfo_ex.num_ports$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_ports$set(MemorySegment seg, long index, byte x) {
        usbdevfs_conninfo_ex.num_ports$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ports$slice(MemorySegment seg) {
        return seg.asSlice(17, 7);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


