// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_connectinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("devnum"),
        Constants$root.C_CHAR$LAYOUT.withName("slow"),
        MemoryLayout.paddingLayout(24)
    ).withName("usbdevfs_connectinfo");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_connectinfo.$struct$LAYOUT;
    }
    static final VarHandle devnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("devnum"));
    public static VarHandle devnum$VH() {
        return usbdevfs_connectinfo.devnum$VH;
    }
    public static int devnum$get(MemorySegment seg) {
        return (int)usbdevfs_connectinfo.devnum$VH.get(seg);
    }
    public static void devnum$set( MemorySegment seg, int x) {
        usbdevfs_connectinfo.devnum$VH.set(seg, x);
    }
    public static int devnum$get(MemorySegment seg, long index) {
        return (int)usbdevfs_connectinfo.devnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void devnum$set(MemorySegment seg, long index, int x) {
        usbdevfs_connectinfo.devnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle slow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("slow"));
    public static VarHandle slow$VH() {
        return usbdevfs_connectinfo.slow$VH;
    }
    public static byte slow$get(MemorySegment seg) {
        return (byte)usbdevfs_connectinfo.slow$VH.get(seg);
    }
    public static void slow$set( MemorySegment seg, byte x) {
        usbdevfs_connectinfo.slow$VH.set(seg, x);
    }
    public static byte slow$get(MemorySegment seg, long index) {
        return (byte)usbdevfs_connectinfo.slow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void slow$set(MemorySegment seg, long index, byte x) {
        usbdevfs_connectinfo.slow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


