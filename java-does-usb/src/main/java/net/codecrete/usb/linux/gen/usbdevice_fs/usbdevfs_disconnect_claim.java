// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct usbdevfs_disconnect_claim {
 *     unsigned int interface;
 *     unsigned int flags;
 *     char driver[256];
 * };
 * }
 */
public class usbdevfs_disconnect_claim {

    public static MemoryLayout $LAYOUT() {
        return constants$5.const$4;
    }
    public static VarHandle interface_$VH() {
        return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int interface;
     * }
     */
    public static int interface_$get(MemorySegment seg) {
        return (int)constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int interface;
     * }
     */
    public static void interface_$set(MemorySegment seg, int x) {
        constants$5.const$5.set(seg, x);
    }
    public static int interface_$get(MemorySegment seg, long index) {
        return (int)constants$5.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_$set(MemorySegment seg, long index, int x) {
        constants$5.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$6.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$6.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$6.const$0.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$6.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$6.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment driver$slice(MemorySegment seg) {
        return seg.asSlice(8, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


