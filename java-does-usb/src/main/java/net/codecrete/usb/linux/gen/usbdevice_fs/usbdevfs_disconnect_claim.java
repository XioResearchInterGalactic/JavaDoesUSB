// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct usbdevfs_disconnect_claim {
 *     unsigned int interface;
 *     unsigned int flags;
 *     char driver[256];
 * };
 * }
 */
public class usbdevfs_disconnect_claim {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("interface"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.sequenceLayout(256, Constants$root.C_CHAR$LAYOUT).withName("driver")
    ).withName("usbdevfs_disconnect_claim");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_disconnect_claim.$struct$LAYOUT;
    }
    static final VarHandle interface_$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("interface"));
    public static VarHandle interface_$VH() {
        return usbdevfs_disconnect_claim.interface_$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int interface;
     * }
     */
    public static int interface_$get(MemorySegment seg) {
        return (int)usbdevfs_disconnect_claim.interface_$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int interface;
     * }
     */
    public static void interface_$set(MemorySegment seg, int x) {
        usbdevfs_disconnect_claim.interface_$VH.set(seg, x);
    }
    public static int interface_$get(MemorySegment seg, long index) {
        return (int)usbdevfs_disconnect_claim.interface_$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void interface_$set(MemorySegment seg, long index, int x) {
        usbdevfs_disconnect_claim.interface_$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return usbdevfs_disconnect_claim.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)usbdevfs_disconnect_claim.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        usbdevfs_disconnect_claim.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)usbdevfs_disconnect_claim.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        usbdevfs_disconnect_claim.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment driver$slice(MemorySegment seg) {
        return seg.asSlice(8, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


