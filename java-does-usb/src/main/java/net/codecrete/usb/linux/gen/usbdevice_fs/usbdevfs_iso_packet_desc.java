// Generated by jextract

package net.codecrete.usb.linux.gen.usbdevice_fs;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class usbdevfs_iso_packet_desc {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("length"),
        Constants$root.C_INT$LAYOUT.withName("actual_length"),
        Constants$root.C_INT$LAYOUT.withName("status")
    ).withName("usbdevfs_iso_packet_desc");
    public static MemoryLayout $LAYOUT() {
        return usbdevfs_iso_packet_desc.$struct$LAYOUT;
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return usbdevfs_iso_packet_desc.length$VH;
    }
    public static int length$get(MemorySegment seg) {
        return (int)usbdevfs_iso_packet_desc.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, int x) {
        usbdevfs_iso_packet_desc.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)usbdevfs_iso_packet_desc.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        usbdevfs_iso_packet_desc.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle actual_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("actual_length"));
    public static VarHandle actual_length$VH() {
        return usbdevfs_iso_packet_desc.actual_length$VH;
    }
    public static int actual_length$get(MemorySegment seg) {
        return (int)usbdevfs_iso_packet_desc.actual_length$VH.get(seg);
    }
    public static void actual_length$set( MemorySegment seg, int x) {
        usbdevfs_iso_packet_desc.actual_length$VH.set(seg, x);
    }
    public static int actual_length$get(MemorySegment seg, long index) {
        return (int)usbdevfs_iso_packet_desc.actual_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void actual_length$set(MemorySegment seg, long index, int x) {
        usbdevfs_iso_packet_desc.actual_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle status$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("status"));
    public static VarHandle status$VH() {
        return usbdevfs_iso_packet_desc.status$VH;
    }
    public static int status$get(MemorySegment seg) {
        return (int)usbdevfs_iso_packet_desc.status$VH.get(seg);
    }
    public static void status$set( MemorySegment seg, int x) {
        usbdevfs_iso_packet_desc.status$VH.set(seg, x);
    }
    public static int status$get(MemorySegment seg, long index) {
        return (int)usbdevfs_iso_packet_desc.status$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void status$set(MemorySegment seg, long index, int x) {
        usbdevfs_iso_packet_desc.status$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


