// Generated by jextract

package net.codecrete.usb.windows.gen.usbioctl;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class _USB_NODE_CONNECTION_INFORMATION_EX {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ConnectionIndex"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("bLength"),
            Constants$root.C_CHAR$LAYOUT.withName("bDescriptorType"),
            Constants$root.C_SHORT$LAYOUT.withName("bcdUSB"),
            Constants$root.C_CHAR$LAYOUT.withName("bDeviceClass"),
            Constants$root.C_CHAR$LAYOUT.withName("bDeviceSubClass"),
            Constants$root.C_CHAR$LAYOUT.withName("bDeviceProtocol"),
            Constants$root.C_CHAR$LAYOUT.withName("bMaxPacketSize0"),
            Constants$root.C_SHORT$LAYOUT.withName("idVendor"),
            Constants$root.C_SHORT$LAYOUT.withName("idProduct"),
            Constants$root.C_SHORT$LAYOUT.withName("bcdDevice"),
            Constants$root.C_CHAR$LAYOUT.withName("iManufacturer"),
            Constants$root.C_CHAR$LAYOUT.withName("iProduct"),
            Constants$root.C_CHAR$LAYOUT.withName("iSerialNumber"),
            Constants$root.C_CHAR$LAYOUT.withName("bNumConfigurations")
        ).withName("DeviceDescriptor"),
        Constants$root.C_CHAR$LAYOUT.withName("CurrentConfigurationValue"),
        Constants$root.C_CHAR$LAYOUT.withName("Speed"),
        Constants$root.C_CHAR$LAYOUT.withName("DeviceIsHub"),
        Constants$root.C_SHORT$LAYOUT.withName("DeviceAddress"),
        Constants$root.C_LONG$LAYOUT.withName("NumberOfOpenPipes"),
        Constants$root.C_LONG$LAYOUT.withName("ConnectionStatus"),
        MemoryLayout.sequenceLayout(0, MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("bLength"),
                Constants$root.C_CHAR$LAYOUT.withName("bDescriptorType"),
                Constants$root.C_CHAR$LAYOUT.withName("bEndpointAddress"),
                Constants$root.C_CHAR$LAYOUT.withName("bmAttributes"),
                Constants$root.C_SHORT$LAYOUT.withName("wMaxPacketSize"),
                Constants$root.C_CHAR$LAYOUT.withName("bInterval")
            ).withName("EndpointDescriptor"),
            Constants$root.C_LONG$LAYOUT.withName("ScheduleOffset")
        ).withName("_USB_PIPE_INFO")).withName("PipeList")
    ).withName("_USB_NODE_CONNECTION_INFORMATION_EX");
    public static MemoryLayout $LAYOUT() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.$struct$LAYOUT;
    }
    static final VarHandle ConnectionIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ConnectionIndex"));
    public static VarHandle ConnectionIndex$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionIndex$VH;
    }
    public static int ConnectionIndex$get(MemorySegment seg) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.ConnectionIndex$VH.get(seg);
    }
    public static void ConnectionIndex$set( MemorySegment seg, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionIndex$VH.set(seg, x);
    }
    public static int ConnectionIndex$get(MemorySegment seg, long index) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.ConnectionIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ConnectionIndex$set(MemorySegment seg, long index, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DeviceDescriptor$slice(MemorySegment seg) {
        return seg.asSlice(4, 18);
    }
    static final VarHandle CurrentConfigurationValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CurrentConfigurationValue"));
    public static VarHandle CurrentConfigurationValue$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.CurrentConfigurationValue$VH;
    }
    public static byte CurrentConfigurationValue$get(MemorySegment seg) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.CurrentConfigurationValue$VH.get(seg);
    }
    public static void CurrentConfigurationValue$set( MemorySegment seg, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.CurrentConfigurationValue$VH.set(seg, x);
    }
    public static byte CurrentConfigurationValue$get(MemorySegment seg, long index) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.CurrentConfigurationValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CurrentConfigurationValue$set(MemorySegment seg, long index, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.CurrentConfigurationValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Speed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Speed"));
    public static VarHandle Speed$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.Speed$VH;
    }
    public static byte Speed$get(MemorySegment seg) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.Speed$VH.get(seg);
    }
    public static void Speed$set( MemorySegment seg, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.Speed$VH.set(seg, x);
    }
    public static byte Speed$get(MemorySegment seg, long index) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.Speed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Speed$set(MemorySegment seg, long index, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.Speed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceIsHub$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceIsHub"));
    public static VarHandle DeviceIsHub$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.DeviceIsHub$VH;
    }
    public static byte DeviceIsHub$get(MemorySegment seg) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.DeviceIsHub$VH.get(seg);
    }
    public static void DeviceIsHub$set( MemorySegment seg, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.DeviceIsHub$VH.set(seg, x);
    }
    public static byte DeviceIsHub$get(MemorySegment seg, long index) {
        return (byte)_USB_NODE_CONNECTION_INFORMATION_EX.DeviceIsHub$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceIsHub$set(MemorySegment seg, long index, byte x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.DeviceIsHub$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeviceAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceAddress"));
    public static VarHandle DeviceAddress$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.DeviceAddress$VH;
    }
    public static short DeviceAddress$get(MemorySegment seg) {
        return (short)_USB_NODE_CONNECTION_INFORMATION_EX.DeviceAddress$VH.get(seg);
    }
    public static void DeviceAddress$set( MemorySegment seg, short x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.DeviceAddress$VH.set(seg, x);
    }
    public static short DeviceAddress$get(MemorySegment seg, long index) {
        return (short)_USB_NODE_CONNECTION_INFORMATION_EX.DeviceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceAddress$set(MemorySegment seg, long index, short x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.DeviceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfOpenPipes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfOpenPipes"));
    public static VarHandle NumberOfOpenPipes$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.NumberOfOpenPipes$VH;
    }
    public static int NumberOfOpenPipes$get(MemorySegment seg) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.NumberOfOpenPipes$VH.get(seg);
    }
    public static void NumberOfOpenPipes$set( MemorySegment seg, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.NumberOfOpenPipes$VH.set(seg, x);
    }
    public static int NumberOfOpenPipes$get(MemorySegment seg, long index) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.NumberOfOpenPipes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfOpenPipes$set(MemorySegment seg, long index, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.NumberOfOpenPipes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ConnectionStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ConnectionStatus"));
    public static VarHandle ConnectionStatus$VH() {
        return _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionStatus$VH;
    }
    public static int ConnectionStatus$get(MemorySegment seg) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.ConnectionStatus$VH.get(seg);
    }
    public static void ConnectionStatus$set( MemorySegment seg, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionStatus$VH.set(seg, x);
    }
    public static int ConnectionStatus$get(MemorySegment seg, long index) {
        return (int)_USB_NODE_CONNECTION_INFORMATION_EX.ConnectionStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ConnectionStatus$set(MemorySegment seg, long index, int x) {
        _USB_NODE_CONNECTION_INFORMATION_EX.ConnectionStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


