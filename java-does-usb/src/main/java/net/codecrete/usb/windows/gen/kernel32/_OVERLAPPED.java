// Generated by jextract

package net.codecrete.usb.windows.gen.kernel32;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _OVERLAPPED {
 *     ULONG_PTR Internal;
 *     ULONG_PTR InternalHigh;
 *     union {
 *         struct {
 *             DWORD Offset;
 *             DWORD OffsetHigh;
 *         };
 *         PVOID Pointer;
 *     };
 *     HANDLE hEvent;
 * };
 * }
 */
public class _OVERLAPPED {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("Internal"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("InternalHigh"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Offset"),
                Constants$root.C_LONG$LAYOUT.withName("OffsetHigh")
            ).withName("$anon$0"),
            Constants$root.C_POINTER$LAYOUT.withName("Pointer")
        ).withName("$anon$0"),
        Constants$root.C_POINTER$LAYOUT.withName("hEvent")
    ).withName("_OVERLAPPED");
    public static MemoryLayout $LAYOUT() {
        return _OVERLAPPED.$struct$LAYOUT;
    }
    static final VarHandle Internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Internal"));
    public static VarHandle Internal$VH() {
        return _OVERLAPPED.Internal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR Internal;
     * }
     */
    public static long Internal$get(MemorySegment seg) {
        return (long)_OVERLAPPED.Internal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR Internal;
     * }
     */
    public static void Internal$set(MemorySegment seg, long x) {
        _OVERLAPPED.Internal$VH.set(seg, x);
    }
    public static long Internal$get(MemorySegment seg, long index) {
        return (long)_OVERLAPPED.Internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Internal$set(MemorySegment seg, long index, long x) {
        _OVERLAPPED.Internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle InternalHigh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InternalHigh"));
    public static VarHandle InternalHigh$VH() {
        return _OVERLAPPED.InternalHigh$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR InternalHigh;
     * }
     */
    public static long InternalHigh$get(MemorySegment seg) {
        return (long)_OVERLAPPED.InternalHigh$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR InternalHigh;
     * }
     */
    public static void InternalHigh$set(MemorySegment seg, long x) {
        _OVERLAPPED.InternalHigh$VH.set(seg, x);
    }
    public static long InternalHigh$get(MemorySegment seg, long index) {
        return (long)_OVERLAPPED.InternalHigh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InternalHigh$set(MemorySegment seg, long index, long x) {
        _OVERLAPPED.InternalHigh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Offset"));
    public static VarHandle Offset$VH() {
        return _OVERLAPPED.Offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Offset;
     * }
     */
    public static int Offset$get(MemorySegment seg) {
        return (int)_OVERLAPPED.Offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Offset;
     * }
     */
    public static void Offset$set(MemorySegment seg, int x) {
        _OVERLAPPED.Offset$VH.set(seg, x);
    }
    public static int Offset$get(MemorySegment seg, long index) {
        return (int)_OVERLAPPED.Offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Offset$set(MemorySegment seg, long index, int x) {
        _OVERLAPPED.Offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OffsetHigh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("OffsetHigh"));
    public static VarHandle OffsetHigh$VH() {
        return _OVERLAPPED.OffsetHigh$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OffsetHigh;
     * }
     */
    public static int OffsetHigh$get(MemorySegment seg) {
        return (int)_OVERLAPPED.OffsetHigh$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OffsetHigh;
     * }
     */
    public static void OffsetHigh$set(MemorySegment seg, int x) {
        _OVERLAPPED.OffsetHigh$VH.set(seg, x);
    }
    public static int OffsetHigh$get(MemorySegment seg, long index) {
        return (int)_OVERLAPPED.OffsetHigh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OffsetHigh$set(MemorySegment seg, long index, int x) {
        _OVERLAPPED.OffsetHigh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Pointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Pointer"));
    public static VarHandle Pointer$VH() {
        return _OVERLAPPED.Pointer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID Pointer;
     * }
     */
    public static MemorySegment Pointer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_OVERLAPPED.Pointer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID Pointer;
     * }
     */
    public static void Pointer$set(MemorySegment seg, MemorySegment x) {
        _OVERLAPPED.Pointer$VH.set(seg, x);
    }
    public static MemorySegment Pointer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_OVERLAPPED.Pointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Pointer$set(MemorySegment seg, long index, MemorySegment x) {
        _OVERLAPPED.Pointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hEvent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hEvent"));
    public static VarHandle hEvent$VH() {
        return _OVERLAPPED.hEvent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hEvent;
     * }
     */
    public static MemorySegment hEvent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_OVERLAPPED.hEvent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hEvent;
     * }
     */
    public static void hEvent$set(MemorySegment seg, MemorySegment x) {
        _OVERLAPPED.hEvent$VH.set(seg, x);
    }
    public static MemorySegment hEvent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_OVERLAPPED.hEvent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hEvent$set(MemorySegment seg, long index, MemorySegment x) {
        _OVERLAPPED.hEvent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


