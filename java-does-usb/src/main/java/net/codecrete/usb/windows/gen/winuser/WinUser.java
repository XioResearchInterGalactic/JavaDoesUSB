// Generated by jextract

package net.codecrete.usb.windows.gen.winuser;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class WinUser  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define DEVICE_NOTIFY_WINDOW_HANDLE 0
     * }
     */
    public static int DEVICE_NOTIFY_WINDOW_HANDLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef void* HPOWERNOTIFY;
     * }
     */
    public static final AddressLayout HPOWERNOTIFY = RuntimeHelper.POINTER;
    public static MethodHandle RegisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"RegisterSuspendResumeNotification");
    }
    /**
     * {@snippet :
     * HPOWERNOTIFY RegisterSuspendResumeNotification(HANDLE hRecipient, DWORD Flags);
     * }
     */
    public static MemorySegment RegisterSuspendResumeNotification(MemorySegment hRecipient, int Flags) {
        var mh$ = RegisterSuspendResumeNotification$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hRecipient, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"UnregisterSuspendResumeNotification");
    }
    /**
     * {@snippet :
     * BOOL UnregisterSuspendResumeNotification(HPOWERNOTIFY Handle);
     * }
     */
    public static int UnregisterSuspendResumeNotification(MemorySegment Handle) {
        var mh$ = UnregisterSuspendResumeNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


