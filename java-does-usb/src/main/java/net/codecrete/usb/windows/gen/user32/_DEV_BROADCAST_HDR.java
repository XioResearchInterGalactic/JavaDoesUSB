// Generated by jextract

package net.codecrete.usb.windows.gen.user32;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _DEV_BROADCAST_HDR {
 *     DWORD dbch_size;
 *     DWORD dbch_devicetype;
 *     DWORD dbch_reserved;
 * };
 * }
 */
public class _DEV_BROADCAST_HDR {

    public static MemoryLayout $LAYOUT() {
        return constants$3.const$3;
    }
    public static VarHandle dbch_size$VH() {
        return constants$3.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dbch_size;
     * }
     */
    public static int dbch_size$get(MemorySegment seg) {
        return (int)constants$3.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dbch_size;
     * }
     */
    public static void dbch_size$set(MemorySegment seg, int x) {
        constants$3.const$4.set(seg, x);
    }
    public static int dbch_size$get(MemorySegment seg, long index) {
        return (int)constants$3.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_size$set(MemorySegment seg, long index, int x) {
        constants$3.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dbch_devicetype$VH() {
        return constants$3.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dbch_devicetype;
     * }
     */
    public static int dbch_devicetype$get(MemorySegment seg) {
        return (int)constants$3.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dbch_devicetype;
     * }
     */
    public static void dbch_devicetype$set(MemorySegment seg, int x) {
        constants$3.const$5.set(seg, x);
    }
    public static int dbch_devicetype$get(MemorySegment seg, long index) {
        return (int)constants$3.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_devicetype$set(MemorySegment seg, long index, int x) {
        constants$3.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dbch_reserved$VH() {
        return constants$4.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dbch_reserved;
     * }
     */
    public static int dbch_reserved$get(MemorySegment seg) {
        return (int)constants$4.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dbch_reserved;
     * }
     */
    public static void dbch_reserved$set(MemorySegment seg, int x) {
        constants$4.const$0.set(seg, x);
    }
    public static int dbch_reserved$get(MemorySegment seg, long index) {
        return (int)constants$4.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_reserved$set(MemorySegment seg, long index, int x) {
        constants$4.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


