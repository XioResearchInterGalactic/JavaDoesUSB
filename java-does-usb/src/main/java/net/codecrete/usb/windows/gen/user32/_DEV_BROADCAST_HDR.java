// Generated by jextract

package net.codecrete.usb.windows.gen.user32;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
public class _DEV_BROADCAST_HDR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dbch_size"),
        Constants$root.C_LONG$LAYOUT.withName("dbch_devicetype"),
        Constants$root.C_LONG$LAYOUT.withName("dbch_reserved")
    ).withName("_DEV_BROADCAST_HDR");
    public static MemoryLayout $LAYOUT() {
        return _DEV_BROADCAST_HDR.$struct$LAYOUT;
    }
    static final VarHandle dbch_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dbch_size"));
    public static VarHandle dbch_size$VH() {
        return _DEV_BROADCAST_HDR.dbch_size$VH;
    }
    public static int dbch_size$get(MemorySegment seg) {
        return (int)_DEV_BROADCAST_HDR.dbch_size$VH.get(seg);
    }
    public static void dbch_size$set( MemorySegment seg, int x) {
        _DEV_BROADCAST_HDR.dbch_size$VH.set(seg, x);
    }
    public static int dbch_size$get(MemorySegment seg, long index) {
        return (int)_DEV_BROADCAST_HDR.dbch_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_size$set(MemorySegment seg, long index, int x) {
        _DEV_BROADCAST_HDR.dbch_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dbch_devicetype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dbch_devicetype"));
    public static VarHandle dbch_devicetype$VH() {
        return _DEV_BROADCAST_HDR.dbch_devicetype$VH;
    }
    public static int dbch_devicetype$get(MemorySegment seg) {
        return (int)_DEV_BROADCAST_HDR.dbch_devicetype$VH.get(seg);
    }
    public static void dbch_devicetype$set( MemorySegment seg, int x) {
        _DEV_BROADCAST_HDR.dbch_devicetype$VH.set(seg, x);
    }
    public static int dbch_devicetype$get(MemorySegment seg, long index) {
        return (int)_DEV_BROADCAST_HDR.dbch_devicetype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_devicetype$set(MemorySegment seg, long index, int x) {
        _DEV_BROADCAST_HDR.dbch_devicetype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dbch_reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dbch_reserved"));
    public static VarHandle dbch_reserved$VH() {
        return _DEV_BROADCAST_HDR.dbch_reserved$VH;
    }
    public static int dbch_reserved$get(MemorySegment seg) {
        return (int)_DEV_BROADCAST_HDR.dbch_reserved$VH.get(seg);
    }
    public static void dbch_reserved$set( MemorySegment seg, int x) {
        _DEV_BROADCAST_HDR.dbch_reserved$VH.set(seg, x);
    }
    public static int dbch_reserved$get(MemorySegment seg, long index) {
        return (int)_DEV_BROADCAST_HDR.dbch_reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dbch_reserved$set(MemorySegment seg, long index, int x) {
        _DEV_BROADCAST_HDR.dbch_reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


