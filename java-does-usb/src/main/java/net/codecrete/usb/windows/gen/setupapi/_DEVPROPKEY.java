// Generated by jextract

package net.codecrete.usb.windows.gen.setupapi;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _DEVPROPKEY {
 *     DEVPROPGUID fmtid;
 *     DEVPROPID pid;
 * };
 * }
 */
public class _DEVPROPKEY {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static MemorySegment fmtid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static VarHandle pid$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DEVPROPID pid;
     * }
     */
    public static int pid$get(MemorySegment seg) {
        return (int)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DEVPROPID pid;
     * }
     */
    public static void pid$set(MemorySegment seg, int x) {
        constants$0.const$1.set(seg, x);
    }
    public static int pid$get(MemorySegment seg, long index) {
        return (int)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pid$set(MemorySegment seg, long index, int x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


